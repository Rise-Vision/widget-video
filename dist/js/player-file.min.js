function configure(){}function doneEvent(){source.postMessage({event:"playerEnded"},origin)}function readyEvent(){source.postMessage({event:"playerReady"},origin)}function errorEvent(e){source.postMessage({event:"playerError",error:e},origin)}function playlistItemEvent(e){source.postMessage({event:"playerItemChange",index:e},origin)}function init(e,t){window.oncontextmenu=function(){return!1},width=e.width,height=e.height,controls=e.video.controls,volume=e.video.volume,stretching=e.video.scaleToFit?"uniform":"none",autoPlay=controls?e.video.autoplay:!0,e.video.pause?(e.video.pause="string"==typeof e.video.pause?parseInt(e.video.pause,10):e.video.pause,pauseDuration=isNaN(e.video.pause)?0:e.video.pause):pauseDuration=0,configure(t)}function load(){player.loadVideo()}function play(){player.play()}function pause(){"PLAYING"===player.getState().toUpperCase()&&player.pause()}function stop(){player.stop()}function remove(){player.remove()}function getVideoFileType(e){var t,o=[".mp4",".webm"],n=e.toLowerCase(),r=null;for(t=0;t<=o.length;t+=1)if(-1!==n.indexOf(o[t])){r=o[t].substr(o[t].lastIndexOf(".")+1);break}return r}function configure(e){file=e;var t=function(){return playerJW({file:file,type:getVideoFileType(file),width:width,height:height,controls:!1,skin:{name:"rise"},stretching:stretching})};player=t()}var controls,volume,autoPlay,stretching,pauseDuration,width,height,player=null,source=null,origin=null,playerJW=function(e){"use strict";function t(){doneEvent()}function o(){d||(clearTimeout(g),g=setTimeout(function(){jwplayer().play(),jwplayer().setControls(!1),jwplayer().setControls(!0)},1e3*pauseDuration))}function n(e){playlistItemEvent(e)}function r(e){e&&errorEvent({type:"video",message:e.message})}function a(e){e&&errorEvent({type:"setup",message:e.message})}function i(){jwplayer("player").setup(e),jwplayer().onSetupError(function(e){a(e)}),jwplayer().on("ready",function(){e.hasOwnProperty("playlist")?(jwplayer().on("playlistComplete",function(){t()}),jwplayer().on("playlistItem",function(e){n(e.index)})):e.hasOwnProperty("file")&&jwplayer().on("complete",function(){t()}),jwplayer().on("error",function(e){r(e)}),controls&&pauseDuration>1&&jwplayer().on("pause",function(){o()}),jwplayer().setVolume(volume),controls&&!autoPlay&&jwplayer().setControls(!0),readyEvent()})}function l(){d=!1,autoPlay&&(controls&&!jwplayer().getControls()&&jwplayer().setControls(!0),jwplayer().play(),controls&&(jwplayer().setControls(!1),jwplayer().setControls(!0)))}function s(){d=!0,clearTimeout(g),jwplayer().pause()}function u(){this.pause()}function p(){d=!1,clearTimeout(g),g=null,jwplayer().remove()}function c(){return jwplayer().getDuration()}function y(){return jwplayer().getPosition()}function f(){return jwplayer().getState()}var d=!1,g=null;return{getDuration:c,getPosition:y,getState:f,loadVideo:i,play:l,pause:s,onPlayerError:r,onSetupError:a,stop:u,remove:p}};window.addEventListener("message",function(e){if(origin=e.origin||e.originalEvent.origin,"http://s3.amazonaws.com"!==origin&&"http://localhost:8000"!==origin)return origin=null,void 0;if(source=e.source,e.data&&"object"==typeof e.data&&e.data.event)switch(e.data.event){case"init":init(e.data.params,e.data.files),load();break;case"play":play();break;case"pause":pause();break;case"stop":stop();break;case"remove":remove()}});var file;
//# sourceMappingURL=data:application/json;base64,
