!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.videojs=t()}}(function(){var t;return function e(t,n,r){function o(s,a){if(!n[s]){if(!t[s]){var l="function"==typeof require&&require;if(!a&&l)return l(s,!0);if(i)return i(s,!0);var u=new Error("Cannot find module '"+s+"'");throw u.code="MODULE_NOT_FOUND",u}var c=n[s]={exports:{}};t[s][0].call(c.exports,function(e){var n=t[s][1][e];return o(n?n:e)},c,c.exports,e,t,n,r)}return n[s].exports}for(var i="function"==typeof require&&require,s=0;s<r.length;s++)o(r[s]);return o}({1:[function(t,e){(function(n){var r="undefined"!=typeof n?n:"undefined"!=typeof window?window:{},o=t("min-document");if("undefined"!=typeof document)e.exports=document;else{var i=r["__GLOBAL_DOCUMENT_CACHE@4"];i||(i=r["__GLOBAL_DOCUMENT_CACHE@4"]=o),e.exports=i}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"min-document":3}],2:[function(t,e){(function(t){e.exports="undefined"!=typeof window?window:"undefined"!=typeof t?t:"undefined"!=typeof self?self:{}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],3:[function(){},{}],4:[function(t,e){var n=t("../internal/getNative"),r=n(Date,"now"),o=r||function(){return(new Date).getTime()};e.exports=o},{"../internal/getNative":20}],5:[function(t,e){function n(t,e,n){function a(){v&&clearTimeout(v),d&&clearTimeout(d),b=0,d=v=m=void 0}function l(e,n){n&&clearTimeout(n),d=v=m=void 0,e&&(b=o(),h=t.apply(g,f),v||d||(f=g=void 0))}function u(){var t=e-(o()-y);0>=t||t>e?l(m,d):v=setTimeout(u,t)}function c(){l(j,v)}function p(){if(f=arguments,y=o(),g=this,m=j&&(v||!T),_===!1)var n=T&&!v;else{d||T||(b=y);var r=_-(y-b),i=0>=r||r>_;i?(d&&(d=clearTimeout(d)),b=y,h=t.apply(g,f)):d||(d=setTimeout(c,r))}return i&&v?v=clearTimeout(v):v||e===_||(v=setTimeout(u,e)),n&&(i=!0,h=t.apply(g,f)),!i||v||d||(f=g=void 0),h}var f,d,h,y,g,v,m,b=0,_=!1,j=!0;if("function"!=typeof t)throw new TypeError(i);if(e=0>e?0:+e||0,n===!0){var T=!0;j=!1}else r(n)&&(T=!!n.leading,_="maxWait"in n&&s(+n.maxWait||0,e),j="trailing"in n?!!n.trailing:j);return p.cancel=a,p}var r=t("../lang/isObject"),o=t("../date/now"),i="Expected a function",s=Math.max;e.exports=n},{"../date/now":4,"../lang/isObject":33}],6:[function(t,e){function n(t,e){if("function"!=typeof t)throw new TypeError(r);return e=o(void 0===e?t.length-1:+e||0,0),function(){for(var n=arguments,r=-1,i=o(n.length-e,0),s=Array(i);++r<i;)s[r]=n[e+r];switch(e){case 0:return t.call(this,s);case 1:return t.call(this,n[0],s);case 2:return t.call(this,n[0],n[1],s)}var a=Array(e+1);for(r=-1;++r<e;)a[r]=n[r];return a[e]=s,t.apply(this,a)}}var r="Expected a function",o=Math.max;e.exports=n},{}],7:[function(t,e){function n(t,e,n){var s=!0,a=!0;if("function"!=typeof t)throw new TypeError(i);return n===!1?s=!1:o(n)&&(s="leading"in n?!!n.leading:s,a="trailing"in n?!!n.trailing:a),r(t,e,{leading:s,maxWait:+e,trailing:a})}var r=t("./debounce"),o=t("../lang/isObject"),i="Expected a function";e.exports=n},{"../lang/isObject":33,"./debounce":5}],8:[function(t,e){function n(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}e.exports=n},{}],9:[function(t,e){function n(t,e){for(var n=-1,r=t.length;++n<r&&e(t[n],n,t)!==!1;);return t}e.exports=n},{}],10:[function(t,e){function n(t,e,n){n||(n={});for(var r=-1,o=e.length;++r<o;){var i=e[r];n[i]=t[i]}return n}e.exports=n},{}],11:[function(t,e){var n=t("./createBaseFor"),r=n();e.exports=r},{"./createBaseFor":18}],12:[function(t,e){function n(t,e){return r(t,e,o)}var r=t("./baseFor"),o=t("../object/keysIn");e.exports=n},{"../object/keysIn":39,"./baseFor":11}],13:[function(t,e){function n(t,e,p,f,d){if(!a(t))return t;var h=s(e)&&(i(e)||u(e)),y=h?void 0:c(e);return r(y||e,function(r,i){if(y&&(i=r,r=e[i]),l(r))f||(f=[]),d||(d=[]),o(t,e,i,n,p,f,d);else{var s=t[i],a=p?p(s,r,i,t,e):void 0,u=void 0===a;u&&(a=r),void 0===a&&(!h||i in t)||!u&&(a===a?a===s:s!==s)||(t[i]=a)}}),t}var r=t("./arrayEach"),o=t("./baseMergeDeep"),i=t("../lang/isArray"),s=t("./isArrayLike"),a=t("../lang/isObject"),l=t("./isObjectLike"),u=t("../lang/isTypedArray"),c=t("../object/keys");e.exports=n},{"../lang/isArray":30,"../lang/isObject":33,"../lang/isTypedArray":36,"../object/keys":38,"./arrayEach":9,"./baseMergeDeep":14,"./isArrayLike":21,"./isObjectLike":26}],14:[function(t,e){function n(t,e,n,c,p,f,d){for(var h=f.length,y=e[n];h--;)if(f[h]==y)return t[n]=d[h],void 0;var g=t[n],v=p?p(g,y,n,t,e):void 0,m=void 0===v;m&&(v=y,s(y)&&(i(y)||l(y))?v=i(g)?g:s(g)?r(g):[]:a(y)||o(y)?v=o(g)?u(g):a(g)?g:{}:m=!1),f.push(y),d.push(v),m?t[n]=c(v,y,p,f,d):(v===v?v!==g:g===g)&&(t[n]=v)}var r=t("./arrayCopy"),o=t("../lang/isArguments"),i=t("../lang/isArray"),s=t("./isArrayLike"),a=t("../lang/isPlainObject"),l=t("../lang/isTypedArray"),u=t("../lang/toPlainObject");e.exports=n},{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isPlainObject":34,"../lang/isTypedArray":36,"../lang/toPlainObject":37,"./arrayCopy":8,"./isArrayLike":21}],15:[function(t,e){function n(t){return function(e){return null==e?void 0:r(e)[t]}}var r=t("./toObject");e.exports=n},{"./toObject":28}],16:[function(t,e){function n(t,e,n){if("function"!=typeof t)return r;if(void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 3:return function(n,r,o){return t.call(e,n,r,o)};case 4:return function(n,r,o,i){return t.call(e,n,r,o,i)};case 5:return function(n,r,o,i,s){return t.call(e,n,r,o,i,s)}}return function(){return t.apply(e,arguments)}}var r=t("../utility/identity");e.exports=n},{"../utility/identity":42}],17:[function(t,e){function n(t){return i(function(e,n){var i=-1,s=null==e?0:n.length,a=s>2?n[s-2]:void 0,l=s>2?n[2]:void 0,u=s>1?n[s-1]:void 0;for("function"==typeof a?(a=r(a,u,5),s-=2):(a="function"==typeof u?u:void 0,s-=a?1:0),l&&o(n[0],n[1],l)&&(a=3>s?void 0:a,s=1);++i<s;){var c=n[i];c&&t(e,c,a)}return e})}var r=t("./bindCallback"),o=t("./isIterateeCall"),i=t("../function/restParam");e.exports=n},{"../function/restParam":6,"./bindCallback":16,"./isIterateeCall":24}],18:[function(t,e){function n(t){return function(e,n,o){for(var i=r(e),s=o(e),a=s.length,l=t?a:-1;t?l--:++l<a;){var u=s[l];if(n(i[u],u,i)===!1)break}return e}}var r=t("./toObject");e.exports=n},{"./toObject":28}],19:[function(t,e){var n=t("./baseProperty"),r=n("length");e.exports=r},{"./baseProperty":15}],20:[function(t,e){function n(t,e){var n=null==t?void 0:t[e];return r(n)?n:void 0}var r=t("../lang/isNative");e.exports=n},{"../lang/isNative":32}],21:[function(t,e){function n(t){return null!=t&&o(r(t))}var r=t("./getLength"),o=t("./isLength");e.exports=n},{"./getLength":19,"./isLength":25}],22:[function(t,e){var n=function(){try{Object({toString:0}+"")}catch(t){return function(){return!1}}return function(t){return"function"!=typeof t.toString&&"string"==typeof(t+"")}}();e.exports=n},{}],23:[function(t,e){function n(t,e){return t="number"==typeof t||r.test(t)?+t:-1,e=null==e?o:e,t>-1&&t%1==0&&e>t}var r=/^\d+$/,o=9007199254740991;e.exports=n},{}],24:[function(t,e){function n(t,e,n){if(!i(n))return!1;var s=typeof e;if("number"==s?r(n)&&o(e,n.length):"string"==s&&e in n){var a=n[e];return t===t?t===a:a!==a}return!1}var r=t("./isArrayLike"),o=t("./isIndex"),i=t("../lang/isObject");e.exports=n},{"../lang/isObject":33,"./isArrayLike":21,"./isIndex":23}],25:[function(t,e){function n(t){return"number"==typeof t&&t>-1&&t%1==0&&r>=t}var r=9007199254740991;e.exports=n},{}],26:[function(t,e){function n(t){return!!t&&"object"==typeof t}e.exports=n},{}],27:[function(t,e){function n(t){for(var e=l(t),n=e.length,u=n&&t.length,p=!!u&&s(u)&&(o(t)||r(t)||a(t)),f=-1,d=[];++f<n;){var h=e[f];(p&&i(h,u)||c.call(t,h))&&d.push(h)}return d}var r=t("../lang/isArguments"),o=t("../lang/isArray"),i=t("./isIndex"),s=t("./isLength"),a=t("../lang/isString"),l=t("../object/keysIn"),u=Object.prototype,c=u.hasOwnProperty;e.exports=n},{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isString":35,"../object/keysIn":39,"./isIndex":23,"./isLength":25}],28:[function(t,e){function n(t){if(i.unindexedChars&&o(t)){for(var e=-1,n=t.length,s=Object(t);++e<n;)s[e]=t.charAt(e);return s}return r(t)?t:Object(t)}var r=t("../lang/isObject"),o=t("../lang/isString"),i=t("../support");e.exports=n},{"../lang/isObject":33,"../lang/isString":35,"../support":41}],29:[function(t,e){function n(t){return o(t)&&r(t)&&s.call(t,"callee")&&!a.call(t,"callee")}var r=t("../internal/isArrayLike"),o=t("../internal/isObjectLike"),i=Object.prototype,s=i.hasOwnProperty,a=i.propertyIsEnumerable;e.exports=n},{"../internal/isArrayLike":21,"../internal/isObjectLike":26}],30:[function(t,e){var n=t("../internal/getNative"),r=t("../internal/isLength"),o=t("../internal/isObjectLike"),i="[object Array]",s=Object.prototype,a=s.toString,l=n(Array,"isArray"),u=l||function(t){return o(t)&&r(t.length)&&a.call(t)==i};e.exports=u},{"../internal/getNative":20,"../internal/isLength":25,"../internal/isObjectLike":26}],31:[function(t,e){function n(t){return r(t)&&s.call(t)==o}var r=t("./isObject"),o="[object Function]",i=Object.prototype,s=i.toString;e.exports=n},{"./isObject":33}],32:[function(t,e){function n(t){return null==t?!1:r(t)?c.test(l.call(t)):i(t)&&(o(t)?c:s).test(t)}var r=t("./isFunction"),o=t("../internal/isHostObject"),i=t("../internal/isObjectLike"),s=/^\[object .+?Constructor\]$/,a=Object.prototype,l=Function.prototype.toString,u=a.hasOwnProperty,c=RegExp("^"+l.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=n},{"../internal/isHostObject":22,"../internal/isObjectLike":26,"./isFunction":31}],33:[function(t,e){function n(t){var e=typeof t;return!!t&&("object"==e||"function"==e)}e.exports=n},{}],34:[function(t,e){function n(t){var e;if(!s(t)||p.call(t)!=l||i(t)||o(t)||!c.call(t,"constructor")&&(e=t.constructor,"function"==typeof e&&!(e instanceof e)))return!1;var n;return a.ownLast?(r(t,function(t,e,r){return n=c.call(r,e),!1}),n!==!1):(r(t,function(t,e){n=e}),void 0===n||c.call(t,n))}var r=t("../internal/baseForIn"),o=t("./isArguments"),i=t("../internal/isHostObject"),s=t("../internal/isObjectLike"),a=t("../support"),l="[object Object]",u=Object.prototype,c=u.hasOwnProperty,p=u.toString;e.exports=n},{"../internal/baseForIn":12,"../internal/isHostObject":22,"../internal/isObjectLike":26,"../support":41,"./isArguments":29}],35:[function(t,e){function n(t){return"string"==typeof t||r(t)&&s.call(t)==o}var r=t("../internal/isObjectLike"),o="[object String]",i=Object.prototype,s=i.toString;e.exports=n},{"../internal/isObjectLike":26}],36:[function(t,e){function n(t){return o(t)&&r(t.length)&&!!x[P.call(t)]}var r=t("../internal/isLength"),o=t("../internal/isObjectLike"),i="[object Arguments]",s="[object Array]",a="[object Boolean]",l="[object Date]",u="[object Error]",c="[object Function]",p="[object Map]",f="[object Number]",d="[object Object]",h="[object RegExp]",y="[object Set]",g="[object String]",v="[object WeakMap]",m="[object ArrayBuffer]",b="[object Float32Array]",_="[object Float64Array]",j="[object Int8Array]",T="[object Int16Array]",w="[object Int32Array]",k="[object Uint8Array]",E="[object Uint8ClampedArray]",C="[object Uint16Array]",O="[object Uint32Array]",x={};x[b]=x[_]=x[j]=x[T]=x[w]=x[k]=x[E]=x[C]=x[O]=!0,x[i]=x[s]=x[m]=x[a]=x[l]=x[u]=x[c]=x[p]=x[f]=x[d]=x[h]=x[y]=x[g]=x[v]=!1;var S=Object.prototype,P=S.toString;e.exports=n},{"../internal/isLength":25,"../internal/isObjectLike":26}],37:[function(t,e){function n(t){return r(t,o(t))}var r=t("../internal/baseCopy"),o=t("../object/keysIn");e.exports=n},{"../internal/baseCopy":10,"../object/keysIn":39}],38:[function(t,e){var n=t("../internal/getNative"),r=t("../internal/isArrayLike"),o=t("../lang/isObject"),i=t("../internal/shimKeys"),s=t("../support"),a=n(Object,"keys"),l=a?function(t){var e=null==t?void 0:t.constructor;return"function"==typeof e&&e.prototype===t||("function"==typeof t?s.enumPrototypes:r(t))?i(t):o(t)?a(t):[]}:i;e.exports=l},{"../internal/getNative":20,"../internal/isArrayLike":21,"../internal/shimKeys":27,"../lang/isObject":33,"../support":41}],39:[function(t,e){function n(t){if(null==t)return[];u(t)||(t=Object(t));var e=t.length;e=e&&l(e)&&(i(t)||o(t)||c(t))&&e||0;for(var n=t.constructor,r=-1,f=s(n)&&n.prototype||w,d=f===t,h=Array(e),g=e>0,v=p.enumErrorProps&&(t===T||t instanceof Error),b=p.enumPrototypes&&s(t);++r<e;)h[r]=r+"";for(var x in t)b&&"prototype"==x||v&&("message"==x||"name"==x)||g&&a(x,e)||"constructor"==x&&(d||!E.call(t,x))||h.push(x);if(p.nonEnumShadows&&t!==w){var S=t===k?_:t===T?y:C.call(t),P=O[S]||O[m];for(S==m&&(f=w),e=j.length;e--;){x=j[e];var M=P[x];d&&M||(M?!E.call(t,x):t[x]===f[x])||h.push(x)}}return h}var r=t("../internal/arrayEach"),o=t("../lang/isArguments"),i=t("../lang/isArray"),s=t("../lang/isFunction"),a=t("../internal/isIndex"),l=t("../internal/isLength"),u=t("../lang/isObject"),c=t("../lang/isString"),p=t("../support"),f="[object Array]",d="[object Boolean]",h="[object Date]",y="[object Error]",g="[object Function]",v="[object Number]",m="[object Object]",b="[object RegExp]",_="[object String]",j=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"],T=Error.prototype,w=Object.prototype,k=String.prototype,E=w.hasOwnProperty,C=w.toString,O={};O[f]=O[h]=O[v]={constructor:!0,toLocaleString:!0,toString:!0,valueOf:!0},O[d]=O[_]={constructor:!0,toString:!0,valueOf:!0},O[y]=O[g]=O[b]={constructor:!0,toString:!0},O[m]={constructor:!0},r(j,function(t){for(var e in O)if(E.call(O,e)){var n=O[e];n[t]=E.call(n,t)}}),e.exports=n},{"../internal/arrayEach":9,"../internal/isIndex":23,"../internal/isLength":25,"../lang/isArguments":29,"../lang/isArray":30,"../lang/isFunction":31,"../lang/isObject":33,"../lang/isString":35,"../support":41}],40:[function(t,e){var n=t("../internal/baseMerge"),r=t("../internal/createAssigner"),o=r(n);e.exports=o},{"../internal/baseMerge":13,"../internal/createAssigner":17}],41:[function(t,e){var n=Array.prototype,r=Error.prototype,o=Object.prototype,i=o.propertyIsEnumerable,s=n.splice,a={};!function(t){var e=function(){this.x=t},n={0:t,length:t},o=[];e.prototype={valueOf:t,y:t};for(var l in new e)o.push(l);a.enumErrorProps=i.call(r,"message")||i.call(r,"name"),a.enumPrototypes=i.call(e,"prototype"),a.nonEnumShadows=!/valueOf/.test(o),a.ownLast="x"!=o[0],a.spliceObjects=(s.call(n,0,1),!n[0]),a.unindexedChars="x"[0]+Object("x")[0]!="xx"}(1,0),e.exports=a},{}],42:[function(t,e){function n(t){return t}e.exports=n},{}],43:[function(t,e){"use strict";var n=t("object-keys");e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var t={},e=Symbol("test");if("string"==typeof e)return!1;var r=42;t[e]=r;for(e in t)return!1;if(0!==n(t).length)return!1;if("function"==typeof Object.keys&&0!==Object.keys(t).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(t).length)return!1;var o=Object.getOwnPropertySymbols(t);if(1!==o.length||o[0]!==e)return!1;if(!Object.prototype.propertyIsEnumerable.call(t,e))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(t,e);if(i.value!==r||i.enumerable!==!0)return!1}return!0}},{"object-keys":50}],44:[function(t,e){"use strict";var n=t("object-keys"),r=t("function-bind"),o=function(t){return"undefined"!=typeof t&&null!==t},i=t("./hasSymbols")(),s=Object,a=r.call(Function.call,Array.prototype.push),l=r.call(Function.call,Object.prototype.propertyIsEnumerable);e.exports=function(t){if(!o(t))throw new TypeError("target must be an object");var e,r,u,c,p,f,d,h=s(t);for(e=1;e<arguments.length;++e){if(r=s(arguments[e]),c=n(r),i&&Object.getOwnPropertySymbols)for(p=Object.getOwnPropertySymbols(r),u=0;u<p.length;++u)d=p[u],l(r,d)&&a(c,d);for(u=0;u<c.length;++u)d=c[u],f=r[d],l(r,d)&&(h[d]=f)}return h}},{"./hasSymbols":43,"function-bind":49,"object-keys":50}],45:[function(t,e){"use strict";var n=t("define-properties"),r=t("./implementation"),o=t("./polyfill"),i=t("./shim");n(r,{implementation:r,getPolyfill:o,shim:i}),e.exports=r},{"./implementation":44,"./polyfill":52,"./shim":53,"define-properties":46}],46:[function(t,e){"use strict";var n=t("object-keys"),r=t("foreach"),o="function"==typeof Symbol&&"symbol"==typeof Symbol(),i=Object.prototype.toString,s=function(t){return"function"==typeof t&&"[object Function]"===i.call(t)},a=function(){var t={};try{Object.defineProperty(t,"x",{enumerable:!1,value:t});for(var e in t)return!1;return t.x===t}catch(n){return!1}},l=Object.defineProperty&&a(),u=function(t,e,n,r){(!(e in t)||s(r)&&r())&&(l?Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:n,writable:!0}):t[e]=n)},c=function(t,e){var i=arguments.length>2?arguments[2]:{},s=n(e);o&&(s=s.concat(Object.getOwnPropertySymbols(e))),r(s,function(n){u(t,n,e[n],i[n])})};c.supportsDescriptors=!!l,e.exports=c},{foreach:47,"object-keys":50}],47:[function(t,e){var n=Object.prototype.hasOwnProperty,r=Object.prototype.toString;e.exports=function(t,e,o){if("[object Function]"!==r.call(e))throw new TypeError("iterator must be a function");var i=t.length;if(i===+i)for(var s=0;i>s;s++)e.call(o,t[s],s,t);else for(var a in t)n.call(t,a)&&e.call(o,t[a],a,t)}},{}],48:[function(t,e){var n="Function.prototype.bind called on incompatible ",r=Array.prototype.slice,o=Object.prototype.toString,i="[object Function]";e.exports=function(t){var e=this;if("function"!=typeof e||o.call(e)!==i)throw new TypeError(n+e);for(var s,a=r.call(arguments,1),l=function(){if(this instanceof s){var n=e.apply(this,a.concat(r.call(arguments)));return Object(n)===n?n:this}return e.apply(t,a.concat(r.call(arguments)))},u=Math.max(0,e.length-a.length),c=[],p=0;u>p;p++)c.push("$"+p);if(s=Function("binder","return function ("+c.join(",")+"){ return binder.apply(this,arguments); }")(l),e.prototype){var f=function(){};f.prototype=e.prototype,s.prototype=new f,f.prototype=null}return s}},{}],49:[function(t,e){var n=t("./implementation");e.exports=Function.prototype.bind||n},{"./implementation":48}],50:[function(t,e){"use strict";var n=Object.prototype.hasOwnProperty,r=Object.prototype.toString,o=Array.prototype.slice,i=t("./isArguments"),s=Object.prototype.propertyIsEnumerable,a=!s.call({toString:null},"toString"),l=s.call(function(){},"prototype"),u=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"],c=function(t){var e=t.constructor;return e&&e.prototype===t},p={$console:!0,$external:!0,$frame:!0,$frameElement:!0,$frames:!0,$innerHeight:!0,$innerWidth:!0,$outerHeight:!0,$outerWidth:!0,$pageXOffset:!0,$pageYOffset:!0,$parent:!0,$scrollLeft:!0,$scrollTop:!0,$scrollX:!0,$scrollY:!0,$self:!0,$webkitIndexedDB:!0,$webkitStorageInfo:!0,$window:!0},f=function(){if("undefined"==typeof window)return!1;for(var t in window)try{if(!p["$"+t]&&n.call(window,t)&&null!==window[t]&&"object"==typeof window[t])try{c(window[t])}catch(e){return!0}}catch(e){return!0}return!1}(),d=function(t){if("undefined"==typeof window||!f)return c(t);try{return c(t)}catch(e){return!1}},h=function(t){var e=null!==t&&"object"==typeof t,o="[object Function]"===r.call(t),s=i(t),c=e&&"[object String]"===r.call(t),p=[];if(!e&&!o&&!s)throw new TypeError("Object.keys called on a non-object");var f=l&&o;if(c&&t.length>0&&!n.call(t,0))for(var h=0;h<t.length;++h)p.push(String(h));if(s&&t.length>0)for(var y=0;y<t.length;++y)p.push(String(y));else for(var g in t)f&&"prototype"===g||!n.call(t,g)||p.push(String(g));if(a)for(var v=d(t),m=0;m<u.length;++m)v&&"constructor"===u[m]||!n.call(t,u[m])||p.push(u[m]);return p};h.shim=function(){if(Object.keys){var t=function(){return 2===(Object.keys(arguments)||"").length}(1,2);if(!t){var e=Object.keys;Object.keys=function(t){return i(t)?e(o.call(t)):e(t)}}}else Object.keys=h;return Object.keys||h},e.exports=h},{"./isArguments":51}],51:[function(t,e){"use strict";var n=Object.prototype.toString;e.exports=function(t){var e=n.call(t),r="[object Arguments]"===e;return r||(r="[object Array]"!==e&&null!==t&&"object"==typeof t&&"number"==typeof t.length&&t.length>=0&&"[object Function]"===n.call(t.callee)),r}},{}],52:[function(t,e){"use strict";var n=t("./implementation"),r=function(){if(!Object.assign)return!1;for(var t="abcdefghijklmnopqrst",e=t.split(""),n={},r=0;r<e.length;++r)n[e[r]]=e[r];var o=Object.assign({},n),i="";for(var s in o)i+=s;return t!==i},o=function(){if(!Object.assign||!Object.preventExtensions)return!1;var t=Object.preventExtensions({1:2});try{Object.assign(t,"xy")}catch(e){return"y"===t[1]}};e.exports=function(){return Object.assign?r()?n:o()?n:Object.assign:n}},{"./implementation":44}],53:[function(t,e){"use strict";var n=t("define-properties"),r=t("./polyfill");e.exports=function(){var t=r();return n(Object,{assign:t},{assign:function(){return Object.assign!==t}}),t}},{"./polyfill":52,"define-properties":46}],54:[function(t,e){function n(t,e){var n,r=null;try{n=JSON.parse(t,e)}catch(o){r=o}return[r,n]}e.exports=n},{}],55:[function(t,e){function n(t){return t.replace(/\n\r?\s*/g,"")}e.exports=function(t){for(var e="",r=0;r<arguments.length;r++)e+=n(t[r])+(arguments[r+1]||"");return e}},{}],56:[function(t,e){"use strict";function n(t,e){for(var n=0;n<t.length;n++)e(t[n])}function r(t){for(var e in t)if(t.hasOwnProperty(e))return!1;return!0}function o(t,e,n){var r=t;return c(e)?(n=e,"string"==typeof t&&(r={uri:t})):r=f(e,{uri:t}),r.callback=n,r}function i(t,e,n){return e=o(t,e,n),s(e)}function s(t){function e(){4===c.readyState&&s()}function n(){var t=void 0;if(c.response?t=c.response:"text"!==c.responseType&&c.responseType||(t=c.responseText||c.responseXML),_)try{t=JSON.parse(t)}catch(e){}return t}function o(t){clearTimeout(h),t instanceof Error||(t=new Error(""+(t||"Unknown XMLHttpRequest Error"))),t.statusCode=0,a(t,l)}function s(){if(!d){var e;clearTimeout(h),e=t.useXDR&&void 0===c.status?200:1223===c.status?204:c.status;var r=l,o=null;0!==e?(r={body:n(),statusCode:e,method:g,headers:{},url:y,rawRequest:c},c.getAllResponseHeaders&&(r.headers=p(c.getAllResponseHeaders()))):o=new Error("Internal XMLHttpRequest Error"),a(o,r,r.body)}}var a=t.callback;if("undefined"==typeof a)throw new Error("callback argument missing");a=u(a);var l={body:void 0,headers:{},statusCode:0,method:g,url:y,rawRequest:c},c=t.xhr||null;c||(c=t.cors||t.useXDR?new i.XDomainRequest:new i.XMLHttpRequest);var f,d,h,y=c.url=t.uri||t.url,g=c.method=t.method||"GET",v=t.body||t.data||null,m=c.headers=t.headers||{},b=!!t.sync,_=!1;if("json"in t&&(_=!0,m.accept||m.Accept||(m.Accept="application/json"),"GET"!==g&&"HEAD"!==g&&(m["content-type"]||m["Content-Type"]||(m["Content-Type"]="application/json"),v=JSON.stringify(t.json))),c.onreadystatechange=e,c.onload=s,c.onerror=o,c.onprogress=function(){},c.ontimeout=o,c.open(g,y,!b,t.username,t.password),b||(c.withCredentials=!!t.withCredentials),!b&&t.timeout>0&&(h=setTimeout(function(){d=!0,c.abort("timeout");var t=new Error("XMLHttpRequest timeout");t.code="ETIMEDOUT",o(t)},t.timeout)),c.setRequestHeader)for(f in m)m.hasOwnProperty(f)&&c.setRequestHeader(f,m[f]);else if(t.headers&&!r(t.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in t&&(c.responseType=t.responseType),"beforeSend"in t&&"function"==typeof t.beforeSend&&t.beforeSend(c),c.send(v),c}function a(){}var l=t("global/window"),u=t("once"),c=t("is-function"),p=t("parse-headers"),f=t("xtend");e.exports=i,i.XMLHttpRequest=l.XMLHttpRequest||a,i.XDomainRequest="withCredentials"in new i.XMLHttpRequest?i.XMLHttpRequest:l.XDomainRequest,n(["get","put","post","patch","head","delete"],function(t){i["delete"===t?"del":t]=function(e,n,r){return n=o(e,n,r),n.method=t.toUpperCase(),s(n)}})},{"global/window":2,"is-function":57,once:58,"parse-headers":61,xtend:62}],57:[function(t,e){function n(t){var e=r.call(t);return"[object Function]"===e||"function"==typeof t&&"[object RegExp]"!==e||"undefined"!=typeof window&&(t===window.setTimeout||t===window.alert||t===window.confirm||t===window.prompt)}e.exports=n;var r=Object.prototype.toString},{}],58:[function(t,e){function n(t){var e=!1;return function(){return e?void 0:(e=!0,t.apply(this,arguments))}}e.exports=n,n.proto=n(function(){Object.defineProperty(Function.prototype,"once",{value:function(){return n(this)},configurable:!0})})},{}],59:[function(t,e){function n(t,e,n){if(!s(e))throw new TypeError("iterator must be a function");arguments.length<3&&(n=this),"[object Array]"===a.call(t)?r(t,e,n):"string"==typeof t?o(t,e,n):i(t,e,n)}function r(t,e,n){for(var r=0,o=t.length;o>r;r++)l.call(t,r)&&e.call(n,t[r],r,t)}function o(t,e,n){for(var r=0,o=t.length;o>r;r++)e.call(n,t.charAt(r),r,t)}function i(t,e,n){for(var r in t)l.call(t,r)&&e.call(n,t[r],r,t)}var s=t("is-function");e.exports=n;var a=Object.prototype.toString,l=Object.prototype.hasOwnProperty},{"is-function":57}],60:[function(t,e,n){function r(t){return t.replace(/^\s*|\s*$/g,"")}n=e.exports=r,n.left=function(t){return t.replace(/^\s*/,"")},n.right=function(t){return t.replace(/\s*$/,"")}},{}],61:[function(t,e){var n=t("trim"),r=t("for-each"),o=function(t){return"[object Array]"===Object.prototype.toString.call(t)};e.exports=function(t){if(!t)return{};var e={};return r(n(t).split("\n"),function(t){var r=t.indexOf(":"),i=n(t.slice(0,r)).toLowerCase(),s=n(t.slice(r+1));"undefined"==typeof e[i]?e[i]=s:o(e[i])?e[i].push(s):e[i]=[e[i],s]}),e}},{"for-each":59,trim:60}],62:[function(t,e){function n(){for(var t={},e=0;e<arguments.length;e++){var n=arguments[e];for(var o in n)r.call(n,o)&&(t[o]=n[o])}return t}e.exports=n;var r=Object.prototype.hasOwnProperty},{}],63:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("./button.js"),a=r(s),l=t("./component.js"),u=r(l),c=function(t){function e(n,r){o(this,e),t.call(this,n,r)}return i(e,t),e.prototype.buildCSSClass=function(){return"vjs-big-play-button"},e.prototype.handleClick=function(){this.player_.play()},e}(a["default"]);c.prototype.controlText_="Play Video",u["default"].registerComponent("BigPlayButton",c),n["default"]=c,e.exports=n["default"]},{"./button.js":64,"./component.js":67}],64:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./clickable-component.js"),l=o(a),u=t("./component"),c=o(u),p=t("./utils/events.js"),f=(r(p),t("./utils/fn.js")),d=(r(f),t("./utils/log.js")),h=o(d),y=t("global/document"),g=(o(y),t("object.assign")),v=o(g),m=function(t){function e(n,r){i(this,e),t.call(this,n,r)}return s(e,t),e.prototype.createEl=function(){var t=arguments.length<=0||void 0===arguments[0]?"button":arguments[0],e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];e=v["default"]({className:this.buildCSSClass()},e),"button"!==t&&(h["default"].warn("Creating a Button with an HTML element of "+t+" is deprecated; use ClickableComponent instead."),e=v["default"]({tabIndex:0},e),n=v["default"]({role:"button"},n)),n=v["default"]({type:"button","aria-live":"polite"},n);var r=c["default"].prototype.createEl.call(this,t,e,n);return this.createControlTextEl(r),r},e.prototype.addChild=function(t){var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],n=this.constructor.name;return h["default"].warn("Adding an actionable (user controllable) child to a Button ("+n+") is not supported; use a ClickableComponent instead."),c["default"].prototype.addChild.call(this,t,e)},e.prototype.handleKeyPress=function(e){32===e.which||13===e.which||t.prototype.handleKeyPress.call(this,e)},e}(l["default"]);c["default"].registerComponent("Button",m),n["default"]=m,e.exports=n["default"]},{"./clickable-component.js":65,"./component":67,"./utils/events.js":143,"./utils/fn.js":144,"./utils/log.js":147,"global/document":1,"object.assign":45}],65:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./component"),l=o(a),u=t("./utils/dom.js"),c=r(u),p=t("./utils/events.js"),f=r(p),d=t("./utils/fn.js"),h=r(d),y=t("./utils/log.js"),g=o(y),v=t("global/document"),m=o(v),b=t("object.assign"),_=o(b),j=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.emitTapEvents(),this.on("tap",this.handleClick),this.on("click",this.handleClick),this.on("focus",this.handleFocus),this.on("blur",this.handleBlur)}return s(e,t),e.prototype.createEl=function(){var e=arguments.length<=0||void 0===arguments[0]?"div":arguments[0],n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],r=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];n=_["default"]({className:this.buildCSSClass(),tabIndex:0},n),"button"===e&&g["default"].error("Creating a ClickableComponent with an HTML element of "+e+" is not supported; use a Button instead."),r=_["default"]({role:"button","aria-live":"polite"},r);var o=t.prototype.createEl.call(this,e,n,r);return this.createControlTextEl(o),o},e.prototype.createControlTextEl=function(t){return this.controlTextEl_=c.createEl("span",{className:"vjs-control-text"}),t&&t.appendChild(this.controlTextEl_),this.controlText(this.controlText_,t),this.controlTextEl_},e.prototype.controlText=function(t){var e=arguments.length<=1||void 0===arguments[1]?this.el():arguments[1];if(!t)return this.controlText_||"Need Text";var n=this.localize(t);return this.controlText_=t,this.controlTextEl_.innerHTML=n,e.setAttribute("title",n),this},e.prototype.buildCSSClass=function(){return"vjs-control vjs-button "+t.prototype.buildCSSClass.call(this)},e.prototype.addChild=function(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return t.prototype.addChild.call(this,e,n)},e.prototype.enable=function(){return this.removeClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","false"),this},e.prototype.disable=function(){return this.addClass("vjs-disabled"),this.el_.setAttribute("aria-disabled","true"),this},e.prototype.handleClick=function(){},e.prototype.handleFocus=function(){f.on(m["default"],"keydown",h.bind(this,this.handleKeyPress))},e.prototype.handleKeyPress=function(e){32===e.which||13===e.which?(e.preventDefault(),this.handleClick(e)):t.prototype.handleKeyPress&&t.prototype.handleKeyPress.call(this,e)
},e.prototype.handleBlur=function(){f.off(m["default"],"keydown",h.bind(this,this.handleKeyPress))},e}(l["default"]);l["default"].registerComponent("ClickableComponent",j),n["default"]=j,e.exports=n["default"]},{"./component":67,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/log.js":147,"global/document":1,"object.assign":45}],66:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("./button"),a=r(s),l=t("./component"),u=r(l),c=function(t){function e(n,r){o(this,e),t.call(this,n,r),this.controlText(r&&r.controlText||this.localize("Close"))}return i(e,t),e.prototype.buildCSSClass=function(){return"vjs-close-button "+t.prototype.buildCSSClass.call(this)},e.prototype.handleClick=function(){this.trigger({type:"close",bubbles:!1})},e}(a["default"]);u["default"].registerComponent("CloseButton",c),n["default"]=c,e.exports=n["default"]},{"./button":64,"./component":67}],67:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n.__esModule=!0;var s=t("global/window"),a=o(s),l=t("./utils/dom.js"),u=r(l),c=t("./utils/fn.js"),p=r(c),f=t("./utils/guid.js"),d=r(f),h=t("./utils/events.js"),y=r(h),g=t("./utils/log.js"),v=o(g),m=t("./utils/to-title-case.js"),b=o(m),_=t("./utils/merge-options.js"),j=o(_),T=function(){function t(e,n,r){if(i(this,t),this.player_=!e&&this.play?e=this:e,this.options_=j["default"]({},this.options_),n=this.options_=j["default"](this.options_,n),this.id_=n.id||n.el&&n.el.id,!this.id_){var o=e&&e.id&&e.id()||"no_player";this.id_=o+"_component_"+d.newGUID()}this.name_=n.name||null,n.el?this.el_=n.el:n.createEl!==!1&&(this.el_=this.createEl()),this.children_=[],this.childIndex_={},this.childNameIndex_={},n.initChildren!==!1&&this.initChildren(),this.ready(r),n.reportTouchActivity!==!1&&this.enableTouchActivity()}return t.prototype.dispose=function(){if(this.trigger({type:"dispose",bubbles:!1}),this.children_)for(var t=this.children_.length-1;t>=0;t--)this.children_[t].dispose&&this.children_[t].dispose();this.children_=null,this.childIndex_=null,this.childNameIndex_=null,this.off(),this.el_.parentNode&&this.el_.parentNode.removeChild(this.el_),u.removeElData(this.el_),this.el_=null},t.prototype.player=function(){return this.player_},t.prototype.options=function(t){return v["default"].warn("this.options() has been deprecated and will be moved to the constructor in 6.0"),t?(this.options_=j["default"](this.options_,t),this.options_):this.options_},t.prototype.el=function(){return this.el_},t.prototype.createEl=function(t,e,n){return u.createEl(t,e,n)},t.prototype.localize=function(t){var e=this.player_.language&&this.player_.language(),n=this.player_.languages&&this.player_.languages();if(!e||!n)return t;var r=n[e];if(r&&r[t])return r[t];var o=e.split("-")[0],i=n[o];return i&&i[t]?i[t]:t},t.prototype.contentEl=function(){return this.contentEl_||this.el_},t.prototype.id=function(){return this.id_},t.prototype.name=function(){return this.name_},t.prototype.children=function(){return this.children_},t.prototype.getChildById=function(t){return this.childIndex_[t]},t.prototype.getChild=function(t){return this.childNameIndex_[t]},t.prototype.addChild=function(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],r=arguments.length<=2||void 0===arguments[2]?this.children_.length:arguments[2],o=void 0,i=void 0;if("string"==typeof e){i=e,n||(n={}),n===!0&&(v["default"].warn("Initializing a child component with `true` is deprecated. Children should be defined in an array when possible, but if necessary use an object instead of `true`."),n={});var s=n.componentClass||b["default"](i);n.name=i;var a=t.getComponent(s);if(!a)throw new Error("Component "+s+" does not exist");if("function"!=typeof a)return null;o=new a(this.player_||this,n)}else o=e;if(this.children_.splice(r,0,o),"function"==typeof o.id&&(this.childIndex_[o.id()]=o),i=i||o.name&&o.name(),i&&(this.childNameIndex_[i]=o),"function"==typeof o.el&&o.el()){var l=this.contentEl().children,u=l[r]||null;this.contentEl().insertBefore(o.el(),u)}return o},t.prototype.removeChild=function(t){if("string"==typeof t&&(t=this.getChild(t)),t&&this.children_){for(var e=!1,n=this.children_.length-1;n>=0;n--)if(this.children_[n]===t){e=!0,this.children_.splice(n,1);break}if(e){this.childIndex_[t.id()]=null,this.childNameIndex_[t.name()]=null;var r=t.el();r&&r.parentNode===this.contentEl()&&this.contentEl().removeChild(t.el())}}},t.prototype.initChildren=function(){var e=this,n=this.options_.children;n&&!function(){var r=e.options_,o=function(t){var n=t.name,o=t.opts;if(void 0!==r[n]&&(o=r[n]),o!==!1){o===!0&&(o={}),o.playerOptions=e.options_.playerOptions;var i=e.addChild(n,o);i&&(e[n]=i)}},i=void 0,s=t.getComponent("Tech");i=Array.isArray(n)?n:Object.keys(n),i.concat(Object.keys(e.options_).filter(function(t){return!i.some(function(e){return"string"==typeof e?t===e:t===e.name})})).map(function(t){var r=void 0,o=void 0;return"string"==typeof t?(r=t,o=n[r]||e.options_[r]||{}):(r=t.name,o=t),{name:r,opts:o}}).filter(function(e){var n=t.getComponent(e.opts.componentClass||b["default"](e.name));return n&&!s.isTech(n)}).forEach(o)}()},t.prototype.buildCSSClass=function(){return""},t.prototype.on=function(t,e,n){var r=this;return"string"==typeof t||Array.isArray(t)?y.on(this.el_,t,p.bind(this,e)):!function(){var o=t,i=e,s=p.bind(r,n),a=function(){return r.off(o,i,s)};a.guid=s.guid,r.on("dispose",a);var l=function(){return r.off("dispose",a)};l.guid=s.guid,t.nodeName?(y.on(o,i,s),y.on(o,"dispose",l)):"function"==typeof t.on&&(o.on(i,s),o.on("dispose",l))}(),this},t.prototype.off=function(t,e,n){if(!t||"string"==typeof t||Array.isArray(t))y.off(this.el_,t,e);else{var r=t,o=e,i=p.bind(this,n);this.off("dispose",i),t.nodeName?(y.off(r,o,i),y.off(r,"dispose",i)):(r.off(o,i),r.off("dispose",i))}return this},t.prototype.one=function(t,e,n){var r=this,o=arguments;return"string"==typeof t||Array.isArray(t)?y.one(this.el_,t,p.bind(this,e)):!function(){var i=t,s=e,a=p.bind(r,n),l=function u(){r.off(i,s,u),a.apply(null,o)};l.guid=a.guid,r.on(i,s,l)}(),this},t.prototype.trigger=function(t,e){return y.trigger(this.el_,t,e),this},t.prototype.ready=function(t){var e=arguments.length<=1||void 0===arguments[1]?!1:arguments[1];return t&&(this.isReady_?e?t.call(this):this.setTimeout(t,1):(this.readyQueue_=this.readyQueue_||[],this.readyQueue_.push(t))),this},t.prototype.triggerReady=function(){this.isReady_=!0,this.setTimeout(function(){var t=this.readyQueue_;this.readyQueue_=[],t&&t.length>0&&t.forEach(function(t){t.call(this)},this),this.trigger("ready")},1)},t.prototype.$=function(t,e){return u.$(t,e||this.contentEl())},t.prototype.$$=function(t,e){return u.$$(t,e||this.contentEl())},t.prototype.hasClass=function(t){return u.hasElClass(this.el_,t)},t.prototype.addClass=function(t){return u.addElClass(this.el_,t),this},t.prototype.removeClass=function(t){return u.removeElClass(this.el_,t),this},t.prototype.toggleClass=function(t,e){return u.toggleElClass(this.el_,t,e),this},t.prototype.show=function(){return this.removeClass("vjs-hidden"),this},t.prototype.hide=function(){return this.addClass("vjs-hidden"),this},t.prototype.lockShowing=function(){return this.addClass("vjs-lock-showing"),this},t.prototype.unlockShowing=function(){return this.removeClass("vjs-lock-showing"),this},t.prototype.width=function(t,e){return this.dimension("width",t,e)},t.prototype.height=function(t,e){return this.dimension("height",t,e)},t.prototype.dimensions=function(t,e){return this.width(t,!0).height(e)},t.prototype.dimension=function(t,e,n){if(void 0!==e)return(null===e||e!==e)&&(e=0),this.el_.style[t]=-1!==(""+e).indexOf("%")||-1!==(""+e).indexOf("px")?e:"auto"===e?"":e+"px",n||this.trigger("resize"),this;if(!this.el_)return 0;var r=this.el_.style[t],o=r.indexOf("px");return-1!==o?parseInt(r.slice(0,o),10):parseInt(this.el_["offset"+b["default"](t)],10)},t.prototype.currentDimension=function(t){var e=0;if("width"!==t&&"height"!==t)throw new Error("currentDimension only accepts width or height value");if("function"==typeof a["default"].getComputedStyle){var n=a["default"].getComputedStyle(this.el_);e=n.getPropertyValue(t)||n[t]}else if(this.el_.currentStyle){var r="offset"+b["default"](t);e=this.el_[r]}return e=parseFloat(e)},t.prototype.currentDimensions=function(){return{width:this.currentDimension("width"),height:this.currentDimension("height")}},t.prototype.currentWidth=function(){return this.currentDimension("width")},t.prototype.currentHeight=function(){return this.currentDimension("height")},t.prototype.emitTapEvents=function(){var t=0,e=null,n=10,r=200,o=void 0;this.on("touchstart",function(n){1===n.touches.length&&(e={pageX:n.touches[0].pageX,pageY:n.touches[0].pageY},t=(new Date).getTime(),o=!0)}),this.on("touchmove",function(t){if(t.touches.length>1)o=!1;else if(e){var r=t.touches[0].pageX-e.pageX,i=t.touches[0].pageY-e.pageY,s=Math.sqrt(r*r+i*i);s>n&&(o=!1)}});var i=function(){o=!1};this.on("touchleave",i),this.on("touchcancel",i),this.on("touchend",function(n){if(e=null,o===!0){var i=(new Date).getTime()-t;r>i&&(n.preventDefault(),this.trigger("tap"))}})},t.prototype.enableTouchActivity=function(){if(this.player()&&this.player().reportUserActivity){var t=p.bind(this.player(),this.player().reportUserActivity),e=void 0;this.on("touchstart",function(){t(),this.clearInterval(e),e=this.setInterval(t,250)});var n=function(){t(),this.clearInterval(e)};this.on("touchmove",t),this.on("touchend",n),this.on("touchcancel",n)}},t.prototype.setTimeout=function(t,e){t=p.bind(this,t);var n=a["default"].setTimeout(t,e),r=function(){this.clearTimeout(n)};return r.guid="vjs-timeout-"+n,this.on("dispose",r),n},t.prototype.clearTimeout=function(t){a["default"].clearTimeout(t);var e=function(){};return e.guid="vjs-timeout-"+t,this.off("dispose",e),t},t.prototype.setInterval=function(t,e){t=p.bind(this,t);var n=a["default"].setInterval(t,e),r=function(){this.clearInterval(n)};return r.guid="vjs-interval-"+n,this.on("dispose",r),n},t.prototype.clearInterval=function(t){a["default"].clearInterval(t);var e=function(){};return e.guid="vjs-interval-"+t,this.off("dispose",e),t},t.registerComponent=function(e,n){return t.components_||(t.components_={}),t.components_[e]=n,n},t.getComponent=function(e){return t.components_&&t.components_[e]?t.components_[e]:a["default"]&&a["default"].videojs&&a["default"].videojs[e]?(v["default"].warn("The "+e+" component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)"),a["default"].videojs[e]):void 0},t.extend=function(e){e=e||{},v["default"].warn("Component.extend({}) has been deprecated, use videojs.extend(Component, {}) instead");var n=e.init||e.init||this.prototype.init||this.prototype.init||function(){},r=function(){n.apply(this,arguments)};r.prototype=Object.create(this.prototype),r.prototype.constructor=r,r.extend=t.extend;for(var o in e)e.hasOwnProperty(o)&&(r.prototype[o]=e[o]);return r},t}();T.registerComponent("Component",T),n["default"]=T,e.exports=n["default"]},{"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/guid.js":146,"./utils/log.js":147,"./utils/merge-options.js":148,"./utils/to-title-case.js":151,"global/window":2}],68:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../track-button.js"),l=o(a),u=t("../../component.js"),c=o(u),p=t("../../utils/fn.js"),f=(r(p),t("./audio-track-menu-item.js")),d=o(f),h=function(t){function e(n){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];i(this,e),r.tracks=n.audioTracks&&n.audioTracks(),t.call(this,n,r),this.el_.setAttribute("aria-label","Audio Menu")}return s(e,t),e.prototype.buildCSSClass=function(){return"vjs-audio-button "+t.prototype.buildCSSClass.call(this)},e.prototype.createItems=function(){var t=arguments.length<=0||void 0===arguments[0]?[]:arguments[0],e=this.player_.audioTracks&&this.player_.audioTracks();if(!e)return t;for(var n=0;n<e.length;n++){var r=e[n];t.push(new d["default"](this.player_,{selectable:!0,track:r}))}return t},e}(l["default"]);h.prototype.controlText_="Audio Track",c["default"].registerComponent("AudioTrackButton",h),n["default"]=h,e.exports=n["default"]},{"../../component.js":67,"../../utils/fn.js":144,"../track-button.js":98,"./audio-track-menu-item.js":69}],69:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../menu/menu-item.js"),l=o(a),u=t("../../component.js"),c=o(u),p=t("../../utils/fn.js"),f=r(p),d=function(t){function e(n,r){var o=this;i(this,e);var s=r.track,a=n.audioTracks();r.label=s.label||s.language||"Unknown",r.selected=s.enabled,t.call(this,n,r),this.track=s,a&&!function(){var t=f.bind(o,o.handleTracksChange);a.addEventListener("change",t),o.on("dispose",function(){a.removeEventListener("change",t)})}()}return s(e,t),e.prototype.handleClick=function(e){var n=this.player_.audioTracks();if(t.prototype.handleClick.call(this,e),n)for(var r=0;r<n.length;r++){var o=n[r];o.enabled=o===this.track}},e.prototype.handleTracksChange=function(){this.selected(this.track.enabled)},e}(l["default"]);c["default"].registerComponent("AudioTrackMenuItem",d),n["default"]=d,e.exports=n["default"]},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144}],70:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../component.js"),a=r(s),l=t("./play-toggle.js"),u=(r(l),t("./time-controls/current-time-display.js")),c=(r(u),t("./time-controls/duration-display.js")),p=(r(c),t("./time-controls/time-divider.js")),f=(r(p),t("./time-controls/remaining-time-display.js")),d=(r(f),t("./live-display.js")),h=(r(d),t("./progress-control/progress-control.js")),y=(r(h),t("./fullscreen-toggle.js")),g=(r(y),t("./volume-control/volume-control.js")),v=(r(g),t("./volume-menu-button.js")),m=(r(v),t("./mute-toggle.js")),b=(r(m),t("./text-track-controls/chapters-button.js")),_=(r(b),t("./text-track-controls/descriptions-button.js")),j=(r(_),t("./text-track-controls/subtitles-button.js")),T=(r(j),t("./text-track-controls/captions-button.js")),w=(r(T),t("./audio-track-controls/audio-track-button.js")),k=(r(w),t("./playback-rate-menu/playback-rate-menu-button.js")),E=(r(k),t("./spacer-controls/custom-control-spacer.js")),C=(r(E),function(t){function e(){o(this,e),t.apply(this,arguments)}return i(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-control-bar",dir:"ltr"},{role:"group"})},e}(a["default"]));C.prototype.options_={children:["playToggle","volumeMenuButton","currentTimeDisplay","timeDivider","durationDisplay","progressControl","liveDisplay","remainingTimeDisplay","customControlSpacer","playbackRateMenuButton","chaptersButton","descriptionsButton","subtitlesButton","captionsButton","audioTrackButton","fullscreenToggle"]},a["default"].registerComponent("ControlBar",C),n["default"]=C,e.exports=n["default"]},{"../component.js":67,"./audio-track-controls/audio-track-button.js":68,"./fullscreen-toggle.js":71,"./live-display.js":72,"./mute-toggle.js":73,"./play-toggle.js":74,"./playback-rate-menu/playback-rate-menu-button.js":75,"./progress-control/progress-control.js":80,"./spacer-controls/custom-control-spacer.js":83,"./text-track-controls/captions-button.js":86,"./text-track-controls/chapters-button.js":87,"./text-track-controls/descriptions-button.js":89,"./text-track-controls/subtitles-button.js":91,"./time-controls/current-time-display.js":94,"./time-controls/duration-display.js":95,"./time-controls/remaining-time-display.js":96,"./time-controls/time-divider.js":97,"./volume-control/volume-control.js":100,"./volume-menu-button.js":102}],71:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../button.js"),a=r(s),l=t("../component.js"),u=r(l),c=function(t){function e(n,r){o(this,e),t.call(this,n,r),this.on(n,"fullscreenchange",this.handleFullscreenChange)}return i(e,t),e.prototype.buildCSSClass=function(){return"vjs-fullscreen-control "+t.prototype.buildCSSClass.call(this)},e.prototype.handleFullscreenChange=function(){this.player_.isFullscreen()?this.controlText("Non-Fullscreen"):this.controlText("Fullscreen")},e.prototype.handleClick=function(){this.player_.isFullscreen()?this.player_.exitFullscreen():this.player_.requestFullscreen()},e}(a["default"]);c.prototype.controlText_="Fullscreen",u["default"].registerComponent("FullscreenToggle",c),n["default"]=c,e.exports=n["default"]},{"../button.js":64,"../component.js":67}],72:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../component"),l=o(a),u=t("../utils/dom.js"),c=r(u),p=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.updateShowing(),this.on(this.player(),"durationchange",this.updateShowing)}return s(e,t),e.prototype.createEl=function(){var e=t.prototype.createEl.call(this,"div",{className:"vjs-live-control vjs-control"});return this.contentEl_=c.createEl("div",{className:"vjs-live-display",innerHTML:'<span class="vjs-control-text">'+this.localize("Stream Type")+"</span>"+this.localize("LIVE")},{"aria-live":"off"}),e.appendChild(this.contentEl_),e},e.prototype.updateShowing=function(){1/0===this.player().duration()?this.show():this.hide()},e}(l["default"]);l["default"].registerComponent("LiveDisplay",p),n["default"]=p,e.exports=n["default"]},{"../component":67,"../utils/dom.js":142}],73:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../button"),l=o(a),u=t("../component"),c=o(u),p=t("../utils/dom.js"),f=r(p),d=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.on(n,"volumechange",this.update),n.tech_&&n.tech_.featuresVolumeControl===!1&&this.addClass("vjs-hidden"),this.on(n,"loadstart",function(){this.update(),n.tech_.featuresVolumeControl===!1?this.addClass("vjs-hidden"):this.removeClass("vjs-hidden")})}return s(e,t),e.prototype.buildCSSClass=function(){return"vjs-mute-control "+t.prototype.buildCSSClass.call(this)},e.prototype.handleClick=function(){this.player_.muted(this.player_.muted()?!1:!0)},e.prototype.update=function(){var t=this.player_.volume(),e=3;0===t||this.player_.muted()?e=0:.33>t?e=1:.67>t&&(e=2);var n=this.player_.muted()?"Unmute":"Mute";this.controlText()!==n&&this.controlText(n);for(var r=0;4>r;r++)f.removeElClass(this.el_,"vjs-vol-"+r);f.addElClass(this.el_,"vjs-vol-"+e)},e}(l["default"]);d.prototype.controlText_="Mute",c["default"].registerComponent("MuteToggle",d),n["default"]=d,e.exports=n["default"]},{"../button":64,"../component":67,"../utils/dom.js":142}],74:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../button.js"),a=r(s),l=t("../component.js"),u=r(l),c=function(t){function e(n,r){o(this,e),t.call(this,n,r),this.on(n,"play",this.handlePlay),this.on(n,"pause",this.handlePause)}return i(e,t),e.prototype.buildCSSClass=function(){return"vjs-play-control "+t.prototype.buildCSSClass.call(this)},e.prototype.handleClick=function(){this.player_.paused()?this.player_.play():this.player_.pause()},e.prototype.handlePlay=function(){this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.controlText("Pause")},e.prototype.handlePause=function(){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.controlText("Play")},e}(a["default"]);c.prototype.controlText_="Play",u["default"].registerComponent("PlayToggle",c),n["default"]=c,e.exports=n["default"]},{"../button.js":64,"../component.js":67}],75:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../menu/menu-button.js"),l=o(a),u=t("../../menu/menu.js"),c=o(u),p=t("./playback-rate-menu-item.js"),f=o(p),d=t("../../component.js"),h=o(d),y=t("../../utils/dom.js"),g=r(y),v=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.updateVisibility(),this.updateLabel(),this.on(n,"loadstart",this.updateVisibility),this.on(n,"ratechange",this.updateLabel)}return s(e,t),e.prototype.createEl=function(){var e=t.prototype.createEl.call(this);return this.labelEl_=g.createEl("div",{className:"vjs-playback-rate-value",innerHTML:1}),e.appendChild(this.labelEl_),e},e.prototype.buildCSSClass=function(){return"vjs-playback-rate "+t.prototype.buildCSSClass.call(this)},e.prototype.createMenu=function(){var t=new c["default"](this.player()),e=this.playbackRates();if(e)for(var n=e.length-1;n>=0;n--)t.addChild(new f["default"](this.player(),{rate:e[n]+"x"}));return t},e.prototype.updateARIAAttributes=function(){this.el().setAttribute("aria-valuenow",this.player().playbackRate())},e.prototype.handleClick=function(){for(var t=this.player().playbackRate(),e=this.playbackRates(),n=e[0],r=0;r<e.length;r++)if(e[r]>t){n=e[r];break}this.player().playbackRate(n)},e.prototype.playbackRates=function(){return this.options_.playbackRates||this.options_.playerOptions&&this.options_.playerOptions.playbackRates},e.prototype.playbackRateSupported=function(){return this.player().tech_&&this.player().tech_.featuresPlaybackRate&&this.playbackRates()&&this.playbackRates().length>0},e.prototype.updateVisibility=function(){this.playbackRateSupported()?this.removeClass("vjs-hidden"):this.addClass("vjs-hidden")},e.prototype.updateLabel=function(){this.playbackRateSupported()&&(this.labelEl_.innerHTML=this.player().playbackRate()+"x")},e}(l["default"]);v.prototype.controlText_="Playback Rate",h["default"].registerComponent("PlaybackRateMenuButton",v),n["default"]=v,e.exports=n["default"]},{"../../component.js":67,"../../menu/menu-button.js":109,"../../menu/menu.js":111,"../../utils/dom.js":142,"./playback-rate-menu-item.js":76}],76:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../../menu/menu-item.js"),a=r(s),l=t("../../component.js"),u=r(l),c=function(t){function e(n,r){o(this,e);var i=r.rate,s=parseFloat(i,10);r.label=i,r.selected=1===s,t.call(this,n,r),this.label=i,this.rate=s,this.on(n,"ratechange",this.update)}return i(e,t),e.prototype.handleClick=function(){t.prototype.handleClick.call(this),this.player().playbackRate(this.rate)},e.prototype.update=function(){this.selected(this.player().playbackRate()===this.rate)},e}(a["default"]);c.prototype.contentElType="button",u["default"].registerComponent("PlaybackRateMenuItem",c),n["default"]=c,e.exports=n["default"]},{"../../component.js":67,"../../menu/menu-item.js":110}],77:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../component.js"),l=o(a),u=t("../../utils/dom.js"),c=r(u),p=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.on(n,"progress",this.update)}return s(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-load-progress",innerHTML:'<span class="vjs-control-text"><span>'+this.localize("Loaded")+"</span>: 0%</span>"})},e.prototype.update=function(){var t=this.player_.buffered(),e=this.player_.duration(),n=this.player_.bufferedEnd(),r=this.el_.children,o=function(t,e){var n=t/e||0;return 100*(n>=1?1:n)+"%"};this.el_.style.width=o(n,e);for(var i=0;i<t.length;i++){var s=t.start(i),a=t.end(i),l=r[i];l||(l=this.el_.appendChild(c.createEl())),l.style.left=o(s,n),l.style.width=o(a-s,n)}for(var i=r.length;i>t.length;i--)this.el_.removeChild(r[i-1])},e}(l["default"]);l["default"].registerComponent("LoadProgressBar",p),n["default"]=p,e.exports=n["default"]},{"../../component.js":67,"../../utils/dom.js":142}],78:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("global/window"),l=o(a),u=t("../../component.js"),c=o(u),p=t("../../utils/dom.js"),f=r(p),d=t("../../utils/fn.js"),h=r(d),y=t("../../utils/format-time.js"),g=o(y),v=t("lodash-compat/function/throttle"),m=o(v),b=function(t){function e(n,r){var o=this;i(this,e),t.call(this,n,r),r.playerOptions&&r.playerOptions.controlBar&&r.playerOptions.controlBar.progressControl&&r.playerOptions.controlBar.progressControl.keepTooltipsInside&&(this.keepTooltipsInside=r.playerOptions.controlBar.progressControl.keepTooltipsInside),this.keepTooltipsInside&&(this.tooltip=f.createEl("div",{className:"vjs-time-tooltip"}),this.el().appendChild(this.tooltip),this.addClass("vjs-keep-tooltips-inside")),this.update(0,0),n.on("ready",function(){o.on(n.controlBar.progressControl.el(),"mousemove",m["default"](h.bind(o,o.handleMouseMove),25))})}return s(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-mouse-display"})},e.prototype.handleMouseMove=function(t){var e=this.player_.duration(),n=this.calculateDistance(t)*e,r=t.pageX-f.findElPosition(this.el().parentNode).left;this.update(n,r)},e.prototype.update=function(t,e){var n=g["default"](t,this.player_.duration());if(this.el().style.left=e+"px",this.el().setAttribute("data-current-time",n),this.keepTooltipsInside){var r=this.clampPosition_(e),o=e-r+1,i=parseFloat(l["default"].getComputedStyle(this.tooltip).width),s=i/2;this.tooltip.innerHTML=n,this.tooltip.style.right="-"+(s-o)+"px"}},e.prototype.calculateDistance=function(t){return f.getPointerPosition(this.el().parentNode,t).x},e.prototype.clampPosition_=function(t){if(!this.keepTooltipsInside)return t;var e=parseFloat(l["default"].getComputedStyle(this.player().el()).width),n=parseFloat(l["default"].getComputedStyle(this.tooltip).width),r=n/2,o=t;return r>t?o=Math.ceil(r):t>e-r&&(o=Math.floor(e-r)),o},e}(c["default"]);c["default"].registerComponent("MouseTimeDisplay",b),n["default"]=b,e.exports=n["default"]},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145,"global/window":2,"lodash-compat/function/throttle":7}],79:[function(t,e,n){"use strict";
function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../component.js"),l=o(a),u=t("../../utils/fn.js"),c=r(u),p=t("../../utils/dom.js"),f=(r(p),t("../../utils/format-time.js")),d=o(f),h=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.updateDataAttr(),this.on(n,"timeupdate",this.updateDataAttr),n.ready(c.bind(this,this.updateDataAttr)),r.playerOptions&&r.playerOptions.controlBar&&r.playerOptions.controlBar.progressControl&&r.playerOptions.controlBar.progressControl.keepTooltipsInside&&(this.keepTooltipsInside=r.playerOptions.controlBar.progressControl.keepTooltipsInside),this.keepTooltipsInside&&this.addClass("vjs-keep-tooltips-inside")}return s(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-play-progress vjs-slider-bar",innerHTML:'<span class="vjs-control-text"><span>'+this.localize("Progress")+"</span>: 0%</span>"})},e.prototype.updateDataAttr=function(){var t=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime();this.el_.setAttribute("data-current-time",d["default"](t,this.player_.duration()))},e}(l["default"]);l["default"].registerComponent("PlayProgressBar",h),n["default"]=h,e.exports=n["default"]},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145}],80:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../../component.js"),a=r(s),l=t("./seek-bar.js"),u=(r(l),t("./mouse-time-display.js")),c=(r(u),function(t){function e(){o(this,e),t.apply(this,arguments)}return i(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-progress-control vjs-control"})},e}(a["default"]));c.prototype.options_={children:["seekBar"]},a["default"].registerComponent("ProgressControl",c),n["default"]=c,e.exports=n["default"]},{"../../component.js":67,"./mouse-time-display.js":78,"./seek-bar.js":81}],81:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("global/window"),l=o(a),u=t("../../slider/slider.js"),c=o(u),p=t("../../component.js"),f=o(p),d=t("./load-progress-bar.js"),h=(o(d),t("./play-progress-bar.js")),y=(o(h),t("./tooltip-progress-bar.js")),g=(o(y),t("../../utils/fn.js")),v=r(g),m=t("../../utils/format-time.js"),b=o(m),_=t("object.assign"),j=(o(_),function(t){function e(n,r){i(this,e),t.call(this,n,r),this.on(n,"timeupdate",this.updateProgress),this.on(n,"ended",this.updateProgress),n.ready(v.bind(this,this.updateProgress)),r.playerOptions&&r.playerOptions.controlBar&&r.playerOptions.controlBar.progressControl&&r.playerOptions.controlBar.progressControl.keepTooltipsInside&&(this.keepTooltipsInside=r.playerOptions.controlBar.progressControl.keepTooltipsInside),this.keepTooltipsInside&&(this.tooltipProgressBar=this.addChild("TooltipProgressBar"))}return s(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-progress-holder"},{"aria-label":"progress bar"})},e.prototype.updateProgress=function(){if(this.updateAriaAttributes(this.el_),this.keepTooltipsInside){this.updateAriaAttributes(this.tooltipProgressBar.el_),this.tooltipProgressBar.el_.style.width=this.bar.el_.style.width;var t=parseFloat(l["default"].getComputedStyle(this.player().el()).width),e=parseFloat(l["default"].getComputedStyle(this.tooltipProgressBar.tooltip).width),n=this.tooltipProgressBar.el().style;n.maxWidth=Math.floor(t-e/2)+"px",n.minWidth=Math.ceil(e/2)+"px",n.right="-"+e/2+"px"}},e.prototype.updateAriaAttributes=function(t){var e=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime();t.setAttribute("aria-valuenow",(100*this.getPercent()).toFixed(2)),t.setAttribute("aria-valuetext",b["default"](e,this.player_.duration()))},e.prototype.getPercent=function(){var t=this.player_.currentTime()/this.player_.duration();return t>=1?1:t},e.prototype.handleMouseDown=function(e){t.prototype.handleMouseDown.call(this,e),this.player_.scrubbing(!0),this.videoWasPlaying=!this.player_.paused(),this.player_.pause()},e.prototype.handleMouseMove=function(t){var e=this.calculateDistance(t)*this.player_.duration();e===this.player_.duration()&&(e-=.1),this.player_.currentTime(e)},e.prototype.handleMouseUp=function(e){t.prototype.handleMouseUp.call(this,e),this.player_.scrubbing(!1),this.videoWasPlaying&&this.player_.play()},e.prototype.stepForward=function(){this.player_.currentTime(this.player_.currentTime()+5)},e.prototype.stepBack=function(){this.player_.currentTime(this.player_.currentTime()-5)},e}(c["default"]));j.prototype.options_={children:["loadProgressBar","mouseTimeDisplay","playProgressBar"],barName:"playProgressBar"},j.prototype.playerEvent="timeupdate",f["default"].registerComponent("SeekBar",j),n["default"]=j,e.exports=n["default"]},{"../../component.js":67,"../../slider/slider.js":119,"../../utils/fn.js":144,"../../utils/format-time.js":145,"./load-progress-bar.js":77,"./play-progress-bar.js":79,"./tooltip-progress-bar.js":82,"global/window":2,"object.assign":45}],82:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../component.js"),l=o(a),u=t("../../utils/fn.js"),c=r(u),p=t("../../utils/dom.js"),f=(r(p),t("../../utils/format-time.js")),d=o(f),h=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.updateDataAttr(),this.on(n,"timeupdate",this.updateDataAttr),n.ready(c.bind(this,this.updateDataAttr))}return s(e,t),e.prototype.createEl=function(){var e=t.prototype.createEl.call(this,"div",{className:"vjs-tooltip-progress-bar vjs-slider-bar",innerHTML:'<div class="vjs-time-tooltip"></div>\n        <span class="vjs-control-text"><span>'+this.localize("Progress")+"</span>: 0%</span>"});return this.tooltip=e.querySelector(".vjs-time-tooltip"),e},e.prototype.updateDataAttr=function(){var t=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime(),e=d["default"](t,this.player_.duration());this.el_.setAttribute("data-current-time",e),this.tooltip.innerHTML=e},e}(l["default"]);l["default"].registerComponent("TooltipProgressBar",h),n["default"]=h,e.exports=n["default"]},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145}],83:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("./spacer.js"),a=r(s),l=t("../../component.js"),u=r(l),c=function(t){function e(){o(this,e),t.apply(this,arguments)}return i(e,t),e.prototype.buildCSSClass=function(){return"vjs-custom-control-spacer "+t.prototype.buildCSSClass.call(this)},e.prototype.createEl=function(){var e=t.prototype.createEl.call(this,{className:this.buildCSSClass()});return e.innerHTML="&nbsp;",e},e}(a["default"]);u["default"].registerComponent("CustomControlSpacer",c),n["default"]=c,e.exports=n["default"]},{"../../component.js":67,"./spacer.js":84}],84:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../../component.js"),a=r(s),l=function(t){function e(){o(this,e),t.apply(this,arguments)}return i(e,t),e.prototype.buildCSSClass=function(){return"vjs-spacer "+t.prototype.buildCSSClass.call(this)},e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:this.buildCSSClass()})},e}(a["default"]);a["default"].registerComponent("Spacer",l),n["default"]=l,e.exports=n["default"]},{"../../component.js":67}],85:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("./text-track-menu-item.js"),a=r(s),l=t("../../component.js"),u=r(l),c=function(t){function e(n,r){o(this,e),r.track={kind:r.kind,player:n,label:r.kind+" settings",selectable:!1,"default":!1,mode:"disabled"},r.selectable=!1,t.call(this,n,r),this.addClass("vjs-texttrack-settings"),this.controlText(", opens "+r.kind+" settings dialog")}return i(e,t),e.prototype.handleClick=function(){this.player().getChild("textTrackSettings").show(),this.player().getChild("textTrackSettings").el_.focus()},e}(a["default"]);u["default"].registerComponent("CaptionSettingsMenuItem",c),n["default"]=c,e.exports=n["default"]},{"../../component.js":67,"./text-track-menu-item.js":93}],86:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("./text-track-button.js"),a=r(s),l=t("../../component.js"),u=r(l),c=t("./caption-settings-menu-item.js"),p=r(c),f=function(t){function e(n,r,i){o(this,e),t.call(this,n,r,i),this.el_.setAttribute("aria-label","Captions Menu")}return i(e,t),e.prototype.buildCSSClass=function(){return"vjs-captions-button "+t.prototype.buildCSSClass.call(this)},e.prototype.update=function(){var e=2;t.prototype.update.call(this),this.player().tech_&&this.player().tech_.featuresNativeTextTracks&&(e=1),this.items&&this.items.length>e?this.show():this.hide()},e.prototype.createItems=function(){var e=[];return this.player().tech_&&this.player().tech_.featuresNativeTextTracks||e.push(new p["default"](this.player_,{kind:this.kind_})),t.prototype.createItems.call(this,e)},e}(a["default"]);f.prototype.kind_="captions",f.prototype.controlText_="Captions",u["default"].registerComponent("CaptionsButton",f),n["default"]=f,e.exports=n["default"]},{"../../component.js":67,"./caption-settings-menu-item.js":85,"./text-track-button.js":92}],87:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./text-track-button.js"),l=o(a),u=t("../../component.js"),c=o(u),p=t("./text-track-menu-item.js"),f=o(p),d=t("./chapters-track-menu-item.js"),h=o(d),y=t("../../menu/menu.js"),g=o(y),v=t("../../utils/dom.js"),m=r(v),b=t("../../utils/fn.js"),_=(r(b),t("../../utils/to-title-case.js")),j=o(_),T=t("global/window"),w=(o(T),function(t){function e(n,r,o){i(this,e),t.call(this,n,r,o),this.el_.setAttribute("aria-label","Chapters Menu")}return s(e,t),e.prototype.buildCSSClass=function(){return"vjs-chapters-button "+t.prototype.buildCSSClass.call(this)},e.prototype.createItems=function(){var t=[],e=this.player_.textTracks();if(!e)return t;for(var n=0;n<e.length;n++){var r=e[n];r.kind===this.kind_&&t.push(new f["default"](this.player_,{track:r}))}return t},e.prototype.createMenu=function(){for(var t=this,e=this.player_.textTracks()||[],n=void 0,r=this.items||[],o=e.length-1;o>=0;o--){var i=e[o];if(i.kind===this.kind_){n=i;break}}var s=this.menu;if(void 0===s){s=new g["default"](this.player_);var a=m.createEl("li",{className:"vjs-menu-title",innerHTML:j["default"](this.kind_),tabIndex:-1});s.children_.unshift(a),m.insertElFirst(a,s.contentEl())}else r.forEach(function(t){return s.removeChild(t)}),r=[];if(n&&null==n.cues){n.mode="hidden";var l=this.player_.remoteTextTrackEls().getTrackElementByTrack_(n);l&&l.addEventListener("load",function(){return t.update()})}if(n&&n.cues&&n.cues.length>0)for(var u=n.cues,c=void 0,o=0,p=u.length;p>o;o++){c=u[o];var f=new h["default"](this.player_,{track:n,cue:c});r.push(f),s.addChild(f)}return r.length>0&&this.show(),this.items=r,s},e}(l["default"]));w.prototype.kind_="chapters",w.prototype.controlText_="Chapters",c["default"].registerComponent("ChaptersButton",w),n["default"]=w,e.exports=n["default"]},{"../../component.js":67,"../../menu/menu.js":111,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/to-title-case.js":151,"./chapters-track-menu-item.js":88,"./text-track-button.js":92,"./text-track-menu-item.js":93,"global/window":2}],88:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../menu/menu-item.js"),l=o(a),u=t("../../component.js"),c=o(u),p=t("../../utils/fn.js"),f=r(p),d=function(t){function e(n,r){i(this,e);var o=r.track,s=r.cue,a=n.currentTime();r.label=s.text,r.selected=s.startTime<=a&&a<s.endTime,t.call(this,n,r),this.track=o,this.cue=s,o.addEventListener("cuechange",f.bind(this,this.update))}return s(e,t),e.prototype.handleClick=function(){t.prototype.handleClick.call(this),this.player_.currentTime(this.cue.startTime),this.update(this.cue.startTime)},e.prototype.update=function(){var t=this.cue,e=this.player_.currentTime();this.selected(t.startTime<=e&&e<t.endTime)},e}(l["default"]);c["default"].registerComponent("ChaptersTrackMenuItem",d),n["default"]=d,e.exports=n["default"]},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144}],89:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./text-track-button.js"),l=o(a),u=t("../../component.js"),c=o(u),p=t("../../utils/fn.js"),f=r(p),d=function(t){function e(n,r,o){var s=this;i(this,e),t.call(this,n,r,o),this.el_.setAttribute("aria-label","Descriptions Menu");var a=n.textTracks();a&&!function(){var t=f.bind(s,s.handleTracksChange);a.addEventListener("change",t),s.on("dispose",function(){a.removeEventListener("change",t)})}()}return s(e,t),e.prototype.handleTracksChange=function(){for(var t=this.player().textTracks(),e=!1,n=0,r=t.length;r>n;n++){var o=t[n];if(o.kind!==this.kind_&&"showing"===o.mode){e=!0;break}}e?this.disable():this.enable()},e.prototype.buildCSSClass=function(){return"vjs-descriptions-button "+t.prototype.buildCSSClass.call(this)},e}(l["default"]);d.prototype.kind_="descriptions",d.prototype.controlText_="Descriptions",c["default"].registerComponent("DescriptionsButton",d),n["default"]=d,e.exports=n["default"]},{"../../component.js":67,"../../utils/fn.js":144,"./text-track-button.js":92}],90:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("./text-track-menu-item.js"),a=r(s),l=t("../../component.js"),u=r(l),c=function(t){function e(n,r){o(this,e),r.track={kind:r.kind,player:n,label:r.kind+" off","default":!1,mode:"disabled"},r.selectable=!0,t.call(this,n,r),this.selected(!0)}return i(e,t),e.prototype.handleTracksChange=function(){for(var t=this.player().textTracks(),e=!0,n=0,r=t.length;r>n;n++){var o=t[n];if(o.kind===this.track.kind&&"showing"===o.mode){e=!1;break}}this.selected(e)},e}(a["default"]);u["default"].registerComponent("OffTextTrackMenuItem",c),n["default"]=c,e.exports=n["default"]},{"../../component.js":67,"./text-track-menu-item.js":93}],91:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("./text-track-button.js"),a=r(s),l=t("../../component.js"),u=r(l),c=function(t){function e(n,r,i){o(this,e),t.call(this,n,r,i),this.el_.setAttribute("aria-label","Subtitles Menu")}return i(e,t),e.prototype.buildCSSClass=function(){return"vjs-subtitles-button "+t.prototype.buildCSSClass.call(this)},e}(a["default"]);c.prototype.kind_="subtitles",c.prototype.controlText_="Subtitles",u["default"].registerComponent("SubtitlesButton",c),n["default"]=c,e.exports=n["default"]},{"../../component.js":67,"./text-track-button.js":92}],92:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../track-button.js"),l=o(a),u=t("../../component.js"),c=o(u),p=t("../../utils/fn.js"),f=(r(p),t("./text-track-menu-item.js")),d=o(f),h=t("./off-text-track-menu-item.js"),y=o(h),g=function(t){function e(n){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];i(this,e),r.tracks=n.textTracks(),t.call(this,n,r)}return s(e,t),e.prototype.createItems=function(){var t=arguments.length<=0||void 0===arguments[0]?[]:arguments[0];t.push(new y["default"](this.player_,{kind:this.kind_}));var e=this.player_.textTracks();if(!e)return t;for(var n=0;n<e.length;n++){var r=e[n];r.kind===this.kind_&&t.push(new d["default"](this.player_,{selectable:!0,track:r}))}return t},e}(l["default"]);c["default"].registerComponent("TextTrackButton",g),n["default"]=g,e.exports=n["default"]},{"../../component.js":67,"../../utils/fn.js":144,"../track-button.js":98,"./off-text-track-menu-item.js":90,"./text-track-menu-item.js":93}],93:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../menu/menu-item.js"),l=o(a),u=t("../../component.js"),c=o(u),p=t("../../utils/fn.js"),f=r(p),d=t("global/window"),h=o(d),y=t("global/document"),g=o(y),v=function(t){function e(n,r){var o=this;i(this,e);var s=r.track,a=n.textTracks();r.label=s.label||s.language||"Unknown",r.selected=s["default"]||"showing"===s.mode,t.call(this,n,r),this.track=s,a&&!function(){var t=f.bind(o,o.handleTracksChange);a.addEventListener("change",t),o.on("dispose",function(){a.removeEventListener("change",t)})}(),a&&void 0===a.onchange&&!function(){var t=void 0;o.on(["tap","click"],function(){if("object"!=typeof h["default"].Event)try{t=new h["default"].Event("change")}catch(e){}t||(t=g["default"].createEvent("Event"),t.initEvent("change",!0,!0)),a.dispatchEvent(t)})}()}return s(e,t),e.prototype.handleClick=function(e){var n=this.track.kind,r=this.player_.textTracks();if(t.prototype.handleClick.call(this,e),r)for(var o=0;o<r.length;o++){var i=r[o];i.kind===n&&(i.mode=i===this.track?"showing":"disabled")}},e.prototype.handleTracksChange=function(){this.selected("showing"===this.track.mode)},e}(l["default"]);c["default"].registerComponent("TextTrackMenuItem",v),n["default"]=v,e.exports=n["default"]},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144,"global/document":1,"global/window":2}],94:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../component.js"),l=o(a),u=t("../../utils/dom.js"),c=r(u),p=t("../../utils/format-time.js"),f=o(p),d=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.on(n,"timeupdate",this.updateContent)}return s(e,t),e.prototype.createEl=function(){var e=t.prototype.createEl.call(this,"div",{className:"vjs-current-time vjs-time-control vjs-control"});return this.contentEl_=c.createEl("div",{className:"vjs-current-time-display",innerHTML:'<span class="vjs-control-text">Current Time </span>0:00'},{"aria-live":"off"}),e.appendChild(this.contentEl_),e},e.prototype.updateContent=function(){var t=this.player_.scrubbing()?this.player_.getCache().currentTime:this.player_.currentTime(),e=this.localize("Current Time"),n=f["default"](t,this.player_.duration());n!==this.formattedTime_&&(this.formattedTime_=n,this.contentEl_.innerHTML='<span class="vjs-control-text">'+e+"</span> "+n)},e}(l["default"]);l["default"].registerComponent("CurrentTimeDisplay",d),n["default"]=d,e.exports=n["default"]},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],95:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../component.js"),l=o(a),u=t("../../utils/dom.js"),c=r(u),p=t("../../utils/format-time.js"),f=o(p),d=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.on(n,"durationchange",this.updateContent),this.on(n,"timeupdate",this.updateContent),this.on(n,"loadedmetadata",this.updateContent)}return s(e,t),e.prototype.createEl=function(){var e=t.prototype.createEl.call(this,"div",{className:"vjs-duration vjs-time-control vjs-control"});return this.contentEl_=c.createEl("div",{className:"vjs-duration-display",innerHTML:'<span class="vjs-control-text">'+this.localize("Duration Time")+"</span> 0:00"},{"aria-live":"off"}),e.appendChild(this.contentEl_),e},e.prototype.updateContent=function(){var t=this.player_.duration();if(t&&this.duration_!==t){this.duration_=t;var e=this.localize("Duration Time"),n=f["default"](t);this.contentEl_.innerHTML='<span class="vjs-control-text">'+e+"</span> "+n}},e}(l["default"]);l["default"].registerComponent("DurationDisplay",d),n["default"]=d,e.exports=n["default"]},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],96:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../component.js"),l=o(a),u=t("../../utils/dom.js"),c=r(u),p=t("../../utils/format-time.js"),f=o(p),d=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.on(n,"timeupdate",this.updateContent),this.on(n,"durationchange",this.updateContent)}return s(e,t),e.prototype.createEl=function(){var e=t.prototype.createEl.call(this,"div",{className:"vjs-remaining-time vjs-time-control vjs-control"});return this.contentEl_=c.createEl("div",{className:"vjs-remaining-time-display",innerHTML:'<span class="vjs-control-text">'+this.localize("Remaining Time")+"</span> -0:00"},{"aria-live":"off"}),e.appendChild(this.contentEl_),e},e.prototype.updateContent=function(){if(this.player_.duration()){var t=this.localize("Remaining Time"),e=f["default"](this.player_.remainingTime());e!==this.formattedTime_&&(this.formattedTime_=e,this.contentEl_.innerHTML='<span class="vjs-control-text">'+t+"</span> -"+e)}},e}(l["default"]);l["default"].registerComponent("RemainingTimeDisplay",d),n["default"]=d,e.exports=n["default"]},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],97:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../../component.js"),a=r(s),l=function(t){function e(){o(this,e),t.apply(this,arguments)}return i(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-time-control vjs-time-divider",innerHTML:"<div><span>/</span></div>"})},e}(a["default"]);a["default"].registerComponent("TimeDivider",l),n["default"]=l,e.exports=n["default"]},{"../../component.js":67}],98:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../menu/menu-button.js"),l=o(a),u=t("../component.js"),c=o(u),p=t("../utils/fn.js"),f=r(p),d=function(t){function e(n,r){i(this,e);var o=r.tracks;if(t.call(this,n,r),this.items.length<=1&&this.hide(),o){var s=f.bind(this,this.update);o.addEventListener("removetrack",s),o.addEventListener("addtrack",s),this.player_.on("dispose",function(){o.removeEventListener("removetrack",s),o.removeEventListener("addtrack",s)
})}}return s(e,t),e}(l["default"]);c["default"].registerComponent("TrackButton",d),n["default"]=d,e.exports=n["default"]},{"../component.js":67,"../menu/menu-button.js":109,"../utils/fn.js":144}],99:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../../slider/slider.js"),l=o(a),u=t("../../component.js"),c=o(u),p=t("../../utils/fn.js"),f=r(p),d=t("./volume-level.js"),h=(o(d),function(t){function e(n,r){i(this,e),t.call(this,n,r),this.on(n,"volumechange",this.updateARIAAttributes),n.ready(f.bind(this,this.updateARIAAttributes))}return s(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-volume-bar vjs-slider-bar"},{"aria-label":"volume level"})},e.prototype.handleMouseMove=function(t){this.checkMuted(),this.player_.volume(this.calculateDistance(t))},e.prototype.checkMuted=function(){this.player_.muted()&&this.player_.muted(!1)},e.prototype.getPercent=function(){return this.player_.muted()?0:this.player_.volume()},e.prototype.stepForward=function(){this.checkMuted(),this.player_.volume(this.player_.volume()+.1)},e.prototype.stepBack=function(){this.checkMuted(),this.player_.volume(this.player_.volume()-.1)},e.prototype.updateARIAAttributes=function(){var t=(100*this.player_.volume()).toFixed(2);this.el_.setAttribute("aria-valuenow",t),this.el_.setAttribute("aria-valuetext",t+"%")},e}(l["default"]));h.prototype.options_={children:["volumeLevel"],barName:"volumeLevel"},h.prototype.playerEvent="volumechange",c["default"].registerComponent("VolumeBar",h),n["default"]=h,e.exports=n["default"]},{"../../component.js":67,"../../slider/slider.js":119,"../../utils/fn.js":144,"./volume-level.js":101}],100:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../../component.js"),a=r(s),l=t("./volume-bar.js"),u=(r(l),function(t){function e(n,r){o(this,e),t.call(this,n,r),n.tech_&&n.tech_.featuresVolumeControl===!1&&this.addClass("vjs-hidden"),this.on(n,"loadstart",function(){n.tech_.featuresVolumeControl===!1?this.addClass("vjs-hidden"):this.removeClass("vjs-hidden")})}return i(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-volume-control vjs-control"})},e}(a["default"]));u.prototype.options_={children:["volumeBar"]},a["default"].registerComponent("VolumeControl",u),n["default"]=u,e.exports=n["default"]},{"../../component.js":67,"./volume-bar.js":99}],101:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../../component.js"),a=r(s),l=function(t){function e(){o(this,e),t.apply(this,arguments)}return i(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-volume-level",innerHTML:'<span class="vjs-control-text"></span>'})},e}(a["default"]);a["default"].registerComponent("VolumeLevel",l),n["default"]=l,e.exports=n["default"]},{"../../component.js":67}],102:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../utils/fn.js"),l=o(a),u=t("../component.js"),c=r(u),p=t("../popup/popup.js"),f=r(p),d=t("../popup/popup-button.js"),h=r(d),y=t("./mute-toggle.js"),g=r(y),v=t("./volume-control/volume-bar.js"),m=r(v),b=function(t){function e(n){function r(){n.tech_&&n.tech_.featuresVolumeControl===!1?this.addClass("vjs-hidden"):this.removeClass("vjs-hidden")}var o=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];i(this,e),void 0===o.inline&&(o.inline=!0),void 0===o.vertical&&(o.vertical=o.inline?!1:!0),o.volumeBar=o.volumeBar||{},o.volumeBar.vertical=!!o.vertical,t.call(this,n,o),this.on(n,"volumechange",this.volumeUpdate),this.on(n,"loadstart",this.volumeUpdate),r.call(this),this.on(n,"loadstart",r),this.on(this.volumeBar,["slideractive","focus"],function(){this.addClass("vjs-slider-active")}),this.on(this.volumeBar,["sliderinactive","blur"],function(){this.removeClass("vjs-slider-active")}),this.on(this.volumeBar,["focus"],function(){this.addClass("vjs-lock-showing")}),this.on(this.volumeBar,["blur"],function(){this.removeClass("vjs-lock-showing")})}return s(e,t),e.prototype.buildCSSClass=function(){var e="";return e=this.options_.vertical?"vjs-volume-menu-button-vertical":"vjs-volume-menu-button-horizontal","vjs-volume-menu-button "+t.prototype.buildCSSClass.call(this)+" "+e},e.prototype.createPopup=function(){var t=new f["default"](this.player_,{contentElType:"div"}),e=new m["default"](this.player_,this.options_.volumeBar);return t.addChild(e),this.menuContent=t,this.volumeBar=e,this.attachVolumeBarEvents(),t},e.prototype.handleClick=function(){g["default"].prototype.handleClick.call(this),t.prototype.handleClick.call(this)},e.prototype.attachVolumeBarEvents=function(){this.menuContent.on(["mousedown","touchdown"],l.bind(this,this.handleMouseDown))},e.prototype.handleMouseDown=function(){this.on(["mousemove","touchmove"],l.bind(this.volumeBar,this.volumeBar.handleMouseMove)),this.on(this.el_.ownerDocument,["mouseup","touchend"],this.handleMouseUp)},e.prototype.handleMouseUp=function(){this.off(["mousemove","touchmove"],l.bind(this.volumeBar,this.volumeBar.handleMouseMove))},e}(h["default"]);b.prototype.volumeUpdate=g["default"].prototype.update,b.prototype.controlText_="Mute",c["default"].registerComponent("VolumeMenuButton",b),n["default"]=b,e.exports=n["default"]},{"../component.js":67,"../popup/popup-button.js":115,"../popup/popup.js":116,"../utils/fn.js":144,"./mute-toggle.js":73,"./volume-control/volume-bar.js":99}],103:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./component"),l=o(a),u=t("./modal-dialog"),c=o(u),p=t("./utils/dom"),f=(r(p),t("./utils/merge-options")),d=o(f),h=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.on(n,"error",this.open)}return s(e,t),e.prototype.buildCSSClass=function(){return"vjs-error-display "+t.prototype.buildCSSClass.call(this)},e.prototype.content=function(){var t=this.player().error();return t?this.localize(t.message):""},e}(c["default"]);h.prototype.options_=d["default"](c["default"].prototype.options_,{fillAlways:!0,temporary:!1,uncloseable:!0}),l["default"].registerComponent("ErrorDisplay",h),n["default"]=h,e.exports=n["default"]},{"./component":67,"./modal-dialog":112,"./utils/dom":142,"./utils/merge-options":148}],104:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}n.__esModule=!0;var o=t("./utils/events.js"),i=r(o),s=function(){};s.prototype.allowedEvents_={},s.prototype.on=function(t,e){var n=this.addEventListener;this.addEventListener=function(){},i.on(this,t,e),this.addEventListener=n},s.prototype.addEventListener=s.prototype.on,s.prototype.off=function(t,e){i.off(this,t,e)},s.prototype.removeEventListener=s.prototype.off,s.prototype.one=function(t,e){var n=this.addEventListener;this.addEventListener=function(){},i.one(this,t,e),this.addEventListener=n},s.prototype.trigger=function(t){var e=t.type||t;"string"==typeof t&&(t={type:e}),t=i.fixEvent(t),this.allowedEvents_[e]&&this["on"+e]&&this["on"+e](t),i.trigger(this,t)},s.prototype.dispatchEvent=s.prototype.trigger,n["default"]=s,e.exports=n["default"]},{"./utils/events.js":143}],105:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}n.__esModule=!0;var o=t("./utils/log"),i=r(o),s=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(t.super_=e)},a=function(t){var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],n=function(){t.apply(this,arguments)},r={};"object"==typeof e?("function"==typeof e.init&&(i["default"].warn("Constructor logic via init() is deprecated; please use constructor() instead."),e.constructor=e.init),e.constructor!==Object.prototype.constructor&&(n=e.constructor),r=e):"function"==typeof e&&(n=e),s(n,t);for(var o in r)r.hasOwnProperty(o)&&(n.prototype[o]=r[o]);return n};n["default"]=a,e.exports=n["default"]},{"./utils/log":147}],106:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}n.__esModule=!0;for(var o=t("global/document"),i=r(o),s={},a=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],l=a[0],u=void 0,c=0;c<a.length;c++)if(a[c][1]in i["default"]){u=a[c];break}if(u)for(var c=0;c<u.length;c++)s[l[c]]=u[c];n["default"]=s,e.exports=n["default"]},{"global/document":1}],107:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("./component"),a=r(s),l=function(t){function e(){o(this,e),t.apply(this,arguments)}return i(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-loading-spinner",dir:"ltr"})},e}(a["default"]);a["default"].registerComponent("LoadingSpinner",l),n["default"]=l,e.exports=n["default"]},{"./component":67}],108:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){return t instanceof o?t:("number"==typeof t?this.code=t:"string"==typeof t?this.message=t:"object"==typeof t&&("number"==typeof t.code&&(this.code=t.code),s["default"](this,t)),this.message||(this.message=o.defaultMessages[this.code]||""),void 0)}n.__esModule=!0;var i=t("object.assign"),s=r(i);o.prototype.code=0,o.prototype.message="",o.prototype.status=null,o.errorTypes=["MEDIA_ERR_CUSTOM","MEDIA_ERR_ABORTED","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","MEDIA_ERR_SRC_NOT_SUPPORTED","MEDIA_ERR_ENCRYPTED"],o.defaultMessages={1:"You aborted the media playback",2:"A network error caused the media download to fail part-way.",3:"The media playback was aborted due to a corruption problem or because the media used features your browser did not support.",4:"The media could not be loaded, either because the server or network failed or because the format is not supported.",5:"The media is encrypted and we do not have the keys to decrypt it."};for(var a=0;a<o.errorTypes.length;a++)o[o.errorTypes[a]]=a,o.prototype[o.errorTypes[a]]=a;n["default"]=o,e.exports=n["default"]},{"object.assign":45}],109:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../clickable-component.js"),l=o(a),u=t("../component.js"),c=o(u),p=t("./menu.js"),f=o(p),d=t("../utils/dom.js"),h=r(d),y=t("../utils/fn.js"),g=r(y),v=t("../utils/to-title-case.js"),m=o(v),b=function(t){function e(n){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];i(this,e),t.call(this,n,r),this.update(),this.enabled_=!0,this.el_.setAttribute("aria-haspopup","true"),this.el_.setAttribute("role","menuitem"),this.on("keydown",this.handleSubmenuKeyPress)}return s(e,t),e.prototype.update=function(){var t=this.createMenu();this.menu&&this.removeChild(this.menu),this.menu=t,this.addChild(t),this.buttonPressed_=!1,this.el_.setAttribute("aria-expanded","false"),this.items&&0===this.items.length?this.hide():this.items&&this.items.length>1&&this.show()},e.prototype.createMenu=function(){var t=new f["default"](this.player_);if(this.options_.title){var e=h.createEl("li",{className:"vjs-menu-title",innerHTML:m["default"](this.options_.title),tabIndex:-1});t.children_.unshift(e),h.insertElFirst(e,t.contentEl())}if(this.items=this.createItems(),this.items)for(var n=0;n<this.items.length;n++)t.addItem(this.items[n]);return t},e.prototype.createItems=function(){},e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:this.buildCSSClass()})},e.prototype.buildCSSClass=function(){var e="vjs-menu-button";return e+=this.options_.inline===!0?"-inline":"-popup","vjs-menu-button "+e+" "+t.prototype.buildCSSClass.call(this)},e.prototype.handleClick=function(){this.one(this.menu.contentEl(),"mouseleave",g.bind(this,function(){this.unpressButton(),this.el_.blur()})),this.buttonPressed_?this.unpressButton():this.pressButton()},e.prototype.handleKeyPress=function(e){27===e.which||9===e.which?(this.buttonPressed_&&this.unpressButton(),9!==e.which&&e.preventDefault()):38===e.which||40===e.which?this.buttonPressed_||(this.pressButton(),e.preventDefault()):t.prototype.handleKeyPress.call(this,e)},e.prototype.handleSubmenuKeyPress=function(t){(27===t.which||9===t.which)&&(this.buttonPressed_&&this.unpressButton(),9!==t.which&&t.preventDefault())},e.prototype.pressButton=function(){this.enabled_&&(this.buttonPressed_=!0,this.menu.lockShowing(),this.el_.setAttribute("aria-expanded","true"),this.menu.focus())},e.prototype.unpressButton=function(){this.enabled_&&(this.buttonPressed_=!1,this.menu.unlockShowing(),this.el_.setAttribute("aria-expanded","false"),this.el_.focus())},e.prototype.disable=function(){return this.buttonPressed_=!1,this.menu.unlockShowing(),this.el_.setAttribute("aria-expanded","false"),this.enabled_=!1,t.prototype.disable.call(this)},e.prototype.enable=function(){return this.enabled_=!0,t.prototype.enable.call(this)},e}(l["default"]);c["default"].registerComponent("MenuButton",b),n["default"]=b,e.exports=n["default"]},{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/to-title-case.js":151,"./menu.js":111}],110:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../clickable-component.js"),a=r(s),l=t("../component.js"),u=r(l),c=t("object.assign"),p=r(c),f=function(t){function e(n,r){o(this,e),t.call(this,n,r),this.selectable=r.selectable,this.selected(r.selected),this.selectable?this.el_.setAttribute("role","menuitemcheckbox"):this.el_.setAttribute("role","menuitem")}return i(e,t),e.prototype.createEl=function(e,n,r){return t.prototype.createEl.call(this,"li",p["default"]({className:"vjs-menu-item",innerHTML:this.localize(this.options_.label),tabIndex:-1},n),r)},e.prototype.handleClick=function(){this.selected(!0)},e.prototype.selected=function(t){this.selectable&&(t?(this.addClass("vjs-selected"),this.el_.setAttribute("aria-checked","true"),this.controlText(", selected")):(this.removeClass("vjs-selected"),this.el_.setAttribute("aria-checked","false"),this.controlText(" ")))},e}(a["default"]);u["default"].registerComponent("MenuItem",f),n["default"]=f,e.exports=n["default"]},{"../clickable-component.js":65,"../component.js":67,"object.assign":45}],111:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../component.js"),l=o(a),u=t("../utils/dom.js"),c=r(u),p=t("../utils/fn.js"),f=r(p),d=t("../utils/events.js"),h=r(d),y=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.focusedChild_=-1,this.on("keydown",this.handleKeyPress)}return s(e,t),e.prototype.addItem=function(t){this.addChild(t),t.on("click",f.bind(this,function(){this.unlockShowing()}))},e.prototype.createEl=function(){var e=this.options_.contentElType||"ul";this.contentEl_=c.createEl(e,{className:"vjs-menu-content"}),this.contentEl_.setAttribute("role","menu");var n=t.prototype.createEl.call(this,"div",{append:this.contentEl_,className:"vjs-menu"});return n.setAttribute("role","presentation"),n.appendChild(this.contentEl_),h.on(n,"click",function(t){t.preventDefault(),t.stopImmediatePropagation()}),n},e.prototype.handleKeyPress=function(t){37===t.which||40===t.which?(t.preventDefault(),this.stepForward()):(38===t.which||39===t.which)&&(t.preventDefault(),this.stepBack())},e.prototype.stepForward=function(){var t=0;void 0!==this.focusedChild_&&(t=this.focusedChild_+1),this.focus(t)},e.prototype.stepBack=function(){var t=0;void 0!==this.focusedChild_&&(t=this.focusedChild_-1),this.focus(t)},e.prototype.focus=function(){var t=arguments.length<=0||void 0===arguments[0]?0:arguments[0],e=this.children().slice(),n=e.length&&e[0].className&&/vjs-menu-title/.test(e[0].className);n&&e.shift(),e.length>0&&(0>t?t=0:t>=e.length&&(t=e.length-1),this.focusedChild_=t,e[t].el_.focus())},e}(l["default"]);l["default"].registerComponent("Menu",y),n["default"]=y,e.exports=n["default"]},{"../component.js":67,"../utils/dom.js":142,"../utils/events.js":143,"../utils/fn.js":144}],112:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./utils/dom"),l=o(a),u=t("./utils/fn"),c=o(u),p=t("./utils/log"),f=(r(p),t("./component")),d=r(f),h=t("./close-button"),y=(r(h),"vjs-modal-dialog"),g=27,v=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.opened_=this.hasBeenOpened_=this.hasBeenFilled_=!1,this.closeable(!this.options_.uncloseable),this.content(this.options_.content),this.contentEl_=l.createEl("div",{className:y+"-content"},{role:"document"}),this.descEl_=l.createEl("p",{className:y+"-description vjs-offscreen",id:this.el().getAttribute("aria-describedby")}),l.textContent(this.descEl_,this.description()),this.el_.appendChild(this.descEl_),this.el_.appendChild(this.contentEl_)}return s(e,t),e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:this.buildCSSClass(),tabIndex:-1},{"aria-describedby":this.id()+"_description","aria-hidden":"true","aria-label":this.label(),role:"dialog"})},e.prototype.buildCSSClass=function(){return y+" vjs-hidden "+t.prototype.buildCSSClass.call(this)},e.prototype.handleKeyPress=function(t){t.which===g&&this.closeable()&&this.close()},e.prototype.label=function(){return this.options_.label||this.localize("Modal Window")},e.prototype.description=function(){var t=this.options_.description||this.localize("This is a modal window.");return this.closeable()&&(t+=" "+this.localize("This modal can be closed by pressing the Escape key or activating the close button.")),t},e.prototype.open=function(){if(!this.opened_){var t=this.player();this.trigger("beforemodalopen"),this.opened_=!0,(this.options_.fillAlways||!this.hasBeenOpened_&&!this.hasBeenFilled_)&&this.fill(),this.wasPlaying_=!t.paused(),this.wasPlaying_&&t.pause(),this.closeable()&&this.on(this.el_.ownerDocument,"keydown",c.bind(this,this.handleKeyPress)),t.controls(!1),this.show(),this.el().setAttribute("aria-hidden","false"),this.trigger("modalopen"),this.hasBeenOpened_=!0}return this},e.prototype.opened=function(t){return"boolean"==typeof t&&this[t?"open":"close"](),this.opened_},e.prototype.close=function(){if(this.opened_){var t=this.player();this.trigger("beforemodalclose"),this.opened_=!1,this.wasPlaying_&&t.play(),this.closeable()&&this.off(this.el_.ownerDocument,"keydown",c.bind(this,this.handleKeyPress)),t.controls(!0),this.hide(),this.el().setAttribute("aria-hidden","true"),this.trigger("modalclose"),this.options_.temporary&&this.dispose()}return this},e.prototype.closeable=function n(t){if("boolean"==typeof t){var n=this.closeable_=!!t,e=this.getChild("closeButton");if(n&&!e){var r=this.contentEl_;this.contentEl_=this.el_,e=this.addChild("closeButton",{controlText:"Close Modal Dialog"}),this.contentEl_=r,this.on(e,"close",this.close)}!n&&e&&(this.off(e,"close",this.close),this.removeChild(e),e.dispose())}return this.closeable_},e.prototype.fill=function(){return this.fillWith(this.content())},e.prototype.fillWith=function(t){var e=this.contentEl(),n=e.parentNode,r=e.nextSibling;return this.trigger("beforemodalfill"),this.hasBeenFilled_=!0,n.removeChild(e),this.empty(),l.insertContent(e,t),this.trigger("modalfill"),r?n.insertBefore(e,r):n.appendChild(e),this},e.prototype.empty=function(){return this.trigger("beforemodalempty"),l.emptyEl(this.contentEl()),this.trigger("modalempty"),this},e.prototype.content=function(t){return"undefined"!=typeof t&&(this.content_=t),this.content_},e}(d["default"]);v.prototype.options_={temporary:!0},d["default"].registerComponent("ModalDialog",v),n["default"]=v,e.exports=n["default"]},{"./close-button":66,"./component":67,"./utils/dom":142,"./utils/fn":144,"./utils/log":147}],113:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./component.js"),l=o(a),u=t("global/document"),c=o(u),p=t("global/window"),f=o(p),d=t("./utils/events.js"),h=r(d),y=t("./utils/dom.js"),g=r(y),v=t("./utils/fn.js"),m=r(v),b=t("./utils/guid.js"),_=r(b),j=t("./utils/browser.js"),T=r(j),w=t("./utils/log.js"),k=o(w),E=t("./utils/to-title-case.js"),C=o(E),O=t("./utils/time-ranges.js"),x=t("./utils/buffer.js"),S=t("./utils/stylesheet.js"),P=r(S),M=t("./fullscreen-api.js"),A=o(M),R=t("./media-error.js"),I=o(R),V=t("safe-json-parse/tuple"),L=o(V),N=t("object.assign"),D=o(N),F=t("./utils/merge-options.js"),B=o(F),H=t("./tracks/text-track-list-converter.js"),U=o(H),$=t("./tracks/audio-track-list.js"),W=o($),q=t("./tracks/video-track-list.js"),z=o(q),G=t("./tech/loader.js"),X=(o(G),t("./poster-image.js")),K=(o(X),t("./tracks/text-track-display.js")),Y=(o(K),t("./loading-spinner.js")),J=(o(Y),t("./big-play-button.js")),Q=(o(J),t("./control-bar/control-bar.js")),Z=(o(Q),t("./error-display.js")),te=(o(Z),t("./tracks/text-track-settings.js")),ee=(o(te),t("./modal-dialog")),ne=o(ee),re=t("./tech/tech.js"),oe=o(re),ie=t("./tech/html5.js"),se=(o(ie),function(t){function e(n,r,o){var s=this;if(i(this,e),n.id=n.id||"vjs_video_"+_.newGUID(),r=D["default"](e.getTagSettings(n),r),r.initChildren=!1,r.createEl=!1,r.reportTouchActivity=!1,!r.language)if("function"==typeof n.closest){var a=n.closest("[lang]");a&&(r.language=a.getAttribute("lang"))}else for(var l=n;l&&1===l.nodeType;){if(g.getElAttributes(l).hasOwnProperty("lang")){r.language=l.getAttribute("lang");break}l=l.parentNode}if(t.call(this,null,r,o),!this.options_||!this.options_.techOrder||!this.options_.techOrder.length)throw new Error("No techOrder specified. Did you overwrite videojs.options instead of just changing the properties you want to override?");this.tag=n,this.tagAttributes=n&&g.getElAttributes(n),this.language(this.options_.language),r.languages?!function(){var t={};Object.getOwnPropertyNames(r.languages).forEach(function(e){t[e.toLowerCase()]=r.languages[e]}),s.languages_=t}():this.languages_=e.prototype.options_.languages,this.cache_={},this.poster_=r.poster||"",this.controls_=!!r.controls,n.controls=!1,this.scrubbing_=!1,this.el_=this.createEl();var u=B["default"](this.options_);r.plugins&&!function(){var t=r.plugins;Object.getOwnPropertyNames(t).forEach(function(e){"function"==typeof this[e]?this[e](t[e]):k["default"].error("Unable to find plugin:",e)},s)}(),this.options_.playerOptions=u,this.initChildren(),this.isAudio("audio"===n.nodeName.toLowerCase()),this.controls()?this.addClass("vjs-controls-enabled"):this.addClass("vjs-controls-disabled"),this.el_.setAttribute("role","region"),this.isAudio()?this.el_.setAttribute("aria-label","audio player"):this.el_.setAttribute("aria-label","video player"),this.isAudio()&&this.addClass("vjs-audio"),this.flexNotSupported_()&&this.addClass("vjs-no-flex"),T.IS_IOS||this.addClass("vjs-workinghover"),e.players[this.id_]=this,this.userActive(!0),this.reportUserActivity(),this.listenForUserActivity_(),this.on("fullscreenchange",this.handleFullscreenChange_),this.on("stageclick",this.handleStageClick_)}return s(e,t),e.prototype.dispose=function(){this.trigger("dispose"),this.off("dispose"),this.styleEl_&&this.styleEl_.parentNode&&this.styleEl_.parentNode.removeChild(this.styleEl_),e.players[this.id_]=null,this.tag&&this.tag.player&&(this.tag.player=null),this.el_&&this.el_.player&&(this.el_.player=null),this.tech_&&this.tech_.dispose(),t.prototype.dispose.call(this)},e.prototype.createEl=function(){var e=this.el_=t.prototype.createEl.call(this,"div"),n=this.tag;n.removeAttribute("width"),n.removeAttribute("height");var r=g.getElAttributes(n);if(Object.getOwnPropertyNames(r).forEach(function(t){"class"===t?e.className=r[t]:e.setAttribute(t,r[t])}),n.playerId=n.id,n.id+="_html5_api",n.className="vjs-tech",n.player=e.player=this,this.addClass("vjs-paused"),f["default"].VIDEOJS_NO_DYNAMIC_STYLE!==!0){this.styleEl_=P.createStyleElement("vjs-styles-dimensions");var o=g.$(".vjs-styles-defaults"),i=g.$("head");i.insertBefore(this.styleEl_,o?o.nextSibling:i.firstChild)}this.width(this.options_.width),this.height(this.options_.height),this.fluid(this.options_.fluid),this.aspectRatio(this.options_.aspectRatio);for(var s=n.getElementsByTagName("a"),a=0;a<s.length;a++){var l=s.item(a);g.addElClass(l,"vjs-hidden"),l.setAttribute("hidden","hidden")}return n.initNetworkState_=n.networkState,n.parentNode&&n.parentNode.insertBefore(e,n),g.insertElFirst(n,e),this.children_.unshift(n),this.el_=e,e},e.prototype.width=function(t){return this.dimension("width",t)},e.prototype.height=function(t){return this.dimension("height",t)},e.prototype.dimension=function(t,e){var n=t+"_";if(void 0===e)return this[n]||0;if(""===e)this[n]=void 0;else{var r=parseFloat(e);if(isNaN(r))return k["default"].error('Improper value "'+e+'" supplied for for '+t),this;this[n]=r}return this.updateStyleEl_(),this},e.prototype.fluid=function(t){return void 0===t?!!this.fluid_:(this.fluid_=!!t,t?this.addClass("vjs-fluid"):this.removeClass("vjs-fluid"),void 0)},e.prototype.aspectRatio=function(t){if(void 0===t)return this.aspectRatio_;if(!/^\d+\:\d+$/.test(t))throw new Error("Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.");this.aspectRatio_=t,this.fluid(!0),this.updateStyleEl_()},e.prototype.updateStyleEl_=function(){if(f["default"].VIDEOJS_NO_DYNAMIC_STYLE===!0){var t="number"==typeof this.width_?this.width_:this.options_.width,e="number"==typeof this.height_?this.height_:this.options_.height,n=this.tech_&&this.tech_.el();return n&&(t>=0&&(n.width=t),e>=0&&(n.height=e)),void 0}var r=void 0,o=void 0,i=void 0,s=void 0;i=void 0!==this.aspectRatio_&&"auto"!==this.aspectRatio_?this.aspectRatio_:this.videoWidth()?this.videoWidth()+":"+this.videoHeight():"16:9";
var a=i.split(":"),l=a[1]/a[0];r=void 0!==this.width_?this.width_:void 0!==this.height_?this.height_/l:this.videoWidth()||300,o=void 0!==this.height_?this.height_:r*l,s=/^[^a-zA-Z]/.test(this.id())?"dimensions-"+this.id():this.id()+"-dimensions",this.addClass(s),P.setTextContent(this.styleEl_,"\n      ."+s+" {\n        width: "+r+"px;\n        height: "+o+"px;\n      }\n\n      ."+s+".vjs-fluid {\n        padding-top: "+100*l+"%;\n      }\n    ")},e.prototype.loadTech_=function(t,e){this.tech_&&this.unloadTech_(),"Html5"!==t&&this.tag&&(oe["default"].getTech("Html5").disposeMediaElement(this.tag),this.tag.player=null,this.tag=null),this.techName_=t,this.isReady_=!1;var n=D["default"]({nativeControlsForTouch:this.options_.nativeControlsForTouch,source:e,playerId:this.id(),techId:this.id()+"_"+t+"_api",videoTracks:this.videoTracks_,textTracks:this.textTracks_,audioTracks:this.audioTracks_,autoplay:this.options_.autoplay,preload:this.options_.preload,loop:this.options_.loop,muted:this.options_.muted,poster:this.poster(),language:this.language(),"vtt.js":this.options_["vtt.js"]},this.options_[t.toLowerCase()]);this.tag&&(n.tag=this.tag),e&&(this.currentType_=e.type,e.src===this.cache_.src&&this.cache_.currentTime>0&&(n.startTime=this.cache_.currentTime),this.cache_.src=e.src);var r=oe["default"].getTech(t);r||(r=l["default"].getComponent(t)),this.tech_=new r(n),this.tech_.ready(m.bind(this,this.handleTechReady_),!0),U["default"].jsonToTextTracks(this.textTracksJson_||[],this.tech_),this.on(this.tech_,"loadstart",this.handleTechLoadStart_),this.on(this.tech_,"waiting",this.handleTechWaiting_),this.on(this.tech_,"canplay",this.handleTechCanPlay_),this.on(this.tech_,"canplaythrough",this.handleTechCanPlayThrough_),this.on(this.tech_,"playing",this.handleTechPlaying_),this.on(this.tech_,"ended",this.handleTechEnded_),this.on(this.tech_,"seeking",this.handleTechSeeking_),this.on(this.tech_,"seeked",this.handleTechSeeked_),this.on(this.tech_,"play",this.handleTechPlay_),this.on(this.tech_,"firstplay",this.handleTechFirstPlay_),this.on(this.tech_,"pause",this.handleTechPause_),this.on(this.tech_,"progress",this.handleTechProgress_),this.on(this.tech_,"durationchange",this.handleTechDurationChange_),this.on(this.tech_,"fullscreenchange",this.handleTechFullscreenChange_),this.on(this.tech_,"error",this.handleTechError_),this.on(this.tech_,"suspend",this.handleTechSuspend_),this.on(this.tech_,"abort",this.handleTechAbort_),this.on(this.tech_,"emptied",this.handleTechEmptied_),this.on(this.tech_,"stalled",this.handleTechStalled_),this.on(this.tech_,"loadedmetadata",this.handleTechLoadedMetaData_),this.on(this.tech_,"loadeddata",this.handleTechLoadedData_),this.on(this.tech_,"timeupdate",this.handleTechTimeUpdate_),this.on(this.tech_,"ratechange",this.handleTechRateChange_),this.on(this.tech_,"volumechange",this.handleTechVolumeChange_),this.on(this.tech_,"texttrackchange",this.handleTechTextTrackChange_),this.on(this.tech_,"loadedmetadata",this.updateStyleEl_),this.on(this.tech_,"posterchange",this.handleTechPosterChange_),this.on(this.tech_,"textdata",this.handleTechTextData_),this.usingNativeControls(this.techGet_("controls")),this.controls()&&!this.usingNativeControls()&&this.addTechControlsListeners_(),this.tech_.el().parentNode===this.el()||"Html5"===t&&this.tag||g.insertElFirst(this.tech_.el(),this.el()),this.tag&&(this.tag.player=null,this.tag=null)},e.prototype.unloadTech_=function(){this.videoTracks_=this.videoTracks(),this.textTracks_=this.textTracks(),this.audioTracks_=this.audioTracks(),this.textTracksJson_=U["default"].textTracksToJson(this.tech_),this.isReady_=!1,this.tech_.dispose(),this.tech_=!1},e.prototype.tech=function(t){if(t&&t.IWillNotUseThisInPlugins)return this.tech_;var e="\n      Please make sure that you are not using this inside of a plugin.\n      To disable this alert and error, please pass in an object with\n      `IWillNotUseThisInPlugins` to the `tech` method. See\n      https://github.com/videojs/video.js/issues/2617 for more info.\n    ";throw f["default"].alert(e),new Error(e)},e.prototype.addTechControlsListeners_=function(){this.removeTechControlsListeners_(),this.on(this.tech_,"mousedown",this.handleTechClick_),this.on(this.tech_,"touchstart",this.handleTechTouchStart_),this.on(this.tech_,"touchmove",this.handleTechTouchMove_),this.on(this.tech_,"touchend",this.handleTechTouchEnd_),this.on(this.tech_,"tap",this.handleTechTap_)},e.prototype.removeTechControlsListeners_=function(){this.off(this.tech_,"tap",this.handleTechTap_),this.off(this.tech_,"touchstart",this.handleTechTouchStart_),this.off(this.tech_,"touchmove",this.handleTechTouchMove_),this.off(this.tech_,"touchend",this.handleTechTouchEnd_),this.off(this.tech_,"mousedown",this.handleTechClick_)},e.prototype.handleTechReady_=function(){if(this.triggerReady(),this.cache_.volume&&this.techCall_("setVolume",this.cache_.volume),this.handleTechPosterChange_(),this.handleTechDurationChange_(),(this.src()||this.currentSrc())&&this.tag&&this.options_.autoplay&&this.paused()){try{delete this.tag.poster}catch(t){k["default"]("deleting tag.poster throws in some browsers",t)}this.play()}},e.prototype.handleTechLoadStart_=function(){this.removeClass("vjs-ended"),this.error(null),this.paused()?(this.hasStarted(!1),this.trigger("loadstart")):(this.trigger("loadstart"),this.trigger("firstplay"))},e.prototype.hasStarted=function(t){return void 0!==t?(this.hasStarted_!==t&&(this.hasStarted_=t,t?(this.addClass("vjs-has-started"),this.trigger("firstplay")):this.removeClass("vjs-has-started")),this):!!this.hasStarted_},e.prototype.handleTechPlay_=function(){this.removeClass("vjs-ended"),this.removeClass("vjs-paused"),this.addClass("vjs-playing"),this.hasStarted(!0),this.trigger("play")},e.prototype.handleTechWaiting_=function(){var t=this;this.addClass("vjs-waiting"),this.trigger("waiting"),this.one("timeupdate",function(){return t.removeClass("vjs-waiting")})},e.prototype.handleTechCanPlay_=function(){this.removeClass("vjs-waiting"),this.trigger("canplay")},e.prototype.handleTechCanPlayThrough_=function(){this.removeClass("vjs-waiting"),this.trigger("canplaythrough")},e.prototype.handleTechPlaying_=function(){this.removeClass("vjs-waiting"),this.trigger("playing")},e.prototype.handleTechSeeking_=function(){this.addClass("vjs-seeking"),this.trigger("seeking")},e.prototype.handleTechSeeked_=function(){this.removeClass("vjs-seeking"),this.trigger("seeked")},e.prototype.handleTechFirstPlay_=function(){this.options_.starttime&&this.currentTime(this.options_.starttime),this.addClass("vjs-has-started"),this.trigger("firstplay")},e.prototype.handleTechPause_=function(){this.removeClass("vjs-playing"),this.addClass("vjs-paused"),this.trigger("pause")},e.prototype.handleTechProgress_=function(){this.trigger("progress")},e.prototype.handleTechEnded_=function(){this.addClass("vjs-ended"),this.options_.loop?(this.currentTime(0),this.play()):this.paused()||this.pause(),this.trigger("ended")},e.prototype.handleTechDurationChange_=function(){this.duration(this.techGet_("duration"))},e.prototype.handleTechClick_=function(t){0===t.button&&this.controls()&&(this.paused()?this.play():this.pause())},e.prototype.handleTechTap_=function(){this.userActive(!this.userActive())},e.prototype.handleTechTouchStart_=function(){this.userWasActive=this.userActive()},e.prototype.handleTechTouchMove_=function(){this.userWasActive&&this.reportUserActivity()},e.prototype.handleTechTouchEnd_=function(t){t.preventDefault()},e.prototype.handleFullscreenChange_=function(){this.isFullscreen()?this.addClass("vjs-fullscreen"):this.removeClass("vjs-fullscreen")},e.prototype.handleStageClick_=function(){this.reportUserActivity()},e.prototype.handleTechFullscreenChange_=function(t,e){e&&this.isFullscreen(e.isFullscreen),this.trigger("fullscreenchange")},e.prototype.handleTechError_=function(){var t=this.tech_.error();this.error(t)},e.prototype.handleTechSuspend_=function(){this.trigger("suspend")},e.prototype.handleTechAbort_=function(){this.trigger("abort")},e.prototype.handleTechEmptied_=function(){this.trigger("emptied")},e.prototype.handleTechStalled_=function(){this.trigger("stalled")},e.prototype.handleTechLoadedMetaData_=function(){this.trigger("loadedmetadata")},e.prototype.handleTechTextData_=function(){var t=null;arguments.length>1&&(t=arguments[1]),this.trigger("textdata",t)},e.prototype.handleTechLoadedData_=function(){this.trigger("loadeddata")},e.prototype.handleTechTimeUpdate_=function(){this.trigger("timeupdate")},e.prototype.handleTechRateChange_=function(){this.trigger("ratechange")},e.prototype.handleTechVolumeChange_=function(){this.trigger("volumechange")},e.prototype.handleTechTextTrackChange_=function(){this.trigger("texttrackchange")},e.prototype.getCache=function(){return this.cache_},e.prototype.techCall_=function(t,e){if(this.tech_&&!this.tech_.isReady_)this.tech_.ready(function(){this[t](e)},!0);else try{this.tech_&&this.tech_[t](e)}catch(n){throw k["default"](n),n}},e.prototype.techGet_=function(t){if(this.tech_&&this.tech_.isReady_)try{return this.tech_[t]()}catch(e){throw void 0===this.tech_[t]?k["default"]("Video.js: "+t+" method not defined for "+this.techName_+" playback technology.",e):"TypeError"===e.name?(k["default"]("Video.js: "+t+" unavailable on "+this.techName_+" playback technology element.",e),this.tech_.isReady_=!1):k["default"](e),e}},e.prototype.play=function(){return this.src()||this.currentSrc()?this.techCall_("play"):this.tech_.one("loadstart",function(){this.play()}),this},e.prototype.pause=function(){return this.techCall_("pause"),this},e.prototype.paused=function(){return this.techGet_("paused")===!1?!1:!0},e.prototype.scrubbing=function(t){return void 0!==t?(this.scrubbing_=!!t,t?this.addClass("vjs-scrubbing"):this.removeClass("vjs-scrubbing"),this):this.scrubbing_},e.prototype.currentTime=function(t){return void 0!==t?(this.techCall_("setCurrentTime",t),this):this.cache_.currentTime=this.techGet_("currentTime")||0},e.prototype.duration=function(t){return void 0===t?this.cache_.duration||0:(t=parseFloat(t)||0,0>t&&(t=1/0),t!==this.cache_.duration&&(this.cache_.duration=t,1/0===t?this.addClass("vjs-live"):this.removeClass("vjs-live"),this.trigger("durationchange")),this)},e.prototype.remainingTime=function(){return this.duration()-this.currentTime()},e.prototype.buffered=function n(){var n=this.techGet_("buffered");return n&&n.length||(n=O.createTimeRange(0,0)),n},e.prototype.bufferedPercent=function(){return x.bufferedPercent(this.buffered(),this.duration())},e.prototype.bufferedEnd=function(){var t=this.buffered(),e=this.duration(),n=t.end(t.length-1);return n>e&&(n=e),n},e.prototype.volume=function(t){var e=void 0;return void 0!==t?(e=Math.max(0,Math.min(1,parseFloat(t))),this.cache_.volume=e,this.techCall_("setVolume",e),this):(e=parseFloat(this.techGet_("volume")),isNaN(e)?1:e)},e.prototype.muted=function(t){return void 0!==t?(this.techCall_("setMuted",t),this):this.techGet_("muted")||!1},e.prototype.supportsFullScreen=function(){return this.techGet_("supportsFullScreen")||!1},e.prototype.isFullscreen=function(t){return void 0!==t?(this.isFullscreen_=!!t,this):!!this.isFullscreen_},e.prototype.requestFullscreen=function(){var t=A["default"];return this.isFullscreen(!0),t.requestFullscreen?(h.on(c["default"],t.fullscreenchange,m.bind(this,function e(){this.isFullscreen(c["default"][t.fullscreenElement]),this.isFullscreen()===!1&&h.off(c["default"],t.fullscreenchange,e),this.trigger("fullscreenchange")})),this.el_[t.requestFullscreen]()):this.tech_.supportsFullScreen()?this.techCall_("enterFullScreen"):(this.enterFullWindow(),this.trigger("fullscreenchange")),this},e.prototype.exitFullscreen=function(){var t=A["default"];return this.isFullscreen(!1),t.requestFullscreen?c["default"][t.exitFullscreen]():this.tech_.supportsFullScreen()?this.techCall_("exitFullScreen"):(this.exitFullWindow(),this.trigger("fullscreenchange")),this},e.prototype.enterFullWindow=function(){this.isFullWindow=!0,this.docOrigOverflow=c["default"].documentElement.style.overflow,h.on(c["default"],"keydown",m.bind(this,this.fullWindowOnEscKey)),c["default"].documentElement.style.overflow="hidden",g.addElClass(c["default"].body,"vjs-full-window"),this.trigger("enterFullWindow")},e.prototype.fullWindowOnEscKey=function(t){27===t.keyCode&&(this.isFullscreen()===!0?this.exitFullscreen():this.exitFullWindow())},e.prototype.exitFullWindow=function(){this.isFullWindow=!1,h.off(c["default"],"keydown",this.fullWindowOnEscKey),c["default"].documentElement.style.overflow=this.docOrigOverflow,g.removeElClass(c["default"].body,"vjs-full-window"),this.trigger("exitFullWindow")},e.prototype.canPlayType=function(t){for(var e=void 0,n=0,r=this.options_.techOrder;n<r.length;n++){var o=C["default"](r[n]),i=oe["default"].getTech(o);if(i||(i=l["default"].getComponent(o)),i){if(i.isSupported()&&(e=i.canPlayType(t)))return e}else k["default"].error('The "'+o+'" tech is undefined. Skipped browser support check for that tech.')}return""},e.prototype.selectSource=function(t){var e=this,n=this.options_.techOrder.map(C["default"]).map(function(t){return[t,oe["default"].getTech(t)||l["default"].getComponent(t)]}).filter(function(t){var e=t[0],n=t[1];return n?n.isSupported():(k["default"].error('The "'+e+'" tech is undefined. Skipped browser support check for that tech.'),!1)}),r=function(t,e,n){var r=void 0;return t.some(function(t){return e.some(function(e){return r=n(t,e),r?!0:void 0})}),r},o=void 0,i=function(t){return function(e,n){return t(n,e)}},s=function(t,n){var r=t[0],o=t[1];return o.canPlaySource(n,e.options_[r.toLowerCase()])?{source:n,tech:r}:void 0};return o=this.options_.sourceOrder?r(t,n,i(s)):r(n,t,s),o||!1},e.prototype.src=function(t){if(void 0===t)return this.techGet_("src");var e=oe["default"].getTech(this.techName_);return e||(e=l["default"].getComponent(this.techName_)),Array.isArray(t)?this.sourceList_(t):"string"==typeof t?this.src({src:t}):t instanceof Object&&(t.type&&!e.canPlaySource(t,this.options_[this.techName_.toLowerCase()])?this.sourceList_([t]):(this.cache_.src=t.src,this.currentType_=t.type||"",this.ready(function(){e.prototype.hasOwnProperty("setSource")?this.techCall_("setSource",t):this.techCall_("src",t.src),"auto"===this.options_.preload&&this.load(),this.options_.autoplay&&this.play()},!0))),this},e.prototype.sourceList_=function(t){var e=this.selectSource(t);e?e.tech===this.techName_?this.src(e.source):this.loadTech_(e.tech,e.source):(this.setTimeout(function(){this.error({code:4,message:this.localize(this.options_.notSupportedMessage)})},0),this.triggerReady())},e.prototype.load=function(){return this.techCall_("load"),this},e.prototype.reset=function(){return this.loadTech_(C["default"](this.options_.techOrder[0]),null),this.techCall_("reset"),this},e.prototype.currentSrc=function(){return this.techGet_("currentSrc")||this.cache_.src||""},e.prototype.currentType=function(){return this.currentType_||""},e.prototype.preload=function(t){return void 0!==t?(this.techCall_("setPreload",t),this.options_.preload=t,this):this.techGet_("preload")},e.prototype.autoplay=function(t){return void 0!==t?(this.techCall_("setAutoplay",t),this.options_.autoplay=t,this):this.techGet_("autoplay",t)},e.prototype.loop=function(t){return void 0!==t?(this.techCall_("setLoop",t),this.options_.loop=t,this):this.techGet_("loop")},e.prototype.poster=function(t){return void 0===t?this.poster_:(t||(t=""),this.poster_=t,this.techCall_("setPoster",t),this.trigger("posterchange"),this)},e.prototype.handleTechPosterChange_=function(){!this.poster_&&this.tech_&&this.tech_.poster&&(this.poster_=this.tech_.poster()||"",this.trigger("posterchange"))},e.prototype.controls=function(t){return void 0!==t?(t=!!t,this.controls_!==t&&(this.controls_=t,this.usingNativeControls()&&this.techCall_("setControls",t),t?(this.removeClass("vjs-controls-disabled"),this.addClass("vjs-controls-enabled"),this.trigger("controlsenabled"),this.usingNativeControls()||this.addTechControlsListeners_()):(this.removeClass("vjs-controls-enabled"),this.addClass("vjs-controls-disabled"),this.trigger("controlsdisabled"),this.usingNativeControls()||this.removeTechControlsListeners_())),this):!!this.controls_},e.prototype.usingNativeControls=function(t){return void 0!==t?(t=!!t,this.usingNativeControls_!==t&&(this.usingNativeControls_=t,t?(this.addClass("vjs-using-native-controls"),this.trigger("usingnativecontrols")):(this.removeClass("vjs-using-native-controls"),this.trigger("usingcustomcontrols"))),this):!!this.usingNativeControls_},e.prototype.error=function(t){return void 0===t?this.error_||null:null===t?(this.error_=t,this.removeClass("vjs-error"),this.errorDisplay&&this.errorDisplay.close(),this):(this.error_=new I["default"](t),this.addClass("vjs-error"),k["default"].error("(CODE:"+this.error_.code+" "+I["default"].errorTypes[this.error_.code]+")",this.error_.message,this.error_),this.trigger("error"),this)},e.prototype.ended=function(){return this.techGet_("ended")},e.prototype.seeking=function(){return this.techGet_("seeking")},e.prototype.seekable=function(){return this.techGet_("seekable")},e.prototype.reportUserActivity=function(){this.userActivity_=!0},e.prototype.userActive=function(t){return void 0!==t?(t=!!t,t!==this.userActive_&&(this.userActive_=t,t?(this.userActivity_=!0,this.removeClass("vjs-user-inactive"),this.addClass("vjs-user-active"),this.trigger("useractive")):(this.userActivity_=!1,this.tech_&&this.tech_.one("mousemove",function(t){t.stopPropagation(),t.preventDefault()}),this.removeClass("vjs-user-active"),this.addClass("vjs-user-inactive"),this.trigger("userinactive"))),this):this.userActive_},e.prototype.listenForUserActivity_=function(){var t=void 0,e=void 0,n=void 0,r=m.bind(this,this.reportUserActivity),o=function(t){(t.screenX!==e||t.screenY!==n)&&(e=t.screenX,n=t.screenY,r())},i=function(){r(),this.clearInterval(t),t=this.setInterval(r,250)},s=function(){r(),this.clearInterval(t)};this.on("mousedown",i),this.on("mousemove",o),this.on("mouseup",s),this.on("keydown",r),this.on("keyup",r);{var a=void 0;this.setInterval(function(){if(this.userActivity_){this.userActivity_=!1,this.userActive(!0),this.clearTimeout(a);var t=this.options_.inactivityTimeout;t>0&&(a=this.setTimeout(function(){this.userActivity_||this.userActive(!1)},t))}},250)}},e.prototype.playbackRate=function(t){return void 0!==t?(this.techCall_("setPlaybackRate",t),this):this.tech_&&this.tech_.featuresPlaybackRate?this.techGet_("playbackRate"):1},e.prototype.isAudio=function(t){return void 0!==t?(this.isAudio_=!!t,this):!!this.isAudio_},e.prototype.networkState=function(){return this.techGet_("networkState")},e.prototype.readyState=function(){return this.techGet_("readyState")},e.prototype.videoTracks=function(){return this.tech_?this.tech_.videoTracks():(this.videoTracks_=this.videoTracks_||new z["default"],this.videoTracks_)},e.prototype.audioTracks=function(){return this.tech_?this.tech_.audioTracks():(this.audioTracks_=this.audioTracks_||new W["default"],this.audioTracks_)},e.prototype.textTracks=function(){return this.tech_&&this.tech_.textTracks()},e.prototype.remoteTextTracks=function(){return this.tech_&&this.tech_.remoteTextTracks()},e.prototype.remoteTextTrackEls=function(){return this.tech_&&this.tech_.remoteTextTrackEls()},e.prototype.addTextTrack=function(t,e,n){return this.tech_&&this.tech_.addTextTrack(t,e,n)},e.prototype.addRemoteTextTrack=function(t){return this.tech_&&this.tech_.addRemoteTextTrack(t)},e.prototype.removeRemoteTextTrack=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.track,n=void 0===e?arguments[0]:e;this.tech_&&this.tech_.removeRemoteTextTrack(n)},e.prototype.videoWidth=function(){return this.tech_&&this.tech_.videoWidth&&this.tech_.videoWidth()||0},e.prototype.videoHeight=function(){return this.tech_&&this.tech_.videoHeight&&this.tech_.videoHeight()||0},e.prototype.language=function(t){return void 0===t?this.language_:(this.language_=(""+t).toLowerCase(),this)},e.prototype.languages=function(){return B["default"](e.prototype.options_.languages,this.languages_)},e.prototype.toJSON=function(){var t=B["default"](this.options_),e=t.tracks;t.tracks=[];for(var n=0;n<e.length;n++){var r=e[n];r=B["default"](r),r.player=void 0,t.tracks[n]=r}return t},e.prototype.createModal=function(t,e){var n=this;e=e||{},e.content=t||"";var r=new ne["default"](n,e);return n.addChild(r),r.on("dispose",function(){n.removeChild(r)}),r.open()},e.getTagSettings=function(t){var e={sources:[],tracks:[]},n=g.getElAttributes(t),r=n["data-setup"];if(null!==r){var o=L["default"](r||"{}"),i=o[0],s=o[1];i&&k["default"].error(i),D["default"](n,s)}if(D["default"](e,n),t.hasChildNodes())for(var a=t.childNodes,l=0,u=a.length;u>l;l++){var c=a[l],p=c.nodeName.toLowerCase();"source"===p?e.sources.push(g.getElAttributes(c)):"track"===p&&e.tracks.push(g.getElAttributes(c))}return e},e}(l["default"]));se.players={};var ae=f["default"].navigator;se.prototype.options_={techOrder:["html5","flash"],html5:{},flash:{},defaultVolume:0,inactivityTimeout:2e3,playbackRates:[],children:["mediaLoader","posterImage","textTrackDisplay","loadingSpinner","bigPlayButton","controlBar","errorDisplay","textTrackSettings"],language:ae.languages&&ae.languages[0]||ae.userLanguage||ae.language||"en",languages:{},notSupportedMessage:"No compatible source was found for this media."},se.prototype.handleTechLoadStart_,se.prototype.handleLoadedMetaData_,se.prototype.handleTextData_,se.prototype.handleLoadedData_,se.prototype.handleUserActive_,se.prototype.handleUserInactive_,se.prototype.handleTimeUpdate_,se.prototype.handleTechEnded_,se.prototype.handleVolumeChange_,se.prototype.handleError_,se.prototype.flexNotSupported_=function(){var t=c["default"].createElement("i");return!("flexBasis"in t.style||"webkitFlexBasis"in t.style||"mozFlexBasis"in t.style||"msFlexBasis"in t.style||"msFlexOrder"in t.style)},l["default"].registerComponent("Player",se),n["default"]=se,e.exports=n["default"]},{"./big-play-button.js":63,"./component.js":67,"./control-bar/control-bar.js":70,"./error-display.js":103,"./fullscreen-api.js":106,"./loading-spinner.js":107,"./media-error.js":108,"./modal-dialog":112,"./poster-image.js":117,"./tech/html5.js":122,"./tech/loader.js":123,"./tech/tech.js":124,"./tracks/audio-track-list.js":125,"./tracks/text-track-display.js":130,"./tracks/text-track-list-converter.js":131,"./tracks/text-track-settings.js":133,"./tracks/video-track-list.js":138,"./utils/browser.js":140,"./utils/buffer.js":141,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/guid.js":146,"./utils/log.js":147,"./utils/merge-options.js":148,"./utils/stylesheet.js":149,"./utils/time-ranges.js":150,"./utils/to-title-case.js":151,"global/document":1,"global/window":2,"object.assign":45,"safe-json-parse/tuple":54}],114:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}n.__esModule=!0;var o=t("./player.js"),i=r(o),s=function(t,e){i["default"].prototype[t]=e};n["default"]=s,e.exports=n["default"]},{"./player.js":113}],115:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../clickable-component.js"),l=o(a),u=t("../component.js"),c=o(u),p=t("./popup.js"),f=(o(p),t("../utils/dom.js")),d=(r(f),t("../utils/fn.js")),h=(r(d),t("../utils/to-title-case.js")),y=(o(h),function(t){function e(n){var r=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];i(this,e),t.call(this,n,r),this.update()}return s(e,t),e.prototype.update=function(){var t=this.createPopup();this.popup&&this.removeChild(this.popup),this.popup=t,this.addChild(t),this.items&&0===this.items.length?this.hide():this.items&&this.items.length>1&&this.show()},e.prototype.createPopup=function(){},e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:this.buildCSSClass()})},e.prototype.buildCSSClass=function(){var e="vjs-menu-button";return e+=this.options_.inline===!0?"-inline":"-popup","vjs-menu-button "+e+" "+t.prototype.buildCSSClass.call(this)},e}(l["default"]));c["default"].registerComponent("PopupButton",y),n["default"]=y,e.exports=n["default"]},{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/to-title-case.js":151,"./popup.js":116}],116:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../component.js"),l=o(a),u=t("../utils/dom.js"),c=r(u),p=t("../utils/fn.js"),f=r(p),d=t("../utils/events.js"),h=r(d),y=function(t){function e(){i(this,e),t.apply(this,arguments)}return s(e,t),e.prototype.addItem=function(t){this.addChild(t),t.on("click",f.bind(this,function(){this.unlockShowing()}))},e.prototype.createEl=function(){var e=this.options_.contentElType||"ul";this.contentEl_=c.createEl(e,{className:"vjs-menu-content"});var n=t.prototype.createEl.call(this,"div",{append:this.contentEl_,className:"vjs-menu"});return n.appendChild(this.contentEl_),h.on(n,"click",function(t){t.preventDefault(),t.stopImmediatePropagation()}),n},e}(l["default"]);l["default"].registerComponent("Popup",y),n["default"]=y,e.exports=n["default"]},{"../component.js":67,"../utils/dom.js":142,"../utils/events.js":143,"../utils/fn.js":144}],117:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./clickable-component.js"),l=o(a),u=t("./component.js"),c=o(u),p=t("./utils/fn.js"),f=r(p),d=t("./utils/dom.js"),h=r(d),y=t("./utils/browser.js"),g=r(y),v=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.update(),n.on("posterchange",f.bind(this,this.update))}return s(e,t),e.prototype.dispose=function(){this.player().off("posterchange",this.update),t.prototype.dispose.call(this)},e.prototype.createEl=function(){var t=h.createEl("div",{className:"vjs-poster",tabIndex:-1});return g.BACKGROUND_SIZE_SUPPORTED||(this.fallbackImg_=h.createEl("img"),t.appendChild(this.fallbackImg_)),t},e.prototype.update=function(){var t=this.player().poster();this.setSrc(t),t?this.show():this.hide()},e.prototype.setSrc=function(t){if(this.fallbackImg_)this.fallbackImg_.src=t;else{var e="";t&&(e='url("'+t+'")'),this.el_.style.backgroundImage=e}},e.prototype.handleClick=function(){this.player_.paused()?this.player_.play():this.player_.pause()},e}(l["default"]);c["default"].registerComponent("PosterImage",v),n["default"]=v,e.exports=n["default"]},{"./clickable-component.js":65,"./component.js":67,"./utils/browser.js":140,"./utils/dom.js":142,"./utils/fn.js":144}],118:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}n.__esModule=!0;var i=t("./utils/events.js"),s=o(i),a=t("global/document"),l=r(a),u=t("global/window"),c=r(u),p=!1,f=void 0,d=function(){var t=l["default"].getElementsByTagName("video"),e=l["default"].getElementsByTagName("audio"),n=[];if(t&&t.length>0)for(var r=0,o=t.length;o>r;r++)n.push(t[r]);if(e&&e.length>0)for(var r=0,o=e.length;o>r;r++)n.push(e[r]);if(n&&n.length>0)for(var r=0,o=n.length;o>r;r++){var i=n[r];if(!i||!i.getAttribute){h(1);break}if(void 0===i.player){var s=i.getAttribute("data-setup");if(null!==s){f(i)}}}else p||h(1)},h=function(t,e){e&&(f=e),setTimeout(d,t)};"complete"===l["default"].readyState?p=!0:s.one(c["default"],"load",function(){p=!0});var y=function(){return p};n.autoSetup=d,n.autoSetupTimeout=h,n.hasLoaded=y},{"./utils/events.js":143,"global/document":1,"global/window":2}],119:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../component.js"),l=o(a),u=t("../utils/dom.js"),c=r(u),p=t("object.assign"),f=o(p),d=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.bar=this.getChild(this.options_.barName),this.vertical(!!this.options_.vertical),this.on("mousedown",this.handleMouseDown),this.on("touchstart",this.handleMouseDown),this.on("focus",this.handleFocus),this.on("blur",this.handleBlur),this.on("click",this.handleClick),this.on(n,"controlsvisible",this.update),this.on(n,this.playerEvent,this.update)}return s(e,t),e.prototype.createEl=function(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],r=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];return n.className=n.className+" vjs-slider",n=f["default"]({tabIndex:0},n),r=f["default"]({role:"slider","aria-valuenow":0,"aria-valuemin":0,"aria-valuemax":100,tabIndex:0},r),t.prototype.createEl.call(this,e,n,r)},e.prototype.handleMouseDown=function(t){var e=this.bar.el_.ownerDocument;t.preventDefault(),c.blockTextSelection(),this.addClass("vjs-sliding"),this.trigger("slideractive"),this.on(e,"mousemove",this.handleMouseMove),this.on(e,"mouseup",this.handleMouseUp),this.on(e,"touchmove",this.handleMouseMove),this.on(e,"touchend",this.handleMouseUp),this.handleMouseMove(t)},e.prototype.handleMouseMove=function(){},e.prototype.handleMouseUp=function(){var t=this.bar.el_.ownerDocument;c.unblockTextSelection(),this.removeClass("vjs-sliding"),this.trigger("sliderinactive"),this.off(t,"mousemove",this.handleMouseMove),this.off(t,"mouseup",this.handleMouseUp),this.off(t,"touchmove",this.handleMouseMove),this.off(t,"touchend",this.handleMouseUp),this.update()},e.prototype.update=function(){if(this.el_){var t=this.getPercent(),e=this.bar;if(e){("number"!=typeof t||t!==t||0>t||1/0===t)&&(t=0);var n=(100*t).toFixed(2)+"%";this.vertical()?e.el().style.height=n:e.el().style.width=n}}},e.prototype.calculateDistance=function(t){var e=c.getPointerPosition(this.el_,t);return this.vertical()?e.y:e.x},e.prototype.handleFocus=function(){this.on(this.bar.el_.ownerDocument,"keydown",this.handleKeyPress)
},e.prototype.handleKeyPress=function(t){37===t.which||40===t.which?(t.preventDefault(),this.stepBack()):(38===t.which||39===t.which)&&(t.preventDefault(),this.stepForward())},e.prototype.handleBlur=function(){this.off(this.bar.el_.ownerDocument,"keydown",this.handleKeyPress)},e.prototype.handleClick=function(t){t.stopImmediatePropagation(),t.preventDefault()},e.prototype.vertical=function(t){return void 0===t?this.vertical_||!1:(this.vertical_=!!t,this.vertical_?this.addClass("vjs-slider-vertical"):this.addClass("vjs-slider-horizontal"),this)},e}(l["default"]);l["default"].registerComponent("Slider",d),n["default"]=d,e.exports=n["default"]},{"../component.js":67,"../utils/dom.js":142,"object.assign":45}],120:[function(t,e,n){"use strict";function r(t){return t.streamingFormats={"rtmp/mp4":"MP4","rtmp/flv":"FLV"},t.streamFromParts=function(t,e){return t+"&"+e},t.streamToParts=function(t){var e={connection:"",stream:""};if(!t)return e;var n=t.search(/&(?!\w+=)/),r=void 0;return-1!==n?r=n+1:(n=r=t.lastIndexOf("/")+1,0===n&&(n=r=t.length)),e.connection=t.substring(0,n),e.stream=t.substring(r,t.length),e},t.isStreamingType=function(e){return e in t.streamingFormats},t.RTMP_RE=/^rtmp[set]?:\/\//i,t.isStreamingSrc=function(e){return t.RTMP_RE.test(e)},t.rtmpSourceHandler={},t.rtmpSourceHandler.canPlayType=function(e){return t.isStreamingType(e)?"maybe":""},t.rtmpSourceHandler.canHandleSource=function(e){var n=t.rtmpSourceHandler.canPlayType(e.type);return n?n:t.isStreamingSrc(e.src)?"maybe":""},t.rtmpSourceHandler.handleSource=function(e,n){var r=t.streamToParts(e.src);n.setRtmpConnection(r.connection),n.setRtmpStream(r.stream)},t.registerSourceHandler(t.rtmpSourceHandler),t}n.__esModule=!0,n["default"]=r,e.exports=n["default"]},{}],121:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t){var e=t.charAt(0).toUpperCase()+t.slice(1);C["set"+e]=function(e){return this.el_.vjs_setProperty(t,e)}}function l(t){C[t]=function(){return this.el_.vjs_getProperty(t)}}n.__esModule=!0;for(var u=t("./tech"),c=o(u),p=t("../utils/dom.js"),f=r(p),d=t("../utils/url.js"),h=r(d),y=t("../utils/time-ranges.js"),g=t("./flash-rtmp"),v=o(g),m=t("../component"),b=o(m),_=t("global/window"),j=o(_),T=t("object.assign"),w=o(T),k=j["default"].navigator,E=function(t){function e(n,r){i(this,e),t.call(this,n,r),n.source&&this.ready(function(){this.setSource(n.source)},!0),n.startTime&&this.ready(function(){this.load(),this.play(),this.currentTime(n.startTime)},!0),j["default"].videojs=j["default"].videojs||{},j["default"].videojs.Flash=j["default"].videojs.Flash||{},j["default"].videojs.Flash.onReady=e.onReady,j["default"].videojs.Flash.onEvent=e.onEvent,j["default"].videojs.Flash.onError=e.onError,this.on("seeked",function(){this.lastSeekTarget_=void 0})}return s(e,t),e.prototype.createEl=function(){var t=this.options_;t.swf||(t.swf="//vjs.zencdn.net/swf/5.1.0/video-js.swf");var n=t.techId,r=w["default"]({readyFunction:"videojs.Flash.onReady",eventProxyFunction:"videojs.Flash.onEvent",errorEventProxyFunction:"videojs.Flash.onError",autoplay:t.autoplay,preload:t.preload,loop:t.loop,muted:t.muted},t.flashVars),o=w["default"]({wmode:"opaque",bgcolor:"#000000"},t.params),i=w["default"]({id:n,name:n,"class":"vjs-tech"},t.attributes);return this.el_=e.embed(t.swf,r,o,i),this.el_.tech=this,this.el_},e.prototype.play=function(){this.ended()&&this.setCurrentTime(0),this.el_.vjs_play()},e.prototype.pause=function(){this.el_.vjs_pause()},e.prototype.src=function(t){return void 0===t?this.currentSrc():this.setSrc(t)},e.prototype.setSrc=function(t){if(t=h.getAbsoluteURL(t),this.el_.vjs_src(t),this.autoplay()){var e=this;this.setTimeout(function(){e.play()},0)}},e.prototype.seeking=function(){return void 0!==this.lastSeekTarget_},e.prototype.setCurrentTime=function(e){var n=this.seekable();n.length&&(e=e>n.start(0)?e:n.start(0),e=e<n.end(n.length-1)?e:n.end(n.length-1),this.lastSeekTarget_=e,this.trigger("seeking"),this.el_.vjs_setProperty("currentTime",e),t.prototype.setCurrentTime.call(this))},e.prototype.currentTime=function(){return this.seeking()?this.lastSeekTarget_||0:this.el_.vjs_getProperty("currentTime")},e.prototype.currentSrc=function(){return this.currentSource_?this.currentSource_.src:this.el_.vjs_getProperty("currentSrc")},e.prototype.duration=function n(){if(0===this.readyState())return 0/0;var n=this.el_.vjs_getProperty("duration");return n>=0?n:1/0},e.prototype.load=function(){this.el_.vjs_load()},e.prototype.poster=function(){this.el_.vjs_getProperty("poster")},e.prototype.setPoster=function(){},e.prototype.seekable=function(){var t=this.duration();return 0===t?y.createTimeRange():y.createTimeRange(0,t)},e.prototype.buffered=function(){var t=this.el_.vjs_getProperty("buffered");return 0===t.length?y.createTimeRange():y.createTimeRange(t[0][0],t[0][1])},e.prototype.supportsFullScreen=function(){return!1},e.prototype.enterFullScreen=function(){return!1},e}(c["default"]),C=E.prototype,O="rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted".split(","),x="networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight".split(","),S=0;S<O.length;S++)l(O[S]),a(O[S]);for(var S=0;S<x.length;S++)l(x[S]);E.isSupported=function(){return E.version()[0]>=10},c["default"].withSourceHandlers(E),E.nativeSourceHandler={},E.nativeSourceHandler.canPlayType=function(t){return t in E.formats?"maybe":""},E.nativeSourceHandler.canHandleSource=function(t){function e(t){var e=h.getFileExtension(t);return e?"video/"+e:""}var n;return n=t.type?t.type.replace(/;.*/,"").toLowerCase():e(t.src),E.nativeSourceHandler.canPlayType(n)},E.nativeSourceHandler.handleSource=function(t,e){e.setSrc(t.src)},E.nativeSourceHandler.dispose=function(){},E.registerSourceHandler(E.nativeSourceHandler),E.formats={"video/flv":"FLV","video/x-flv":"FLV","video/mp4":"MP4","video/m4v":"MP4"},E.onReady=function(t){var e=f.getEl(t),n=e&&e.tech;n&&n.el()&&E.checkReady(n)},E.checkReady=function(t){t.el()&&(t.el().vjs_getProperty?t.triggerReady():this.setTimeout(function(){E.checkReady(t)},50))},E.onEvent=function(t,e){var n=f.getEl(t).tech;n.trigger(e,Array.prototype.slice.call(arguments,2))},E.onError=function(t,e){var n=f.getEl(t).tech;return"srcnotfound"===e?n.error(4):(n.error("FLASH: "+e),void 0)},E.version=function(){var t="0,0,0";try{t=new j["default"].ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version").replace(/\D+/g,",").match(/^,?(.+),?$/)[1]}catch(e){try{k.mimeTypes["application/x-shockwave-flash"].enabledPlugin&&(t=(k.plugins["Shockwave Flash 2.0"]||k.plugins["Shockwave Flash"]).description.replace(/\D+/g,",").match(/^,?(.+),?$/)[1])}catch(n){}}return t.split(",")},E.embed=function(t,e,n,r){var o=E.getEmbedCode(t,e,n,r),i=f.createEl("div",{innerHTML:o}).childNodes[0];return i},E.getEmbedCode=function(t,e,n,r){var o='<object type="application/x-shockwave-flash" ',i="",s="",a="";return e&&Object.getOwnPropertyNames(e).forEach(function(t){i+=t+"="+e[t]+"&amp;"}),n=w["default"]({movie:t,flashvars:i,allowScriptAccess:"always",allowNetworking:"all"},n),Object.getOwnPropertyNames(n).forEach(function(t){s+='<param name="'+t+'" value="'+n[t]+'" />'}),r=w["default"]({data:t,width:"100%",height:"100%"},r),Object.getOwnPropertyNames(r).forEach(function(t){a+=t+'="'+r[t]+'" '}),""+o+a+">"+s+"</object>"},v["default"](E),b["default"].registerComponent("Flash",E),c["default"].registerTech("Flash",E),n["default"]=E,e.exports=n["default"]},{"../component":67,"../utils/dom.js":142,"../utils/time-ranges.js":150,"../utils/url.js":152,"./flash-rtmp":120,"./tech":124,"global/window":2,"object.assign":45}],122:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){return t.raw=e,t}n.__esModule=!0;var l=a(["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used. \n            This may prevent text tracks from loading."],["Text Tracks are being loaded from another origin but the crossorigin attribute isn't used. \n            This may prevent text tracks from loading."]),u=t("./tech.js"),c=o(u),p=t("../component"),f=o(p),d=t("../utils/dom.js"),h=r(d),y=t("../utils/url.js"),g=r(y),v=t("../utils/fn.js"),m=r(v),b=t("../utils/log.js"),_=o(b),j=t("tsml"),T=o(j),w=t("../../../src/js/tracks/text-track.js"),k=(o(w),t("../utils/browser.js")),E=r(k),C=t("global/document"),O=o(C),x=t("global/window"),S=o(x),P=t("object.assign"),M=o(P),A=t("../utils/merge-options.js"),R=o(A),I=t("../utils/to-title-case.js"),V=o(I),L=function(t){function e(n,r){var o=this;i(this,e),t.call(this,n,r);var s=n.source,a=!1;if(s&&(this.el_.currentSrc!==s.src||n.tag&&3===n.tag.initNetworkState_)?this.setSource(s):this.handleLateInit_(this.el_),this.el_.hasChildNodes()){for(var u=this.el_.childNodes,c=u.length,p=[];c--;){var f=u[c],d=f.nodeName.toLowerCase();"track"===d&&(this.featuresNativeTextTracks?(this.remoteTextTrackEls().addTrackElement_(f),this.remoteTextTracks().addTrack_(f.track),a||this.el_.hasAttribute("crossorigin")||!g.isCrossOrigin(f.src)||(a=!0)):p.push(f))}for(var h=0;h<p.length;h++)this.el_.removeChild(p[h])}var y=["audio","video"];y.forEach(function(t){var e=V["default"](t);if(o["featuresNative"+e+"Tracks"]){var n=o.el()[t+"Tracks"];n&&n.addEventListener&&(n.addEventListener("change",m.bind(o,o["handle"+e+"TrackChange_"])),n.addEventListener("addtrack",m.bind(o,o["handle"+e+"TrackAdd_"])),n.addEventListener("removetrack",m.bind(o,o["handle"+e+"TrackRemove_"])),o.on("loadstart",o["removeOld"+e+"Tracks_"]))}}),this.featuresNativeTextTracks&&(a&&_["default"].warn(T["default"](l)),this.handleTextTrackChange_=m.bind(this,this.handleTextTrackChange),this.handleTextTrackAdd_=m.bind(this,this.handleTextTrackAdd),this.handleTextTrackRemove_=m.bind(this,this.handleTextTrackRemove),this.proxyNativeTextTracks_()),(E.TOUCH_ENABLED||E.IS_IPHONE||E.IS_NATIVE_ANDROID)&&n.nativeControlsForTouch===!0&&this.setControls(!0),this.triggerReady()}return s(e,t),e.prototype.dispose=function(){var n=this;["audio","video","text"].forEach(function(t){var e=V["default"](t),r=n.el_[t+"Tracks"];r&&r.removeEventListener&&(r.removeEventListener("change",n["handle"+e+"TrackChange_"]),r.removeEventListener("addtrack",n["handle"+e+"TrackAdd_"]),r.removeEventListener("removetrack",n["handle"+e+"TrackRemove_"])),r&&n.off("loadstart",n["removeOld"+e+"Tracks_"])}),e.disposeMediaElement(this.el_),t.prototype.dispose.call(this)},e.prototype.createEl=function(){var t=this.options_.tag;if(!t||this.movingMediaElementInDOM===!1){if(t){var n=t.cloneNode(!0);t.parentNode.insertBefore(n,t),e.disposeMediaElement(t),t=n}else{t=O["default"].createElement("video");var r=this.options_.tag&&h.getElAttributes(this.options_.tag),o=R["default"]({},r);E.TOUCH_ENABLED&&this.options_.nativeControlsForTouch===!0||delete o.controls,h.setElAttributes(t,M["default"](o,{id:this.options_.techId,"class":"vjs-tech"}))}t.playerId=this.options_.playerId}for(var i=["autoplay","preload","loop","muted"],s=i.length-1;s>=0;s--){var a=i[s],l={};"undefined"!=typeof this.options_[a]&&(l[a]=this.options_[a]),h.setElAttributes(t,l)}return t},e.prototype.handleLateInit_=function(t){var e=this;if(0!==t.networkState&&3!==t.networkState){if(0===t.readyState){var n=function(){var t=!1,n=function(){t=!0};e.on("loadstart",n);var r=function(){t||this.trigger("loadstart")};return e.on("loadedmetadata",r),e.ready(function(){this.off("loadstart",n),this.off("loadedmetadata",r),t||this.trigger("loadstart")}),{v:void 0}}();if("object"==typeof n)return n.v}var r=["loadstart"];r.push("loadedmetadata"),t.readyState>=2&&r.push("loadeddata"),t.readyState>=3&&r.push("canplay"),t.readyState>=4&&r.push("canplaythrough"),this.ready(function(){r.forEach(function(t){this.trigger(t)},this)})}},e.prototype.proxyNativeTextTracks_=function(){var t=this.el().textTracks;if(t){for(var e=0;e<t.length;e++)this.textTracks().addTrack_(t[e]);t.addEventListener&&(t.addEventListener("change",this.handleTextTrackChange_),t.addEventListener("addtrack",this.handleTextTrackAdd_),t.addEventListener("removetrack",this.handleTextTrackRemove_)),this.on("loadstart",this.removeOldTextTracks_)}},e.prototype.handleTextTrackChange=function(){var t=this.textTracks();this.textTracks().trigger({type:"change",target:t,currentTarget:t,srcElement:t})},e.prototype.handleTextTrackAdd=function(t){this.textTracks().addTrack_(t.track)},e.prototype.handleTextTrackRemove=function(t){this.textTracks().removeTrack_(t.track)},e.prototype.handleVideoTrackChange_=function(){var t=this.videoTracks();this.videoTracks().trigger({type:"change",target:t,currentTarget:t,srcElement:t})},e.prototype.handleVideoTrackAdd_=function(t){this.videoTracks().addTrack_(t.track)},e.prototype.handleVideoTrackRemove_=function(t){this.videoTracks().removeTrack_(t.track)},e.prototype.handleAudioTrackChange_=function(){var t=this.audioTracks();this.audioTracks().trigger({type:"change",target:t,currentTarget:t,srcElement:t})},e.prototype.handleAudioTrackAdd_=function(t){this.audioTracks().addTrack_(t.track)},e.prototype.handleAudioTrackRemove_=function(t){this.audioTracks().removeTrack_(t.track)},e.prototype.removeOldTracks_=function(t,e){var n=[];if(e){for(var r=0;r<t.length;r++){for(var o=t[r],i=!1,s=0;s<e.length;s++)if(e[s]===o){i=!0;break}i||n.push(o)}for(var r=0;r<n.length;r++){var a=n[r];t.removeTrack_(a)}}},e.prototype.removeOldTextTracks_=function(){var t=this.textTracks(),e=this.el().textTracks;this.removeOldTracks_(t,e)},e.prototype.removeOldAudioTracks_=function(){var t=this.audioTracks(),e=this.el().audioTracks;this.removeOldTracks_(t,e)},e.prototype.removeOldVideoTracks_=function(){var t=this.videoTracks(),e=this.el().videoTracks;this.removeOldTracks_(t,e)},e.prototype.play=function(){var t=this.el_.play();void 0!==t&&"function"==typeof t.then&&t.then(null,function(){})},e.prototype.pause=function(){this.el_.pause()},e.prototype.paused=function(){return this.el_.paused},e.prototype.currentTime=function(){return this.el_.currentTime},e.prototype.setCurrentTime=function(t){try{this.el_.currentTime=t}catch(e){_["default"](e,"Video is not ready. (Video.js)")}},e.prototype.duration=function(){return this.el_.duration||0},e.prototype.buffered=function(){return this.el_.buffered},e.prototype.volume=function(){return this.el_.volume},e.prototype.setVolume=function(t){this.el_.volume=t},e.prototype.muted=function(){return this.el_.muted},e.prototype.setMuted=function(t){this.el_.muted=t},e.prototype.width=function(){return this.el_.offsetWidth},e.prototype.height=function(){return this.el_.offsetHeight},e.prototype.supportsFullScreen=function(){if("function"==typeof this.el_.webkitEnterFullScreen){var t=S["default"].navigator.userAgent;if(/Android/.test(t)||!/Chrome|Mac OS X 10.5/.test(t))return!0}return!1},e.prototype.enterFullScreen=function(){var t=this.el_;"webkitDisplayingFullscreen"in t&&this.one("webkitbeginfullscreen",function(){this.one("webkitendfullscreen",function(){this.trigger("fullscreenchange",{isFullscreen:!1})}),this.trigger("fullscreenchange",{isFullscreen:!0})}),t.paused&&t.networkState<=t.HAVE_METADATA?(this.el_.play(),this.setTimeout(function(){t.pause(),t.webkitEnterFullScreen()},0)):t.webkitEnterFullScreen()},e.prototype.exitFullScreen=function(){this.el_.webkitExitFullScreen()},e.prototype.src=function(t){return void 0===t?this.el_.src:(this.setSrc(t),void 0)},e.prototype.setSrc=function(t){this.el_.src=t},e.prototype.load=function(){this.el_.load()},e.prototype.reset=function(){e.resetMediaElement(this.el_)},e.prototype.currentSrc=function(){return this.currentSource_?this.currentSource_.src:this.el_.currentSrc},e.prototype.poster=function(){return this.el_.poster},e.prototype.setPoster=function(t){this.el_.poster=t},e.prototype.preload=function(){return this.el_.preload},e.prototype.setPreload=function(t){this.el_.preload=t},e.prototype.autoplay=function(){return this.el_.autoplay},e.prototype.setAutoplay=function(t){this.el_.autoplay=t},e.prototype.controls=function(){return this.el_.controls},e.prototype.setControls=function(t){this.el_.controls=!!t},e.prototype.loop=function(){return this.el_.loop},e.prototype.setLoop=function(t){this.el_.loop=t},e.prototype.error=function(){return this.el_.error},e.prototype.seeking=function(){return this.el_.seeking},e.prototype.seekable=function(){return this.el_.seekable},e.prototype.ended=function(){return this.el_.ended},e.prototype.defaultMuted=function(){return this.el_.defaultMuted},e.prototype.playbackRate=function(){return this.el_.playbackRate},e.prototype.played=function(){return this.el_.played},e.prototype.setPlaybackRate=function(t){this.el_.playbackRate=t},e.prototype.networkState=function(){return this.el_.networkState},e.prototype.readyState=function(){return this.el_.readyState},e.prototype.videoWidth=function(){return this.el_.videoWidth},e.prototype.videoHeight=function(){return this.el_.videoHeight},e.prototype.textTracks=function(){return t.prototype.textTracks.call(this)},e.prototype.addTextTrack=function(e,n,r){return this.featuresNativeTextTracks?this.el_.addTextTrack(e,n,r):t.prototype.addTextTrack.call(this,e,n,r)},e.prototype.addRemoteTextTrack=function(){var e=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];if(!this.featuresNativeTextTracks)return t.prototype.addRemoteTextTrack.call(this,e);var n=O["default"].createElement("track");return e.kind&&(n.kind=e.kind),e.label&&(n.label=e.label),(e.language||e.srclang)&&(n.srclang=e.language||e.srclang),e["default"]&&(n["default"]=e["default"]),e.id&&(n.id=e.id),e.src&&(n.src=e.src),this.el().appendChild(n),this.remoteTextTrackEls().addTrackElement_(n),this.remoteTextTracks().addTrack_(n.track),n},e.prototype.removeRemoteTextTrack=function(e){if(!this.featuresNativeTextTracks)return t.prototype.removeRemoteTextTrack.call(this,e);var n=void 0,r=void 0,o=this.remoteTextTrackEls().getTrackElementByTrack_(e);for(this.remoteTextTrackEls().removeTrackElement_(o),this.remoteTextTracks().removeTrack_(e),n=this.$$("track"),r=n.length;r--;)(e===n[r]||e===n[r].track)&&this.el().removeChild(n[r])},e}(c["default"]);L.TEST_VID=O["default"].createElement("video");var N=O["default"].createElement("track");N.kind="captions",N.srclang="en",N.label="English",L.TEST_VID.appendChild(N),L.isSupported=function(){try{L.TEST_VID.volume=.5}catch(t){return!1}return!!L.TEST_VID.canPlayType},c["default"].withSourceHandlers(L),L.nativeSourceHandler={},L.nativeSourceHandler.canPlayType=function(t){try{return L.TEST_VID.canPlayType(t)}catch(e){return""}},L.nativeSourceHandler.canHandleSource=function(t){var e;return t.type?L.nativeSourceHandler.canPlayType(t.type):t.src?(e=g.getFileExtension(t.src),L.nativeSourceHandler.canPlayType("video/"+e)):""},L.nativeSourceHandler.handleSource=function(t,e){e.setSrc(t.src)},L.nativeSourceHandler.dispose=function(){},L.registerSourceHandler(L.nativeSourceHandler),L.canControlVolume=function(){try{var t=L.TEST_VID.volume;return L.TEST_VID.volume=t/2+.1,t!==L.TEST_VID.volume}catch(e){return!1}},L.canControlPlaybackRate=function(){if(E.IS_ANDROID&&E.IS_CHROME)return!1;try{var t=L.TEST_VID.playbackRate;return L.TEST_VID.playbackRate=t/2+.1,t!==L.TEST_VID.playbackRate}catch(e){return!1}},L.supportsNativeTextTracks=function(){var t;return t=!!L.TEST_VID.textTracks,t&&L.TEST_VID.textTracks.length>0&&(t="number"!=typeof L.TEST_VID.textTracks[0].mode),t&&E.IS_FIREFOX&&(t=!1),!t||"onremovetrack"in L.TEST_VID.textTracks||(t=!1),t},L.supportsNativeVideoTracks=function(){var t=!!L.TEST_VID.videoTracks;return t},L.supportsNativeAudioTracks=function(){var t=!!L.TEST_VID.audioTracks;return t},L.Events=["loadstart","suspend","abort","error","emptied","stalled","loadedmetadata","loadeddata","canplay","canplaythrough","playing","waiting","seeking","seeked","ended","durationchange","timeupdate","progress","play","pause","ratechange","volumechange"],L.prototype.featuresVolumeControl=L.canControlVolume(),L.prototype.featuresPlaybackRate=L.canControlPlaybackRate(),L.prototype.movingMediaElementInDOM=!E.IS_IOS,L.prototype.featuresFullscreenResize=!0,L.prototype.featuresProgressEvents=!0,L.prototype.featuresNativeTextTracks=L.supportsNativeTextTracks(),L.prototype.featuresNativeVideoTracks=L.supportsNativeVideoTracks(),L.prototype.featuresNativeAudioTracks=L.supportsNativeAudioTracks();var D=void 0,F=/^application\/(?:x-|vnd\.apple\.)mpegurl/i,B=/^video\/mp4/i;L.patchCanPlayType=function(){E.ANDROID_VERSION>=4&&(D||(D=L.TEST_VID.constructor.prototype.canPlayType),L.TEST_VID.constructor.prototype.canPlayType=function(t){return t&&F.test(t)?"maybe":D.call(this,t)}),E.IS_OLD_ANDROID&&(D||(D=L.TEST_VID.constructor.prototype.canPlayType),L.TEST_VID.constructor.prototype.canPlayType=function(t){return t&&B.test(t)?"maybe":D.call(this,t)})},L.unpatchCanPlayType=function(){var t=L.TEST_VID.constructor.prototype.canPlayType;return L.TEST_VID.constructor.prototype.canPlayType=D,D=null,t},L.patchCanPlayType(),L.disposeMediaElement=function(t){if(t){for(t.parentNode&&t.parentNode.removeChild(t);t.hasChildNodes();)t.removeChild(t.firstChild);t.removeAttribute("src"),"function"==typeof t.load&&!function(){try{t.load()}catch(e){}}()}},L.resetMediaElement=function(t){if(t){for(var e=t.querySelectorAll("source"),n=e.length;n--;)t.removeChild(e[n]);t.removeAttribute("src"),"function"==typeof t.load&&!function(){try{t.load()}catch(e){}}()}},f["default"].registerComponent("Html5",L),c["default"].registerTech("Html5",L),n["default"]=L,e.exports=n["default"]},{"../../../src/js/tracks/text-track.js":134,"../component":67,"../utils/browser.js":140,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options.js":148,"../utils/to-title-case.js":151,"../utils/url.js":152,"./tech.js":124,"global/document":1,"global/window":2,"object.assign":45,tsml:55}],123:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var s=t("../component.js"),a=r(s),l=t("./tech.js"),u=r(l),c=t("global/window"),p=(r(c),t("../utils/to-title-case.js")),f=r(p),d=function(t){function e(n,r,i){if(o(this,e),t.call(this,n,r,i),r.playerOptions.sources&&0!==r.playerOptions.sources.length)n.src(r.playerOptions.sources);else for(var s=0,l=r.playerOptions.techOrder;s<l.length;s++){var c=f["default"](l[s]),p=u["default"].getTech(c);if(c||(p=a["default"].getComponent(c)),p&&p.isSupported()){n.loadTech_(c);break}}}return i(e,t),e}(a["default"]);a["default"].registerComponent("MediaLoader",d),n["default"]=d,e.exports=n["default"]},{"../component.js":67,"../utils/to-title-case.js":151,"./tech.js":124,"global/window":2}],124:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../component"),l=o(a),u=t("../tracks/html-track-element"),c=o(u),p=t("../tracks/html-track-element-list"),f=o(p),d=t("../utils/merge-options.js"),h=o(d),y=t("../tracks/text-track"),g=o(y),v=t("../tracks/text-track-list"),m=o(v),b=t("../tracks/video-track"),_=(o(b),t("../tracks/video-track-list")),j=o(_),T=t("../tracks/audio-track-list"),w=o(T),k=t("../tracks/audio-track"),E=(o(k),t("../utils/fn.js")),C=r(E),O=t("../utils/log.js"),x=o(O),S=t("../utils/time-ranges.js"),P=t("../utils/buffer.js"),M=t("../media-error.js"),A=o(M),R=t("global/window"),I=o(R),V=t("global/document"),L=o(V),N=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],r=arguments.length<=1||void 0===arguments[1]?function(){}:arguments[1];i(this,e),n.reportTouchActivity=!1,t.call(this,null,n,r),this.hasStarted_=!1,this.on("playing",function(){this.hasStarted_=!0}),this.on("loadstart",function(){this.hasStarted_=!1}),this.textTracks_=n.textTracks,this.videoTracks_=n.videoTracks,this.audioTracks_=n.audioTracks,this.featuresProgressEvents||this.manualProgressOn(),this.featuresTimeupdateEvents||this.manualTimeUpdatesOn(),(n.nativeCaptions===!1||n.nativeTextTracks===!1)&&(this.featuresNativeTextTracks=!1),this.featuresNativeTextTracks||this.on("ready",this.emulateTextTracks),this.initTextTrackListeners(),this.initTrackListeners(),this.emitTapEvents()}return s(e,t),e.prototype.manualProgressOn=function(){this.on("durationchange",this.onDurationChange),this.manualProgress=!0,this.one("ready",this.trackProgress)},e.prototype.manualProgressOff=function(){this.manualProgress=!1,this.stopTrackingProgress(),this.off("durationchange",this.onDurationChange)},e.prototype.trackProgress=function(){this.stopTrackingProgress(),this.progressInterval=this.setInterval(C.bind(this,function(){var t=this.bufferedPercent();this.bufferedPercent_!==t&&this.trigger("progress"),this.bufferedPercent_=t,1===t&&this.stopTrackingProgress()}),500)},e.prototype.onDurationChange=function(){this.duration_=this.duration()},e.prototype.buffered=function(){return S.createTimeRange(0,0)},e.prototype.bufferedPercent=function(){return P.bufferedPercent(this.buffered(),this.duration_)},e.prototype.stopTrackingProgress=function(){this.clearInterval(this.progressInterval)},e.prototype.manualTimeUpdatesOn=function(){this.manualTimeUpdates=!0,this.on("play",this.trackCurrentTime),this.on("pause",this.stopTrackingCurrentTime)},e.prototype.manualTimeUpdatesOff=function(){this.manualTimeUpdates=!1,this.stopTrackingCurrentTime(),this.off("play",this.trackCurrentTime),this.off("pause",this.stopTrackingCurrentTime)},e.prototype.trackCurrentTime=function(){this.currentTimeInterval&&this.stopTrackingCurrentTime(),this.currentTimeInterval=this.setInterval(function(){this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},250)},e.prototype.stopTrackingCurrentTime=function(){this.clearInterval(this.currentTimeInterval),this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},e.prototype.dispose=function(){this.clearTracks(["audio","video","text"]),this.manualProgress&&this.manualProgressOff(),this.manualTimeUpdates&&this.manualTimeUpdatesOff(),t.prototype.dispose.call(this)},e.prototype.clearTracks=function(t){var e=this;t=[].concat(t),t.forEach(function(t){for(var n=e[t+"Tracks"]()||[],r=n.length;r--;){var o=n[r];"text"===t&&e.removeRemoteTextTrack(o),n.removeTrack_(o)}})},e.prototype.reset=function(){},e.prototype.error=function(t){return void 0!==t&&(this.error_=new A["default"](t),this.trigger("error")),this.error_},e.prototype.played=function(){return this.hasStarted_?S.createTimeRange(0,0):S.createTimeRange()},e.prototype.setCurrentTime=function(){this.manualTimeUpdates&&this.trigger({type:"timeupdate",target:this,manuallyTriggered:!0})},e.prototype.initTextTrackListeners=function(){var t=C.bind(this,function(){this.trigger("texttrackchange")}),e=this.textTracks();e&&(e.addEventListener("removetrack",t),e.addEventListener("addtrack",t),this.on("dispose",C.bind(this,function(){e.removeEventListener("removetrack",t),e.removeEventListener("addtrack",t)})))},e.prototype.initTrackListeners=function(){var t=this,e=["video","audio"];e.forEach(function(e){var n=function(){t.trigger(e+"trackchange")},r=t[e+"Tracks"]();r.addEventListener("removetrack",n),r.addEventListener("addtrack",n),t.on("dispose",function(){r.removeEventListener("removetrack",n),r.removeEventListener("addtrack",n)})})},e.prototype.emulateTextTracks=function(){var t=this,e=this.textTracks();if(e){I["default"].WebVTT||null==this.el().parentNode||!function(){var e=L["default"].createElement("script");e.src=t.options_["vtt.js"]||"https://cdn.rawgit.com/gkatsev/vtt.js/vjs-v0.12.1/dist/vtt.min.js",e.onload=function(){t.trigger("vttjsloaded")},e.onerror=function(){t.trigger("vttjserror")},t.on("dispose",function(){e.onload=null,e.onerror=null}),I["default"].WebVTT=!0,t.el().parentNode.appendChild(e)}();var n=function(){return t.trigger("texttrackchange")},r=function(){n();for(var t=0;t<e.length;t++){var r=e[t];r.removeEventListener("cuechange",n),"showing"===r.mode&&r.addEventListener("cuechange",n)}};r(),e.addEventListener("change",r),this.on("dispose",function(){e.removeEventListener("change",r)})}},e.prototype.videoTracks=function(){return this.videoTracks_=this.videoTracks_||new j["default"],this.videoTracks_},e.prototype.audioTracks=function(){return this.audioTracks_=this.audioTracks_||new w["default"],this.audioTracks_},e.prototype.textTracks=function(){return this.textTracks_=this.textTracks_||new m["default"],this.textTracks_},e.prototype.remoteTextTracks=function(){return this.remoteTextTracks_=this.remoteTextTracks_||new m["default"],this.remoteTextTracks_},e.prototype.remoteTextTrackEls=function(){return this.remoteTextTrackEls_=this.remoteTextTrackEls_||new f["default"],this.remoteTextTrackEls_},e.prototype.addTextTrack=function(t,e,n){if(!t)throw new Error("TextTrack kind is required but was not provided");return D(this,t,e,n)},e.prototype.addRemoteTextTrack=function(t){var e=h["default"](t,{tech:this}),n=new c["default"](e);return this.remoteTextTrackEls().addTrackElement_(n),this.remoteTextTracks().addTrack_(n.track),this.textTracks().addTrack_(n.track),n},e.prototype.removeRemoteTextTrack=function(t){this.textTracks().removeTrack_(t);var e=this.remoteTextTrackEls().getTrackElementByTrack_(t);this.remoteTextTrackEls().removeTrackElement_(e),this.remoteTextTracks().removeTrack_(t)},e.prototype.setPoster=function(){},e.prototype.canPlayType=function(){return""},e.isTech=function(t){return t.prototype instanceof e||t instanceof e||t===e},e.registerTech=function(t,n){if(e.techs_||(e.techs_={}),!e.isTech(n))throw new Error("Tech "+t+" must be a Tech");return e.techs_[t]=n,n},e.getTech=function(t){return e.techs_&&e.techs_[t]?e.techs_[t]:I["default"]&&I["default"].videojs&&I["default"].videojs[t]?(x["default"].warn("The "+t+" tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)"),I["default"].videojs[t]):void 0},e}(l["default"]);N.prototype.textTracks_,N.prototype.audioTracks_,N.prototype.videoTracks_;var D=function(t,e,n,r){var o=arguments.length<=4||void 0===arguments[4]?{}:arguments[4],i=t.textTracks();
o.kind=e,n&&(o.label=n),r&&(o.language=r),o.tech=t;var s=new g["default"](o);return i.addTrack_(s),s};N.prototype.featuresVolumeControl=!0,N.prototype.featuresFullscreenResize=!1,N.prototype.featuresPlaybackRate=!1,N.prototype.featuresProgressEvents=!1,N.prototype.featuresTimeupdateEvents=!1,N.prototype.featuresNativeTextTracks=!1,N.withSourceHandlers=function(t){t.registerSourceHandler=function(e,n){var r=t.sourceHandlers;r||(r=t.sourceHandlers=[]),void 0===n&&(n=r.length),r.splice(n,0,e)},t.canPlayType=function(e){for(var n=t.sourceHandlers||[],r=void 0,o=0;o<n.length;o++)if(r=n[o].canPlayType(e))return r;return""},t.selectSourceHandler=function(e,n){for(var r=t.sourceHandlers||[],o=void 0,i=0;i<r.length;i++)if(o=r[i].canHandleSource(e,n))return r[i];return null},t.canPlaySource=function(e,n){var r=t.selectSourceHandler(e,n);return r?r.canHandleSource(e,n):""};var e=["seekable","duration"];e.forEach(function(t){var e=this[t];"function"==typeof e&&(this[t]=function(){return this.sourceHandler_&&this.sourceHandler_[t]?this.sourceHandler_[t].apply(this.sourceHandler_,arguments):e.apply(this,arguments)})},t.prototype),t.prototype.setSource=function(e){var n=t.selectSourceHandler(e,this.options_);return n||(t.nativeSourceHandler?n=t.nativeSourceHandler:x["default"].error("No source hander found for the current source.")),this.disposeSourceHandler(),this.off("dispose",this.disposeSourceHandler),this.currentSource_&&(this.clearTracks(["audio","video"]),this.currentSource_=null),n!==t.nativeSourceHandler&&(this.currentSource_=e,this.off(this.el_,"loadstart",t.prototype.firstLoadStartListener_),this.off(this.el_,"loadstart",t.prototype.successiveLoadStartListener_),this.one(this.el_,"loadstart",t.prototype.firstLoadStartListener_)),this.sourceHandler_=n.handleSource(e,this,this.options_),this.on("dispose",this.disposeSourceHandler),this},t.prototype.firstLoadStartListener_=function(){this.one(this.el_,"loadstart",t.prototype.successiveLoadStartListener_)},t.prototype.successiveLoadStartListener_=function(){this.currentSource_=null,this.disposeSourceHandler(),this.one(this.el_,"loadstart",t.prototype.successiveLoadStartListener_)},t.prototype.disposeSourceHandler=function(){this.sourceHandler_&&this.sourceHandler_.dispose&&(this.off(this.el_,"loadstart",t.prototype.firstLoadStartListener_),this.off(this.el_,"loadstart",t.prototype.successiveLoadStartListener_),this.sourceHandler_.dispose(),this.sourceHandler_=null)}},l["default"].registerComponent("Tech",N),l["default"].registerComponent("MediaTechController",N),N.registerTech("Tech",N),n["default"]=N,e.exports=n["default"]},{"../component":67,"../media-error.js":108,"../tracks/audio-track":126,"../tracks/audio-track-list":125,"../tracks/html-track-element":128,"../tracks/html-track-element-list":127,"../tracks/text-track":134,"../tracks/text-track-list":132,"../tracks/video-track":139,"../tracks/video-track-list":138,"../utils/buffer.js":141,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options.js":148,"../utils/time-ranges.js":150,"global/document":1,"global/window":2}],125:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./track-list"),l=o(a),u=t("../utils/browser.js"),c=r(u),p=t("global/document"),f=o(p),d=function(t,e){for(var n=0;n<t.length;n++)e.id!==t[n].id&&(t[n].enabled=!1)},h=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?[]:arguments[0];i(this,e);for(var r=void 0,o=n.length-1;o>=0;o--)if(n[o].enabled){d(n,n[o]);break}if(c.IS_IE8){r=f["default"].createElement("custom");for(var s in l["default"].prototype)"constructor"!==s&&(r[s]=l["default"].prototype[s]);for(var s in e.prototype)"constructor"!==s&&(r[s]=e.prototype[s])}return r=t.call(this,n,r),r.changing_=!1,r}return s(e,t),e.prototype.addTrack_=function(e){var n=this;e.enabled&&d(this,e),t.prototype.addTrack_.call(this,e),e.addEventListener&&e.addEventListener("enabledchange",function(){n.changing_||(n.changing_=!0,d(n,e),n.changing_=!1,n.trigger("change"))})},e.prototype.addTrack=function(t){this.addTrack_(t)},e.prototype.removeTrack=function(e){t.prototype.removeTrack_.call(this,e)},e}(l["default"]);n["default"]=h,e.exports=n["default"]},{"../utils/browser.js":140,"./track-list":136,"global/document":1}],126:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./track-enums"),l=t("./track"),u=o(l),c=t("../utils/merge-options"),p=o(c),f=t("../utils/browser.js"),d=r(f),h=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];i(this,e);var r=p["default"](n,{kind:a.AudioTrackKind[n.kind]||""}),o=t.call(this,r),s=!1;if(d.IS_IE8)for(var l in e.prototype)"constructor"!==l&&(o[l]=e.prototype[l]);return Object.defineProperty(o,"enabled",{get:function(){return s},set:function(t){"boolean"==typeof t&&t!==s&&(s=t,this.trigger("enabledchange"))}}),r.enabled&&(o.enabled=r.enabled),o.loaded_=!0,o}return s(e,t),e}(u["default"]);n["default"]=h,e.exports=n["default"]},{"../utils/browser.js":140,"../utils/merge-options":148,"./track":137,"./track-enums":135}],127:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n.__esModule=!0;var s=t("../utils/browser.js"),a=o(s),l=t("global/document"),u=r(l),c=function(){function t(){var e=arguments.length<=0||void 0===arguments[0]?[]:arguments[0];i(this,t);var n=this;if(a.IS_IE8){n=u["default"].createElement("custom");for(var r in t.prototype)"constructor"!==r&&(n[r]=t.prototype[r])}n.trackElements_=[],Object.defineProperty(n,"length",{get:function(){return this.trackElements_.length}});for(var o=0,s=e.length;s>o;o++)n.addTrackElement_(e[o]);return a.IS_IE8?n:void 0}return t.prototype.addTrackElement_=function(t){this.trackElements_.push(t)},t.prototype.getTrackElementByTrack_=function(t){for(var e=void 0,n=0,r=this.trackElements_.length;r>n;n++)if(t===this.trackElements_[n].track){e=this.trackElements_[n];break}return e},t.prototype.removeTrackElement_=function(t){for(var e=0,n=this.trackElements_.length;n>e;e++)if(t===this.trackElements_[e]){this.trackElements_.splice(e,1);break}},t}();n["default"]=c,e.exports=n["default"]},{"../utils/browser.js":140,"global/document":1}],128:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../utils/browser.js"),l=o(a),u=t("global/document"),c=r(u),p=t("../event-target"),f=r(p),d=t("../tracks/text-track"),h=r(d),y=0,g=1,v=2,m=3,b=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];i(this,e),t.call(this);var r=void 0,o=this;if(l.IS_IE8){o=c["default"].createElement("custom");for(var s in e.prototype)"constructor"!==s&&(o[s]=e.prototype[s])}var a=new h["default"](n);return o.kind=a.kind,o.src=a.src,o.srclang=a.language,o.label=a.label,o["default"]=a["default"],Object.defineProperty(o,"readyState",{get:function(){return r}}),Object.defineProperty(o,"track",{get:function(){return a}}),r=y,a.addEventListener("loadeddata",function(){r=v,o.trigger({type:"load",target:o})}),l.IS_IE8?o:void 0}return s(e,t),e}(f["default"]);b.prototype.allowedEvents_={load:"load"},b.NONE=y,b.LOADING=g,b.LOADED=v,b.ERROR=m,n["default"]=b,e.exports=n["default"]},{"../event-target":104,"../tracks/text-track":134,"../utils/browser.js":140,"global/document":1}],129:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}n.__esModule=!0;var s=t("../utils/browser.js"),a=o(s),l=t("global/document"),u=r(l),c=function(){function t(e){i(this,t);var n=this;if(a.IS_IE8){n=u["default"].createElement("custom");for(var r in t.prototype)"constructor"!==r&&(n[r]=t.prototype[r])}return t.prototype.setCues_.call(n,e),Object.defineProperty(n,"length",{get:function(){return this.length_}}),a.IS_IE8?n:void 0}return t.prototype.setCues_=function(t){var e=this.length||0,n=0,r=t.length;this.cues_=t,this.length_=t.length;var o=function(t){""+t in this||Object.defineProperty(this,""+t,{get:function(){return this.cues_[t]}})};if(r>e)for(n=e;r>n;n++)o.call(this,n)},t.prototype.getCueById=function(t){for(var e=null,n=0,r=this.length;r>n;n++){var o=this[n];if(o.id===t){e=o;break}}return e},t}();n["default"]=c,e.exports=n["default"]},{"../utils/browser.js":140,"global/document":1}],130:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t,e){return"rgba("+parseInt(t[1]+t[1],16)+","+parseInt(t[2]+t[2],16)+","+parseInt(t[3]+t[3],16)+","+e+")"}function l(t,e,n){try{t.style[e]=n}catch(r){}}n.__esModule=!0;var u=t("../component"),c=o(u),p=t("../menu/menu.js"),f=(o(p),t("../menu/menu-item.js")),d=(o(f),t("../menu/menu-button.js")),h=(o(d),t("../utils/fn.js")),y=r(h),g=t("global/document"),v=(o(g),t("global/window")),m=o(v),b="#222",_="#ccc",j={monospace:"monospace",sansSerif:"sans-serif",serif:"serif",monospaceSansSerif:'"Andale Mono", "Lucida Console", monospace',monospaceSerif:'"Courier New", monospace',proportionalSansSerif:"sans-serif",proportionalSerif:"serif",casual:'"Comic Sans MS", Impact, fantasy',script:'"Monotype Corsiva", cursive',smallcaps:'"Andale Mono", "Lucida Console", monospace, sans-serif'},T=function(t){function e(n,r,o){i(this,e),t.call(this,n,r,o),n.on("loadstart",y.bind(this,this.toggleDisplay)),n.on("texttrackchange",y.bind(this,this.updateDisplay)),n.ready(y.bind(this,function(){if(n.tech_&&n.tech_.featuresNativeTextTracks)return this.hide(),void 0;n.on("fullscreenchange",y.bind(this,this.updateDisplay));for(var t=this.options_.playerOptions.tracks||[],e=0;e<t.length;e++){var r=t[e];this.player_.addRemoteTextTrack(r)}var o={captions:1,subtitles:1},i=this.player_.textTracks(),s=void 0,a=void 0;if(i){for(var e=0;e<i.length;e++){var r=i[e];r["default"]&&("descriptions"!==r.kind||s?r.kind in o&&!a&&(a=r):s=r)}a?a.mode="showing":s&&(s.mode="showing")}}))}return s(e,t),e.prototype.toggleDisplay=function(){this.player_.tech_&&this.player_.tech_.featuresNativeTextTracks?this.hide():this.show()},e.prototype.createEl=function(){return t.prototype.createEl.call(this,"div",{className:"vjs-text-track-display"},{"aria-live":"assertive","aria-atomic":"true"})},e.prototype.clearDisplay=function(){"function"==typeof m["default"].WebVTT&&m["default"].WebVTT.processCues(m["default"],[],this.el_)},e.prototype.updateDisplay=function(){var t=this.player_.textTracks();if(this.clearDisplay(),t){for(var e=null,n=null,r=t.length;r--;){var o=t[r];"showing"===o.mode&&("descriptions"===o.kind?e=o:n=o)}n?this.updateForTrack(n):e&&this.updateForTrack(e)}},e.prototype.updateForTrack=function(t){if("function"==typeof m["default"].WebVTT&&t.activeCues){for(var e=this.player_.textTrackSettings.getValues(),n=[],r=0;r<t.activeCues.length;r++)n.push(t.activeCues[r]);m["default"].WebVTT.processCues(m["default"],n,this.el_);for(var o=n.length;o--;){var i=n[o];if(i){var s=i.displayState;if(e.color&&(s.firstChild.style.color=e.color),e.textOpacity&&l(s.firstChild,"color",a(e.color||"#fff",e.textOpacity)),e.backgroundColor&&(s.firstChild.style.backgroundColor=e.backgroundColor),e.backgroundOpacity&&l(s.firstChild,"backgroundColor",a(e.backgroundColor||"#000",e.backgroundOpacity)),e.windowColor&&(e.windowOpacity?l(s,"backgroundColor",a(e.windowColor,e.windowOpacity)):s.style.backgroundColor=e.windowColor),e.edgeStyle&&("dropshadow"===e.edgeStyle?s.firstChild.style.textShadow="2px 2px 3px "+b+", 2px 2px 4px "+b+", 2px 2px 5px "+b:"raised"===e.edgeStyle?s.firstChild.style.textShadow="1px 1px "+b+", 2px 2px "+b+", 3px 3px "+b:"depressed"===e.edgeStyle?s.firstChild.style.textShadow="1px 1px "+_+", 0 1px "+_+", -1px -1px "+b+", 0 -1px "+b:"uniform"===e.edgeStyle&&(s.firstChild.style.textShadow="0 0 4px "+b+", 0 0 4px "+b+", 0 0 4px "+b+", 0 0 4px "+b)),e.fontPercent&&1!==e.fontPercent){var u=m["default"].parseFloat(s.style.fontSize);s.style.fontSize=u*e.fontPercent+"px",s.style.height="auto",s.style.top="auto",s.style.bottom="2px"}e.fontFamily&&"default"!==e.fontFamily&&("small-caps"===e.fontFamily?s.firstChild.style.fontVariant="small-caps":s.firstChild.style.fontFamily=j[e.fontFamily])}}}},e}(c["default"]);c["default"].registerComponent("TextTrackDisplay",T),n["default"]=T,e.exports=n["default"]},{"../component":67,"../menu/menu-button.js":109,"../menu/menu-item.js":110,"../menu/menu.js":111,"../utils/fn.js":144,"global/document":1,"global/window":2}],131:[function(t,e,n){"use strict";n.__esModule=!0;var r=function(t){var e=["kind","label","language","id","inBandMetadataTrackDispatchType","mode","src"].reduce(function(e,n){return t[n]&&(e[n]=t[n]),e},{cues:t.cues&&Array.prototype.map.call(t.cues,function(t){return{startTime:t.startTime,endTime:t.endTime,text:t.text,id:t.id}})});return e},o=function(t){var e=t.$$("track"),n=Array.prototype.map.call(e,function(t){return t.track}),o=Array.prototype.map.call(e,function(t){var e=r(t.track);return t.src&&(e.src=t.src),e});return o.concat(Array.prototype.filter.call(t.textTracks(),function(t){return-1===n.indexOf(t)}).map(r))},i=function(t,e){return t.forEach(function(t){var n=e.addRemoteTextTrack(t).track;!t.src&&t.cues&&t.cues.forEach(function(t){return n.addCue(t)})}),e.textTracks()};n["default"]={textTracksToJson:o,jsonToTextTracks:i,trackToJson_:r},e.exports=n["default"]},{}],132:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./track-list"),l=o(a),u=t("../utils/fn.js"),c=r(u),p=t("../utils/browser.js"),f=r(p),d=t("global/document"),h=o(d),y=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?[]:arguments[0];i(this,e);var r=void 0;if(f.IS_IE8){r=h["default"].createElement("custom");for(var o in l["default"].prototype)"constructor"!==o&&(r[o]=l["default"].prototype[o]);for(var o in e.prototype)"constructor"!==o&&(r[o]=e.prototype[o])}return r=t.call(this,n,r)}return s(e,t),e.prototype.addTrack_=function(e){t.prototype.addTrack_.call(this,e),e.addEventListener("modechange",c.bind(this,function(){this.trigger("change")}))},e.prototype.removeTrack_=function(t){for(var e=void 0,n=0,r=this.length;r>n;n++)if(this[n]===t){e=this[n],e.off&&e.off(),this.tracks_.splice(n,1);break}e&&this.trigger({track:e,type:"removetrack"})},e.prototype.getTrackById=function(t){for(var e=null,n=0,r=this.length;r>n;n++){var o=this[n];if(o.id===t){e=o;break}}return e},e}(l["default"]);n["default"]=y,e.exports=n["default"]},{"../utils/browser.js":140,"../utils/fn.js":144,"./track-list":136,"global/document":1}],133:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}function a(t){var e=void 0;return t.selectedOptions?e=t.selectedOptions[0]:t.options&&(e=t.options[t.options.selectedIndex]),e.value}function l(t,e){if(e){var n=void 0;for(n=0;n<t.options.length;n++){var r=t.options[n];if(r.value===e)break}t.selectedIndex=n}}function u(t,e,n){var r='\n    <div role="document">\n      <div role="heading" aria-level="1" id="'+e+'" class="vjs-control-text">Captions Settings Dialog</div>\n      <div id="'+n+'" class="vjs-control-text">Beginning of dialog window. Escape will cancel and close the window.</div>\n      <div class="vjs-tracksettings">\n        <div class="vjs-tracksettings-colors">\n          <fieldset class="vjs-fg-color vjs-tracksetting">\n            <legend>Text</legend>\n            <label class="vjs-label" for="captions-foreground-color-'+t+'">Color</label>\n            <select id="captions-foreground-color-'+t+'">\n              <option value="#FFF" selected>White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-text-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-foreground-opacity-'+t+'">Transparency</label>\n              <select id="captions-foreground-opacity-'+t+'">\n                <option value="1" selected>Opaque</option>\n                <option value="0.5">Semi-Opaque</option>\n              </select>\n            </span>\n          </fieldset>\n          <fieldset class="vjs-bg-color vjs-tracksetting">\n            <legend>Background</legend>\n            <label class="vjs-label" for="captions-background-color-'+t+'">Color</label>\n            <select id="captions-background-color-'+t+'">\n              <option value="#000" selected>Black</option>\n              <option value="#FFF">White</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-bg-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-background-opacity-'+t+'">Transparency</label>\n              <select id="captions-background-opacity-'+t+'">\n                <option value="1" selected>Opaque</option>\n                <option value="0.5">Semi-Transparent</option>\n                <option value="0">Transparent</option>\n              </select>\n            </span>\n          </fieldset>\n          <fieldset class="window-color vjs-tracksetting">\n            <legend>Window</legend>\n            <label class="vjs-label" for="captions-window-color-'+t+'">Color</label>\n            <select id="captions-window-color-'+t+'">\n              <option value="#000" selected>Black</option>\n              <option value="#FFF">White</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-window-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-window-opacity-'+t+'">Transparency</label>\n              <select id="captions-window-opacity-'+t+'">\n                <option value="0" selected>Transparent</option>\n                <option value="0.5">Semi-Transparent</option>\n                <option value="1">Opaque</option>\n              </select>\n            </span>\n          </fieldset>\n        </div> <!-- vjs-tracksettings-colors -->\n        <div class="vjs-tracksettings-font">\n          <div class="vjs-font-percent vjs-tracksetting">\n            <label class="vjs-label" for="captions-font-size-'+t+'">Font Size</label>\n            <select id="captions-font-size-'+t+'">\n              <option value="0.50">50%</option>\n              <option value="0.75">75%</option>\n              <option value="1.00" selected>100%</option>\n              <option value="1.25">125%</option>\n              <option value="1.50">150%</option>\n              <option value="1.75">175%</option>\n              <option value="2.00">200%</option>\n              <option value="3.00">300%</option>\n              <option value="4.00">400%</option>\n            </select>\n          </div>\n          <div class="vjs-edge-style vjs-tracksetting">\n            <label class="vjs-label" for="captions-edge-style-'+t+'">Text Edge Style</label>\n            <select id="captions-edge-style-'+t+'">\n              <option value="none" selected>None</option>\n              <option value="raised">Raised</option>\n              <option value="depressed">Depressed</option>\n              <option value="uniform">Uniform</option>\n              <option value="dropshadow">Dropshadow</option>\n            </select>\n          </div>\n          <div class="vjs-font-family vjs-tracksetting">\n            <label class="vjs-label" for="captions-font-family-'+t+'">Font Family</label>\n            <select id="captions-font-family-'+t+'">\n              <option value="proportionalSansSerif" selected>Proportional Sans-Serif</option>\n              <option value="monospaceSansSerif">Monospace Sans-Serif</option>\n              <option value="proportionalSerif">Proportional Serif</option>\n              <option value="monospaceSerif">Monospace Serif</option>\n              <option value="casual">Casual</option>\n              <option value="script">Script</option>\n              <option value="small-caps">Small Caps</option>\n            </select>\n          </div>\n        </div> <!-- vjs-tracksettings-font -->\n        <div class="vjs-tracksettings-controls">\n          <button class="vjs-default-button">Defaults</button>\n          <button class="vjs-done-button">Done</button>\n        </div>\n      </div> <!-- vjs-tracksettings -->\n    </div> <!--  role="document" -->';return r}n.__esModule=!0;var c=t("../component"),p=o(c),f=t("../utils/events.js"),d=r(f),h=t("../utils/fn.js"),y=r(h),g=t("../utils/log.js"),v=o(g),m=t("safe-json-parse/tuple"),b=o(m),_=t("global/window"),j=o(_),T=function(t){function e(n,r){i(this,e),t.call(this,n,r),this.hide(),void 0===r.persistTextTrackSettings&&(this.options_.persistTextTrackSettings=this.options_.playerOptions.persistTextTrackSettings),d.on(this.$(".vjs-done-button"),"click",y.bind(this,function(){this.saveSettings(),this.hide()})),d.on(this.$(".vjs-default-button"),"click",y.bind(this,function(){this.$(".vjs-fg-color > select").selectedIndex=0,this.$(".vjs-bg-color > select").selectedIndex=0,this.$(".window-color > select").selectedIndex=0,this.$(".vjs-text-opacity > select").selectedIndex=0,this.$(".vjs-bg-opacity > select").selectedIndex=0,this.$(".vjs-window-opacity > select").selectedIndex=0,this.$(".vjs-edge-style select").selectedIndex=0,this.$(".vjs-font-family select").selectedIndex=0,this.$(".vjs-font-percent select").selectedIndex=2,this.updateDisplay()})),d.on(this.$(".vjs-fg-color > select"),"change",y.bind(this,this.updateDisplay)),d.on(this.$(".vjs-bg-color > select"),"change",y.bind(this,this.updateDisplay)),d.on(this.$(".window-color > select"),"change",y.bind(this,this.updateDisplay)),d.on(this.$(".vjs-text-opacity > select"),"change",y.bind(this,this.updateDisplay)),d.on(this.$(".vjs-bg-opacity > select"),"change",y.bind(this,this.updateDisplay)),d.on(this.$(".vjs-window-opacity > select"),"change",y.bind(this,this.updateDisplay)),d.on(this.$(".vjs-font-percent select"),"change",y.bind(this,this.updateDisplay)),d.on(this.$(".vjs-edge-style select"),"change",y.bind(this,this.updateDisplay)),d.on(this.$(".vjs-font-family select"),"change",y.bind(this,this.updateDisplay)),this.options_.persistTextTrackSettings&&this.restoreSettings()}return s(e,t),e.prototype.createEl=function(){var e=this.id_,n="TTsettingsDialogLabel-"+e,r="TTsettingsDialogDescription-"+e;return t.prototype.createEl.call(this,"div",{className:"vjs-caption-settings vjs-modal-overlay",innerHTML:u(e,n,r),tabIndex:-1},{role:"dialog","aria-labelledby":n,"aria-describedby":r})},e.prototype.getValues=function(){var t=a(this.$(".vjs-edge-style select")),e=a(this.$(".vjs-font-family select")),n=a(this.$(".vjs-fg-color > select")),r=a(this.$(".vjs-text-opacity > select")),o=a(this.$(".vjs-bg-color > select")),i=a(this.$(".vjs-bg-opacity > select")),s=a(this.$(".window-color > select")),l=a(this.$(".vjs-window-opacity > select")),u=j["default"].parseFloat(a(this.$(".vjs-font-percent > select"))),c={backgroundOpacity:i,textOpacity:r,windowOpacity:l,edgeStyle:t,fontFamily:e,color:n,backgroundColor:o,windowColor:s,fontPercent:u};for(var p in c)(""===c[p]||"none"===c[p]||"fontPercent"===p&&1===c[p])&&delete c[p];return c},e.prototype.setValues=function(t){l(this.$(".vjs-edge-style select"),t.edgeStyle),l(this.$(".vjs-font-family select"),t.fontFamily),l(this.$(".vjs-fg-color > select"),t.color),l(this.$(".vjs-text-opacity > select"),t.textOpacity),l(this.$(".vjs-bg-color > select"),t.backgroundColor),l(this.$(".vjs-bg-opacity > select"),t.backgroundOpacity),l(this.$(".window-color > select"),t.windowColor),l(this.$(".vjs-window-opacity > select"),t.windowOpacity);var e=t.fontPercent;e&&(e=e.toFixed(2)),l(this.$(".vjs-font-percent > select"),e)},e.prototype.restoreSettings=function(){var t=void 0,e=void 0;try{var n=b["default"](j["default"].localStorage.getItem("vjs-text-track-settings"));t=n[0],e=n[1],t&&v["default"].error(t)}catch(r){v["default"].warn(r)}e&&this.setValues(e)},e.prototype.saveSettings=function(){if(this.options_.persistTextTrackSettings){var t=this.getValues();try{Object.getOwnPropertyNames(t).length>0?j["default"].localStorage.setItem("vjs-text-track-settings",JSON.stringify(t)):j["default"].localStorage.removeItem("vjs-text-track-settings")}catch(e){v["default"].warn(e)}}},e.prototype.updateDisplay=function(){var t=this.player_.getChild("textTrackDisplay");t&&t.updateDisplay()},e}(p["default"]);p["default"].registerComponent("TextTrackSettings",T),n["default"]=T,e.exports=n["default"]},{"../component":67,"../utils/events.js":143,"../utils/fn.js":144,"../utils/log.js":147,"global/window":2,"safe-json-parse/tuple":54}],134:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./text-track-cue-list"),l=o(a),u=t("../utils/fn.js"),c=r(u),p=t("./track-enums"),f=t("../utils/log.js"),d=o(f),h=t("global/document"),y=(o(h),t("global/window")),g=o(y),v=t("./track.js"),m=o(v),b=t("../utils/url.js"),_=t("xhr"),j=o(_),T=t("../utils/merge-options"),w=o(T),k=t("../utils/browser.js"),E=r(k),C=function(t,e){var n=new g["default"].WebVTT.Parser(g["default"],g["default"].vttjs,g["default"].WebVTT.StringDecoder()),r=[];n.oncue=function(t){e.addCue(t)},n.onparsingerror=function(t){r.push(t)},n.onflush=function(){e.trigger({type:"loadeddata",target:e})},n.parse(t),r.length>0&&(console.groupCollapsed&&console.groupCollapsed("Text Track parsing errors for "+e.src),r.forEach(function(t){return d["default"].error(t)}),console.groupEnd&&console.groupEnd()),n.flush()},O=function(t,e){var n={uri:t},r=b.isCrossOrigin(t);r&&(n.cors=r),j["default"](n,c.bind(this,function(t,n,r){return t?d["default"].error(t,n):(e.loaded_=!0,"function"!=typeof g["default"].WebVTT?e.tech_&&!function(){var t=function(){return C(r,e)};e.tech_.on("vttjsloaded",t),e.tech_.on("vttjserror",function(){d["default"].error("vttjs failed to load, stopping trying to process "+e.src),e.tech_.off("vttjsloaded",t)})}():C(r,e),void 0)}))},x=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];if(i(this,e),!n.tech)throw new Error("A tech was not provided.");var r=w["default"](n,{kind:p.TextTrackKind[n.kind]||"subtitles",language:n.language||n.srclang||""}),o=p.TextTrackMode[r.mode]||"disabled",s=r["default"];("metadata"===r.kind||"chapters"===r.kind)&&(o="hidden");var a=t.call(this,r);if(a.tech_=r.tech,E.IS_IE8)for(var u in e.prototype)"constructor"!==u&&(a[u]=e.prototype[u]);a.cues_=[],a.activeCues_=[];var f=new l["default"](a.cues_),d=new l["default"](a.activeCues_),h=!1,y=c.bind(a,function(){this.activeCues,h&&(this.trigger("cuechange"),h=!1)});return"disabled"!==o&&a.tech_.on("timeupdate",y),Object.defineProperty(a,"default",{get:function(){return s},set:function(){}}),Object.defineProperty(a,"mode",{get:function(){return o},set:function(t){p.TextTrackMode[t]&&(o=t,"showing"===o&&this.tech_.on("timeupdate",y),this.trigger("modechange"))}}),Object.defineProperty(a,"cues",{get:function(){return this.loaded_?f:null
},set:function(){}}),Object.defineProperty(a,"activeCues",{get:function(){if(!this.loaded_)return null;if(0===this.cues.length)return d;for(var t=this.tech_.currentTime(),e=[],n=0,r=this.cues.length;r>n;n++){var o=this.cues[n];o.startTime<=t&&o.endTime>=t?e.push(o):o.startTime===o.endTime&&o.startTime<=t&&o.startTime+.5>=t&&e.push(o)}if(h=!1,e.length!==this.activeCues_.length)h=!0;else for(var n=0;n<e.length;n++)-1===this.activeCues_.indexOf(e[n])&&(h=!0);return this.activeCues_=e,d.setCues_(this.activeCues_),d},set:function(){}}),r.src?(a.src=r.src,O(r.src,a)):a.loaded_=!0,a}return s(e,t),e.prototype.addCue=function(t){var e=this.tech_.textTracks();if(e)for(var n=0;n<e.length;n++)e[n]!==this&&e[n].removeCue(t);this.cues_.push(t),this.cues.setCues_(this.cues_)},e.prototype.removeCue=function(t){for(var e=!1,n=0,r=this.cues_.length;r>n;n++){var o=this.cues_[n];o===t&&(this.cues_.splice(n,1),e=!0)}e&&this.cues.setCues_(this.cues_)},e}(m["default"]);x.prototype.allowedEvents_={cuechange:"cuechange"},n["default"]=x,e.exports=n["default"]},{"../utils/browser.js":140,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options":148,"../utils/url.js":152,"./text-track-cue-list":129,"./track-enums":135,"./track.js":137,"global/document":1,"global/window":2,xhr:56}],135:[function(t,e,n){"use strict";n.__esModule=!0;var r={alternative:"alternative",captions:"captions",main:"main",sign:"sign",subtitles:"subtitles",commentary:"commentary"},o={alternative:"alternative",descriptions:"descriptions",main:"main","main-desc":"main-desc",translation:"translation",commentary:"commentary"},i={subtitles:"subtitles",captions:"captions",descriptions:"descriptions",chapters:"chapters",metadata:"metadata"},s={disabled:"disabled",hidden:"hidden",showing:"showing"};n["default"]={VideoTrackKind:r,AudioTrackKind:o,TextTrackKind:i,TextTrackMode:s},e.exports=n["default"]},{}],136:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../event-target"),l=o(a),u=t("../utils/fn.js"),c=(r(u),t("../utils/browser.js")),p=r(c),f=t("global/document"),d=o(f),h=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?[]:arguments[0],r=arguments.length<=1||void 0===arguments[1]?null:arguments[1];if(i(this,e),t.call(this),!r&&(r=this,p.IS_IE8)){r=d["default"].createElement("custom");for(var o in e.prototype)"constructor"!==o&&(r[o]=e.prototype[o])}r.tracks_=[],Object.defineProperty(r,"length",{get:function(){return this.tracks_.length}});for(var s=0;s<n.length;s++)r.addTrack_(n[s]);return r}return s(e,t),e.prototype.addTrack_=function(t){var e=this.tracks_.length;""+e in this||Object.defineProperty(this,e,{get:function(){return this.tracks_[e]}}),-1===this.tracks_.indexOf(t)&&(this.tracks_.push(t),this.trigger({track:t,type:"addtrack"}))},e.prototype.removeTrack_=function(t){for(var e=void 0,n=0,r=this.length;r>n;n++)if(this[n]===t){e=this[n],e.off&&e.off(),this.tracks_.splice(n,1);break}e&&this.trigger({track:e,type:"removetrack"})},e.prototype.getTrackById=function(t){for(var e=null,n=0,r=this.length;r>n;n++){var o=this[n];if(o.id===t){e=o;break}}return e},e}(l["default"]);h.prototype.allowedEvents_={change:"change",addtrack:"addtrack",removetrack:"removetrack"};for(var y in h.prototype.allowedEvents_)h.prototype["on"+y]=null;n["default"]=h,e.exports=n["default"]},{"../event-target":104,"../utils/browser.js":140,"../utils/fn.js":144,"global/document":1}],137:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("../utils/browser.js"),l=o(a),u=t("global/document"),c=r(u),p=t("../utils/guid.js"),f=o(p),d=t("../event-target"),h=r(d),y=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];i(this,e),t.call(this);var r=this;if(l.IS_IE8){r=c["default"].createElement("custom");for(var o in e.prototype)"constructor"!==o&&(r[o]=e.prototype[o])}var s={id:n.id||"vjs_track_"+f.newGUID(),kind:n.kind||"",label:n.label||"",language:n.language||""},a=function(t){Object.defineProperty(r,t,{get:function(){return s[t]},set:function(){}})};for(var u in s)a(u);return r}return s(e,t),e}(h["default"]);n["default"]=y,e.exports=n["default"]},{"../event-target":104,"../utils/browser.js":140,"../utils/guid.js":146,"global/document":1}],138:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./track-list"),l=o(a),u=t("../utils/browser.js"),c=r(u),p=t("global/document"),f=o(p),d=function(t,e){for(var n=0;n<t.length;n++)e.id!==t[n].id&&(t[n].selected=!1)},h=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?[]:arguments[0];i(this,e);for(var r=void 0,o=n.length-1;o>=0;o--)if(n[o].selected){d(n,n[o]);break}if(c.IS_IE8){r=f["default"].createElement("custom");for(var s in l["default"].prototype)"constructor"!==s&&(r[s]=l["default"].prototype[s]);for(var s in e.prototype)"constructor"!==s&&(r[s]=e.prototype[s])}return r=t.call(this,n,r),r.changing_=!1,Object.defineProperty(r,"selectedIndex",{get:function(){for(var t=0;t<this.length;t++)if(this[t].selected)return t;return-1},set:function(){}}),r}return s(e,t),e.prototype.addTrack_=function(e){var n=this;e.selected&&d(this,e),t.prototype.addTrack_.call(this,e),e.addEventListener&&e.addEventListener("selectedchange",function(){n.changing_||(n.changing_=!0,d(n,e),n.changing_=!1,n.trigger("change"))})},e.prototype.addTrack=function(t){this.addTrack_(t)},e.prototype.removeTrack=function(e){t.prototype.removeTrack_.call(this,e)},e}(l["default"]);n["default"]=h,e.exports=n["default"]},{"../utils/browser.js":140,"./track-list":136,"global/document":1}],139:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}n.__esModule=!0;var a=t("./track-enums"),l=t("./track"),u=o(l),c=t("../utils/merge-options"),p=o(c),f=t("../utils/browser.js"),d=r(f),h=function(t){function e(){var n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];i(this,e);var r=p["default"](n,{kind:a.VideoTrackKind[n.kind]||""}),o=t.call(this,r),s=!1;if(d.IS_IE8)for(var l in e.prototype)"constructor"!==l&&(o[l]=e.prototype[l]);return Object.defineProperty(o,"selected",{get:function(){return s},set:function(t){"boolean"==typeof t&&t!==s&&(s=t,this.trigger("selectedchange"))}}),r.selected&&(o.selected=r.selected),o}return s(e,t),e}(u["default"]);n["default"]=h,e.exports=n["default"]},{"../utils/browser.js":140,"../utils/merge-options":148,"./track":137,"./track-enums":135}],140:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}n.__esModule=!0;var o=t("global/document"),i=r(o),s=t("global/window"),a=r(s),l=a["default"].navigator.userAgent,u=/AppleWebKit\/([\d.]+)/i.exec(l),c=u?parseFloat(u.pop()):null,p=/iPad/i.test(l);n.IS_IPAD=p;var f=/iPhone/i.test(l)&&!p;n.IS_IPHONE=f;var d=/iPod/i.test(l);n.IS_IPOD=d;var h=f||p||d;n.IS_IOS=h;var y=function(){var t=l.match(/OS (\d+)_/i);return t&&t[1]?t[1]:void 0}();n.IOS_VERSION=y;var g=/Android/i.test(l);n.IS_ANDROID=g;var v=function(){var t,e,n=l.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i);return n?(t=n[1]&&parseFloat(n[1]),e=n[2]&&parseFloat(n[2]),t&&e?parseFloat(n[1]+"."+n[2]):t?t:null):null}();n.ANDROID_VERSION=v;var m=g&&/webkit/i.test(l)&&2.3>v;n.IS_OLD_ANDROID=m;var b=g&&5>v&&537>c;n.IS_NATIVE_ANDROID=b;var _=/Firefox/i.test(l);n.IS_FIREFOX=_;var j=/Edge/i.test(l);n.IS_EDGE=j;var T=!j&&/Chrome/i.test(l);n.IS_CHROME=T;var w=/MSIE\s8\.0/.test(l);n.IS_IE8=w;var k=function(t){return t&&parseFloat(t[1])}(/MSIE\s(\d+)\.\d/.exec(l));n.IE_VERSION=k;var E=!!("ontouchstart"in a["default"]||a["default"].DocumentTouch&&i["default"]instanceof a["default"].DocumentTouch);n.TOUCH_ENABLED=E;var C="backgroundSize"in i["default"].createElement("video").style;n.BACKGROUND_SIZE_SUPPORTED=C},{"global/document":1,"global/window":2}],141:[function(t,e,n){"use strict";function r(t,e){var n,r,i=0;if(!e)return 0;t&&t.length||(t=o.createTimeRange(0,0));for(var s=0;s<t.length;s++)n=t.start(s),r=t.end(s),r>e&&(r=e),i+=r-n;return i/e}n.__esModule=!0,n.bufferedPercent=r;var o=t("./time-ranges.js")},{"./time-ranges.js":150}],142:[function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(t,e){return t.raw=e,t}function s(t){return"string"==typeof t&&/\S/.test(t)}function a(t){if(/\s/.test(t))throw new Error("class has illegal whitespace characters")}function l(t){return new RegExp("(^|\\s)"+t+"($|\\s)")}function u(t){return function(e,n){return s(e)?(s(n)&&(n=V["default"].querySelector(n)),(O(n)?n:V["default"])[t](e)):V["default"][t](null)}}function c(t){return 0===t.indexOf("#")&&(t=t.slice(1)),V["default"].getElementById(t)}function p(){var t=arguments.length<=0||void 0===arguments[0]?"div":arguments[0],e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],r=V["default"].createElement(t);return Object.getOwnPropertyNames(e).forEach(function(t){var n=e[t];-1!==t.indexOf("aria-")||"role"===t||"type"===t?(H["default"].warn($["default"](R,t,n)),r.setAttribute(t,n)):r[t]=n}),Object.getOwnPropertyNames(n).forEach(function(t){n[t];r.setAttribute(t,n[t])}),r}function f(t,e){"undefined"==typeof t.textContent?t.innerText=e:t.textContent=e}function d(t,e){e.firstChild?e.insertBefore(t,e.firstChild):e.appendChild(t)}function h(t){var e=t[q];return e||(e=t[q]=F.newGUID()),W[e]||(W[e]={}),W[e]}function y(t){var e=t[q];return e?!!Object.getOwnPropertyNames(W[e]).length:!1}function g(t){var e=t[q];if(e){delete W[e];try{delete t[q]}catch(n){t.removeAttribute?t.removeAttribute(q):t[q]=null}}}function v(t,e){return a(e),t.classList?t.classList.contains(e):l(e).test(t.className)}function m(t,e){return t.classList?t.classList.add(e):v(t,e)||(t.className=(t.className+" "+e).trim()),t}function b(t,e){return t.classList?t.classList.remove(e):(a(e),t.className=t.className.split(/\s+/).filter(function(t){return t!==e}).join(" ")),t}function _(t,e,n){var r=v(t,e);return"function"==typeof n&&(n=n(t,e)),"boolean"!=typeof n&&(n=!r),n!==r?(n?m(t,e):b(t,e),t):void 0}function j(t,e){Object.getOwnPropertyNames(e).forEach(function(n){var r=e[n];null===r||"undefined"==typeof r||r===!1?t.removeAttribute(n):t.setAttribute(n,r===!0?"":r)})}function T(t){var e,n,r,o,i;if(e={},n=",autoplay,controls,loop,muted,default,",t&&t.attributes&&t.attributes.length>0){r=t.attributes;for(var s=r.length-1;s>=0;s--)o=r[s].name,i=r[s].value,("boolean"==typeof t[o]||-1!==n.indexOf(","+o+","))&&(i=null!==i?!0:!1),e[o]=i}return e}function w(){V["default"].body.focus(),V["default"].onselectstart=function(){return!1}}function k(){V["default"].onselectstart=function(){return!0}}function E(t){var e=void 0;if(t.getBoundingClientRect&&t.parentNode&&(e=t.getBoundingClientRect()),!e)return{left:0,top:0};var n=V["default"].documentElement,r=V["default"].body,o=n.clientLeft||r.clientLeft||0,i=N["default"].pageXOffset||r.scrollLeft,s=e.left+i-o,a=n.clientTop||r.clientTop||0,l=N["default"].pageYOffset||r.scrollTop,u=e.top+l-a;return{left:Math.round(s),top:Math.round(u)}}function C(t,e){var n={},r=E(t),o=t.offsetWidth,i=t.offsetHeight,s=r.top,a=r.left,l=e.pageY,u=e.pageX;return e.changedTouches&&(u=e.changedTouches[0].pageX,l=e.changedTouches[0].pageY),n.y=Math.max(0,Math.min(1,(s-l+i)/i)),n.x=Math.max(0,Math.min(1,(u-a)/o)),n}function O(t){return!!t&&"object"==typeof t&&1===t.nodeType}function x(t){return!!t&&"object"==typeof t&&3===t.nodeType}function S(t){for(;t.firstChild;)t.removeChild(t.firstChild);return t}function P(t){return"function"==typeof t&&(t=t()),(Array.isArray(t)?t:[t]).map(function(t){return"function"==typeof t&&(t=t()),O(t)||x(t)?t:"string"==typeof t&&/\S/.test(t)?V["default"].createTextNode(t):void 0}).filter(function(t){return t})}function M(t,e){return P(e).forEach(function(e){return t.appendChild(e)}),t}function A(t,e){return M(S(t),e)}n.__esModule=!0,n.getEl=c,n.createEl=p,n.textContent=f,n.insertElFirst=d,n.getElData=h,n.hasElData=y,n.removeElData=g,n.hasElClass=v,n.addElClass=m,n.removeElClass=b,n.toggleElClass=_,n.setElAttributes=j,n.getElAttributes=T,n.blockTextSelection=w,n.unblockTextSelection=k,n.findElPosition=E,n.getPointerPosition=C,n.isEl=O,n.isTextNode=x,n.emptyEl=S,n.normalizeContent=P,n.appendContent=M,n.insertContent=A;var R=i(["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set "," to ","."],["Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set "," to ","."]),I=t("global/document"),V=o(I),L=t("global/window"),N=o(L),D=t("./guid.js"),F=r(D),B=t("./log.js"),H=o(B),U=t("tsml"),$=o(U),W={},q="vdata"+(new Date).getTime(),z=u("querySelector");n.$=z;var G=u("querySelectorAll");n.$$=G},{"./guid.js":146,"./log.js":147,"global/document":1,"global/window":2,tsml:55}],143:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t,e,n){if(Array.isArray(e))return p(i,t,e,n);var r=d.getElData(t);r.handlers||(r.handlers={}),r.handlers[e]||(r.handlers[e]=[]),n.guid||(n.guid=y.newGUID()),r.handlers[e].push(n),r.dispatcher||(r.disabled=!1,r.dispatcher=function(e,n){if(!r.disabled){e=u(e);var o=r.handlers[e.type];if(o)for(var i=o.slice(0),s=0,a=i.length;a>s&&!e.isImmediatePropagationStopped();s++)try{i[s].call(t,e,n)}catch(l){v["default"].error(l)}}}),1===r.handlers[e].length&&(t.addEventListener?t.addEventListener(e,r.dispatcher,!1):t.attachEvent&&t.attachEvent("on"+e,r.dispatcher))}function s(t,e,n){if(d.hasElData(t)){var r=d.getElData(t);if(r.handlers){if(Array.isArray(e))return p(s,t,e,n);var o=function(e){r.handlers[e]=[],c(t,e)};if(e){var i=r.handlers[e];if(i){if(!n)return o(e),void 0;if(n.guid)for(var a=0;a<i.length;a++)i[a].guid===n.guid&&i.splice(a--,1);c(t,e)}}else for(var l in r.handlers)o(l)}}}function a(t,e,n){var r=d.hasElData(t)?d.getElData(t):{},o=t.parentNode||t.ownerDocument;if("string"==typeof e&&(e={type:e,target:t}),e=u(e),r.dispatcher&&r.dispatcher.call(t,e,n),o&&!e.isPropagationStopped()&&e.bubbles===!0)a.call(null,o,e,n);else if(!o&&!e.defaultPrevented){var i=d.getElData(e.target);e.target[e.type]&&(i.disabled=!0,"function"==typeof e.target[e.type]&&e.target[e.type](),i.disabled=!1)}return!e.defaultPrevented}function l(t,e,n){if(Array.isArray(e))return p(l,t,e,n);var r=function o(){s(t,e,o),n.apply(this,arguments)};r.guid=n.guid=n.guid||y.newGUID(),i(t,e,r)}function u(t){function e(){return!0}function n(){return!1}if(!t||!t.isPropagationStopped){var r=t||b["default"].event;t={};for(var o in r)"layerX"!==o&&"layerY"!==o&&"keyLocation"!==o&&"webkitMovementX"!==o&&"webkitMovementY"!==o&&("returnValue"===o&&r.preventDefault||(t[o]=r[o]));if(t.target||(t.target=t.srcElement||j["default"]),t.relatedTarget||(t.relatedTarget=t.fromElement===t.target?t.toElement:t.fromElement),t.preventDefault=function(){r.preventDefault&&r.preventDefault(),t.returnValue=!1,r.returnValue=!1,t.defaultPrevented=!0},t.defaultPrevented=!1,t.stopPropagation=function(){r.stopPropagation&&r.stopPropagation(),t.cancelBubble=!0,r.cancelBubble=!0,t.isPropagationStopped=e},t.isPropagationStopped=n,t.stopImmediatePropagation=function(){r.stopImmediatePropagation&&r.stopImmediatePropagation(),t.isImmediatePropagationStopped=e,t.stopPropagation()},t.isImmediatePropagationStopped=n,null!=t.clientX){var i=j["default"].documentElement,s=j["default"].body;t.pageX=t.clientX+(i&&i.scrollLeft||s&&s.scrollLeft||0)-(i&&i.clientLeft||s&&s.clientLeft||0),t.pageY=t.clientY+(i&&i.scrollTop||s&&s.scrollTop||0)-(i&&i.clientTop||s&&s.clientTop||0)}t.which=t.charCode||t.keyCode,null!=t.button&&(t.button=1&t.button?0:4&t.button?1:2&t.button?2:0)}return t}function c(t,e){var n=d.getElData(t);0===n.handlers[e].length&&(delete n.handlers[e],t.removeEventListener?t.removeEventListener(e,n.dispatcher,!1):t.detachEvent&&t.detachEvent("on"+e,n.dispatcher)),Object.getOwnPropertyNames(n.handlers).length<=0&&(delete n.handlers,delete n.dispatcher,delete n.disabled),0===Object.getOwnPropertyNames(n).length&&d.removeElData(t)}function p(t,e,n,r){n.forEach(function(n){t(e,n,r)})}n.__esModule=!0,n.on=i,n.off=s,n.trigger=a,n.one=l,n.fixEvent=u;var f=t("./dom.js"),d=o(f),h=t("./guid.js"),y=o(h),g=t("./log.js"),v=r(g),m=t("global/window"),b=r(m),_=t("global/document"),j=r(_)},{"./dom.js":142,"./guid.js":146,"./log.js":147,"global/document":1,"global/window":2}],144:[function(t,e,n){"use strict";n.__esModule=!0;var r=t("./guid.js"),o=function(t,e,n){e.guid||(e.guid=r.newGUID());var o=function(){return e.apply(t,arguments)};return o.guid=n?n+"_"+e.guid:e.guid,o};n.bind=o},{"./guid.js":146}],145:[function(t,e,n){"use strict";function r(t){var e=arguments.length<=1||void 0===arguments[1]?t:arguments[1];return function(){t=0>t?0:t;var n=Math.floor(t%60),r=Math.floor(t/60%60),o=Math.floor(t/3600),i=Math.floor(e/60%60),s=Math.floor(e/3600);return(isNaN(t)||1/0===t)&&(o=r=n="-"),o=o>0||s>0?o+":":"",r=((o||i>=10)&&10>r?"0"+r:r)+":",n=10>n?"0"+n:n,o+r+n}()}n.__esModule=!0,n["default"]=r,e.exports=n["default"]},{}],146:[function(t,e,n){"use strict";function r(){return o++}n.__esModule=!0,n.newGUID=r;var o=1},{}],147:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(){for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];l("log",e)}n.__esModule=!0;var i=t("global/window"),s=r(i),a=t("./browser"),l=function(t,e){var n=arguments.length<=2||void 0===arguments[2]?!!a.IE_VERSION&&a.IE_VERSION<11:arguments[2],r=s["default"].console,i=r&&r[t]||function(){};"log"!==t&&e.unshift(t.toUpperCase()+":"),o.history.push(e),e.unshift("VIDEOJS:"),n&&(e=e.map(function(t){if(t&&"object"==typeof t||Array.isArray(t))try{return JSON.stringify(t)}catch(e){}return String(t)}).join(" ")),i.apply?i[Array.isArray(e)?"apply":"call"](r,e):i(e)};n.logByType=l,o.history=[],o.error=function(){for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];return l("error",e)},o.warn=function(){for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];return l("warn",e)},n["default"]=o},{"./browser":140,"global/window":2}],148:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t){return!!t&&"object"==typeof t&&"[object Object]"===t.toString()&&t.constructor===Object}function i(){var t=Array.prototype.slice.call(arguments);return t.unshift({}),t.push(l),a["default"].apply(null,t),t[0]}n.__esModule=!0,n["default"]=i;var s=t("lodash-compat/object/merge"),a=r(s),l=function(t,e){return o(e)?o(t)?void 0:i(e):e};e.exports=n["default"]},{"lodash-compat/object/merge":40}],149:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}n.__esModule=!0;var o=t("global/document"),i=r(o),s=function(t){var e=i["default"].createElement("style");return e.className=t,e};n.createStyleElement=s;var a=function(t,e){t.styleSheet?t.styleSheet.cssText=e:t.textContent=e};n.setTextContent=a},{"global/document":1}],150:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){return Array.isArray(t)?i(t):void 0===t||void 0===e?i():i([[t,e]])}function i(t){return void 0===t||0===t.length?{length:0,start:function(){throw new Error("This TimeRanges object is empty")},end:function(){throw new Error("This TimeRanges object is empty")}}:{length:t.length,start:s.bind(null,"start",0,t),end:s.bind(null,"end",1,t)}}function s(t,e,n,r){return void 0===r&&(u["default"].warn("DEPRECATED: Function '"+t+"' on 'TimeRanges' called without an index argument."),r=0),a(t,r,n.length-1),n[r][e]}function a(t,e,n){if(0>e||e>n)throw new Error("Failed to execute '"+t+"' on 'TimeRanges': The index provided ("+e+") is greater than or equal to the maximum bound ("+n+").")}n.__esModule=!0,n.createTimeRanges=o;var l=t("./log.js"),u=r(l);n.createTimeRange=o},{"./log.js":147}],151:[function(t,e,n){"use strict";function r(t){return t.charAt(0).toUpperCase()+t.slice(1)}n.__esModule=!0,n["default"]=r,e.exports=n["default"]},{}],152:[function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}n.__esModule=!0;var o=t("global/document"),i=r(o),s=t("global/window"),a=r(s),l=function(t){var e=["protocol","hostname","port","pathname","search","hash","host"],n=i["default"].createElement("a");n.href=t;var r=""===n.host&&"file:"!==n.protocol,o=void 0;r&&(o=i["default"].createElement("div"),o.innerHTML='<a href="'+t+'"></a>',n=o.firstChild,o.setAttribute("style","display:none; position:absolute;"),i["default"].body.appendChild(o));for(var s={},a=0;a<e.length;a++)s[e[a]]=n[e[a]];return"http:"===s.protocol&&(s.host=s.host.replace(/:80$/,"")),"https:"===s.protocol&&(s.host=s.host.replace(/:443$/,"")),r&&i["default"].body.removeChild(o),s};n.parseUrl=l;var u=function(t){if(!t.match(/^https?:\/\//)){var e=i["default"].createElement("div");e.innerHTML='<a href="'+t+'">x</a>',t=e.firstChild.href}return t};n.getAbsoluteURL=u;var c=function(t){if("string"==typeof t){var e=/^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i,n=e.exec(t);if(n)return n.pop().toLowerCase()}return""};n.getFileExtension=c;var p=function(t){var e=a["default"].location,n=l(t),r=":"===n.protocol?e.protocol:n.protocol,o=r+n.host!==e.protocol+e.host;return o};n.isCrossOrigin=p},{"global/document":1,"global/window":2}],153:[function(e,n,r){"use strict";function o(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function i(t){return t&&t.__esModule?t:{"default":t}}function s(t,e,n){var r=void 0;if("string"==typeof t){if(0===t.indexOf("#")&&(t=t.slice(1)),s.getPlayers()[t])return e&&F["default"].warn('Player "'+t+'" is already initialised. Options will not be applied.'),n&&s.getPlayers()[t].ready(n),s.getPlayers()[t];r=H.getEl(t)}else r=t;if(!r||!r.nodeName)throw new TypeError("The element or ID supplied is not valid. (videojs)");return r.player||T["default"].players[r.playerId]||new T["default"](r,e,n)}r.__esModule=!0;{var a=e("global/window"),l=i(a),u=e("global/document"),c=i(u),p=e("./setup"),f=o(p),d=e("./utils/stylesheet.js"),h=o(d),y=e("./component"),g=i(y),v=e("./event-target"),m=i(v),b=e("./utils/events.js"),_=o(b),j=e("./player"),T=i(j),w=e("./plugins.js"),k=i(w),E=e("../../src/js/utils/merge-options.js"),C=i(E),O=e("./utils/fn.js"),x=o(O),S=e("./tracks/text-track.js"),P=i(S),M=e("./tracks/audio-track.js"),A=i(M),R=e("./tracks/video-track.js"),I=i(R),V=e("./utils/time-ranges.js"),L=e("./utils/format-time.js"),N=i(L),D=e("./utils/log.js"),F=i(D),B=e("./utils/dom.js"),H=o(B),U=e("./utils/browser.js"),$=o(U),W=e("./utils/url.js"),q=o(W),z=e("./extend.js"),G=i(z),X=e("lodash-compat/object/merge"),K=i(X),Y=e("xhr"),J=i(Y),Q=e("./tech/tech.js"),Z=i(Q),te=e("./tech/html5.js"),ee=(i(te),e("./tech/flash.js"));i(ee)}if("undefined"==typeof HTMLVideoElement&&(c["default"].createElement("video"),c["default"].createElement("audio"),c["default"].createElement("track")),l["default"].VIDEOJS_NO_DYNAMIC_STYLE!==!0){var ne=H.$(".vjs-styles-defaults");if(!ne){ne=h.createStyleElement("vjs-styles-defaults");var re=H.$("head");re.insertBefore(ne,re.firstChild),h.setTextContent(ne,"\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ")}}f.autoSetupTimeout(1,s),s.VERSION="5.11.9",s.options=T["default"].prototype.options_,s.getPlayers=function(){return T["default"].players},s.players=T["default"].players,s.getComponent=g["default"].getComponent,s.registerComponent=function(t,e){Z["default"].isTech(e)&&F["default"].warn("The "+t+" tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)"),g["default"].registerComponent.call(g["default"],t,e)},s.getTech=Z["default"].getTech,s.registerTech=Z["default"].registerTech,s.browser=$,s.TOUCH_ENABLED=$.TOUCH_ENABLED,s.extend=G["default"],s.mergeOptions=C["default"],s.bind=x.bind,s.plugin=k["default"],s.addLanguage=function(t,e){var n;return t=(""+t).toLowerCase(),K["default"](s.options.languages,(n={},n[t]=e,n))[t]},s.log=F["default"],s.createTimeRange=s.createTimeRanges=V.createTimeRanges,s.formatTime=N["default"],s.parseUrl=q.parseUrl,s.isCrossOrigin=q.isCrossOrigin,s.EventTarget=m["default"],s.on=_.on,s.one=_.one,s.off=_.off,s.trigger=_.trigger,s.xhr=J["default"],s.TextTrack=P["default"],s.AudioTrack=A["default"],s.VideoTrack=I["default"],s.isEl=H.isEl,s.isTextNode=H.isTextNode,s.createEl=H.createEl,s.hasClass=H.hasElClass,s.addClass=H.addElClass,s.removeClass=H.removeElClass,s.toggleClass=H.toggleElClass,s.setAttributes=H.setElAttributes,s.getAttributes=H.getElAttributes,s.emptyEl=H.emptyEl,s.appendContent=H.appendContent,s.insertContent=H.insertContent,"function"==typeof t&&t.amd?t("videojs",[],function(){return s}):"object"==typeof r&&"object"==typeof n&&(n.exports=s),r["default"]=s,n.exports=r["default"]},{"../../src/js/utils/merge-options.js":148,"./component":67,"./event-target":104,"./extend.js":105,"./player":113,"./plugins.js":114,"./setup":118,"./tech/flash.js":121,"./tech/html5.js":122,"./tech/tech.js":124,"./tracks/audio-track.js":126,"./tracks/text-track.js":134,"./tracks/video-track.js":139,"./utils/browser.js":140,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/format-time.js":145,"./utils/log.js":147,"./utils/stylesheet.js":149,"./utils/time-ranges.js":150,"./utils/url.js":152,"global/document":1,"global/window":2,"lodash-compat/object/merge":40,xhr:56}]},{},[153])(153)}),function(t){var e=t.vttjs={},n=e.VTTCue,r=e.VTTRegion,o=t.VTTCue,i=t.VTTRegion;e.shim=function(){e.VTTCue=n,e.VTTRegion=r},e.restore=function(){e.VTTCue=o,e.VTTRegion=i}}(this),function(t,e){function n(t){if("string"!=typeof t)return!1;var e=a[t.toLowerCase()];return e?t.toLowerCase():!1}function r(t){if("string"!=typeof t)return!1;var e=l[t.toLowerCase()];return e?t.toLowerCase():!1}function o(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)t[r]=n[r]}return t}function i(t,e,i){var a=this,l=/MSIE\s8\.0/.test(navigator.userAgent),u={};l?a=document.createElement("custom"):u.enumerable=!0,a.hasBeenReset=!1;var c="",p=!1,f=t,d=e,h=i,y=null,g="",v=!0,m="auto",b="start",_=50,j="middle",T=50,w="middle";return Object.defineProperty(a,"id",o({},u,{get:function(){return c},set:function(t){c=""+t}})),Object.defineProperty(a,"pauseOnExit",o({},u,{get:function(){return p},set:function(t){p=!!t}})),Object.defineProperty(a,"startTime",o({},u,{get:function(){return f},set:function(t){if("number"!=typeof t)throw new TypeError("Start time must be set to a number.");f=t,this.hasBeenReset=!0}})),Object.defineProperty(a,"endTime",o({},u,{get:function(){return d},set:function(t){if("number"!=typeof t)throw new TypeError("End time must be set to a number.");d=t,this.hasBeenReset=!0}})),Object.defineProperty(a,"text",o({},u,{get:function(){return h},set:function(t){h=""+t,this.hasBeenReset=!0}})),Object.defineProperty(a,"region",o({},u,{get:function(){return y},set:function(t){y=t,this.hasBeenReset=!0}})),Object.defineProperty(a,"vertical",o({},u,{get:function(){return g},set:function(t){var e=n(t);if(e===!1)throw new SyntaxError("An invalid or illegal string was specified.");g=e,this.hasBeenReset=!0}})),Object.defineProperty(a,"snapToLines",o({},u,{get:function(){return v},set:function(t){v=!!t,this.hasBeenReset=!0}})),Object.defineProperty(a,"line",o({},u,{get:function(){return m},set:function(t){if("number"!=typeof t&&t!==s)throw new SyntaxError("An invalid number or illegal string was specified.");m=t,this.hasBeenReset=!0}})),Object.defineProperty(a,"lineAlign",o({},u,{get:function(){return b},set:function(t){var e=r(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");b=e,this.hasBeenReset=!0}})),Object.defineProperty(a,"position",o({},u,{get:function(){return _},set:function(t){if(0>t||t>100)throw new Error("Position must be between 0 and 100.");_=t,this.hasBeenReset=!0}})),Object.defineProperty(a,"positionAlign",o({},u,{get:function(){return j},set:function(t){var e=r(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");j=e,this.hasBeenReset=!0}})),Object.defineProperty(a,"size",o({},u,{get:function(){return T},set:function(t){if(0>t||t>100)throw new Error("Size must be between 0 and 100.");T=t,this.hasBeenReset=!0}})),Object.defineProperty(a,"align",o({},u,{get:function(){return w},set:function(t){var e=r(t);if(!e)throw new SyntaxError("An invalid or illegal string was specified.");w=e,this.hasBeenReset=!0}})),a.displayState=void 0,l?a:void 0}var s="auto",a={"":!0,lr:!0,rl:!0},l={start:!0,middle:!0,end:!0,left:!0,right:!0};i.prototype.getCueAsHTML=function(){return WebVTT.convertCueToDOMTree(window,this.text)},t.VTTCue=t.VTTCue||i,e.VTTCue=i}(this,this.vttjs||{}),function(t,e){function n(t){if("string"!=typeof t)return!1;var e=i[t.toLowerCase()];return e?t.toLowerCase():!1}function r(t){return"number"==typeof t&&t>=0&&100>=t}function o(){var t=100,e=3,o=0,i=100,s=0,a=100,l="";Object.defineProperties(this,{width:{enumerable:!0,get:function(){return t},set:function(e){if(!r(e))throw new Error("Width must be between 0 and 100.");t=e}},lines:{enumerable:!0,get:function(){return e},set:function(t){if("number"!=typeof t)throw new TypeError("Lines must be set to a number.");
e=t}},regionAnchorY:{enumerable:!0,get:function(){return i},set:function(t){if(!r(t))throw new Error("RegionAnchorX must be between 0 and 100.");i=t}},regionAnchorX:{enumerable:!0,get:function(){return o},set:function(t){if(!r(t))throw new Error("RegionAnchorY must be between 0 and 100.");o=t}},viewportAnchorY:{enumerable:!0,get:function(){return a},set:function(t){if(!r(t))throw new Error("ViewportAnchorY must be between 0 and 100.");a=t}},viewportAnchorX:{enumerable:!0,get:function(){return s},set:function(t){if(!r(t))throw new Error("ViewportAnchorX must be between 0 and 100.");s=t}},scroll:{enumerable:!0,get:function(){return l},set:function(t){var e=n(t);if(e===!1)throw new SyntaxError("An invalid or illegal string was specified.");l=e}}})}var i={"":!0,up:!0};t.VTTRegion=t.VTTRegion||o,e.VTTRegion=o}(this,this.vttjs||{}),function(t){function e(t,e){this.name="ParsingError",this.code=t.code,this.message=e||t.message}function n(t){function e(t,e,n,r){return 3600*(0|t)+60*(0|e)+(0|n)+(0|r)/1e3}var n=t.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);return n?n[3]?e(n[1],n[2],n[3].replace(":",""),n[4]):n[1]>59?e(n[1],n[2],0,n[4]):e(0,n[1],n[2],n[4]):null}function r(){this.values=h(null)}function o(t,e,n,r){var o=r?t.split(r):[t];for(var i in o)if("string"==typeof o[i]){var s=o[i].split(n);if(2===s.length){var a=s[0],l=s[1];e(a,l)}}}function i(t,i,s){function a(){var r=n(t);if(null===r)throw new e(e.Errors.BadTimeStamp,"Malformed timestamp: "+c);return t=t.replace(/^[^\sa-zA-Z-]+/,""),r}function l(t,e){var n=new r;o(t,function(t,e){switch(t){case"region":for(var r=s.length-1;r>=0;r--)if(s[r].id===e){n.set(t,s[r].region);break}break;case"vertical":n.alt(t,e,["rl","lr"]);break;case"line":var o=e.split(","),i=o[0];n.integer(t,i),n.percent(t,i)?n.set("snapToLines",!1):null,n.alt(t,i,["auto"]),2===o.length&&n.alt("lineAlign",o[1],["start","middle","end"]);break;case"position":o=e.split(","),n.percent(t,o[0]),2===o.length&&n.alt("positionAlign",o[1],["start","middle","end"]);break;case"size":n.percent(t,e);break;case"align":n.alt(t,e,["start","middle","end","left","right"])}},/:/,/\s/),e.region=n.get("region",null),e.vertical=n.get("vertical",""),e.line=n.get("line","auto"),e.lineAlign=n.get("lineAlign","start"),e.snapToLines=n.get("snapToLines",!0),e.size=n.get("size",100),e.align=n.get("align","middle"),e.position=n.get("position",{start:0,left:0,middle:50,end:100,right:100},e.align),e.positionAlign=n.get("positionAlign",{start:"start",left:"start",middle:"middle",end:"end",right:"end"},e.align)}function u(){t=t.replace(/^\s+/,"")}var c=t;if(u(),i.startTime=a(),u(),"-->"!==t.substr(0,3))throw new e(e.Errors.BadTimeStamp,"Malformed time stamp (time stamps must be separated by '-->'): "+c);t=t.substr(3),u(),i.endTime=a(),u(),l(t,i)}function s(t,e){function r(){function t(t){return e=e.substr(t.length),t}if(!e)return null;var n=e.match(/^([^<]*)(<[^>]+>?)?/);return t(n[1]?n[1]:n[2])}function o(t){return y[t]}function i(t){for(;h=t.match(/&(amp|lt|gt|lrm|rlm|nbsp);/);)t=t.replace(h[0],o);return t}function s(t,e){return!m[e.localName]||m[e.localName]===t.localName}function a(e,n){var r=g[e];if(!r)return null;var o=t.document.createElement(r);o.localName=r;var i=v[e];return i&&n&&(o[i]=n.trim()),o}for(var l,u=t.document.createElement("div"),c=u,p=[];null!==(l=r());)if("<"!==l[0])c.appendChild(t.document.createTextNode(i(l)));else{if("/"===l[1]){p.length&&p[p.length-1]===l.substr(2).replace(">","")&&(p.pop(),c=c.parentNode);continue}var f,d=n(l.substr(1,l.length-2));if(d){f=t.document.createProcessingInstruction("timestamp",d),c.appendChild(f);continue}var h=l.match(/^<([^.\s\/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);if(!h)continue;if(f=a(h[1],h[3]),!f)continue;if(!s(c,f))continue;h[2]&&(f.className=h[2].substr(1).replace("."," ")),p.push(h[1]),c.appendChild(f),c=f}return u}function a(t){function e(t,e){for(var n=e.childNodes.length-1;n>=0;n--)t.push(e.childNodes[n])}function n(t){if(!t||!t.length)return null;var r=t.pop(),o=r.textContent||r.innerText;if(o){var i=o.match(/^.*(\n|\r)/);return i?(t.length=0,i[0]):o}return"ruby"===r.tagName?n(t):r.childNodes?(e(t,r),n(t)):void 0}var r,o=[],i="";if(!t||!t.childNodes)return"ltr";for(e(o,t);i=n(o);)for(var s=0;s<i.length;s++){r=i.charCodeAt(s);for(var a=0;a<b.length;a++)if(b[a]===r)return"rtl"}return"ltr"}function l(t){if("number"==typeof t.line&&(t.snapToLines||t.line>=0&&t.line<=100))return t.line;if(!t.track||!t.track.textTrackList||!t.track.textTrackList.mediaElement)return-1;for(var e=t.track,n=e.textTrackList,r=0,o=0;o<n.length&&n[o]!==e;o++)"showing"===n[o].mode&&r++;return-1*++r}function u(){}function c(t,e,n){var r=/MSIE\s8\.0/.test(navigator.userAgent),o="rgba(255, 255, 255, 1)",i="rgba(0, 0, 0, 0.8)";r&&(o="rgb(255, 255, 255)",i="rgb(0, 0, 0)"),u.call(this),this.cue=e,this.cueDiv=s(t,e.text);var l={color:o,backgroundColor:i,position:"relative",left:0,right:0,top:0,bottom:0,display:"inline"};r||(l.writingMode=""===e.vertical?"horizontal-tb":"lr"===e.vertical?"vertical-lr":"vertical-rl",l.unicodeBidi="plaintext"),this.applyStyles(l,this.cueDiv),this.div=t.document.createElement("div"),l={textAlign:"middle"===e.align?"center":e.align,font:n.font,whiteSpace:"pre-line",position:"absolute"},r||(l.direction=a(this.cueDiv),l.writingMode=""===e.vertical?"horizontal-tb":"lr"===e.vertical?"vertical-lr":"vertical-rl".stylesunicodeBidi="plaintext"),this.applyStyles(l),this.div.appendChild(this.cueDiv);var c=0;switch(e.positionAlign){case"start":c=e.position;break;case"middle":c=e.position-e.size/2;break;case"end":c=e.position-e.size}""===e.vertical?this.applyStyles({left:this.formatStyle(c,"%"),width:this.formatStyle(e.size,"%")}):this.applyStyles({top:this.formatStyle(c,"%"),height:this.formatStyle(e.size,"%")}),this.move=function(t){this.applyStyles({top:this.formatStyle(t.top,"px"),bottom:this.formatStyle(t.bottom,"px"),left:this.formatStyle(t.left,"px"),right:this.formatStyle(t.right,"px"),height:this.formatStyle(t.height,"px"),width:this.formatStyle(t.width,"px")})}}function p(t){var e,n,r,o,i=/MSIE\s8\.0/.test(navigator.userAgent);if(t.div){n=t.div.offsetHeight,r=t.div.offsetWidth,o=t.div.offsetTop;var s=(s=t.div.childNodes)&&(s=s[0])&&s.getClientRects&&s.getClientRects();t=t.div.getBoundingClientRect(),e=s?Math.max(s[0]&&s[0].height||0,t.height/s.length):0}this.left=t.left,this.right=t.right,this.top=t.top||o,this.height=t.height||n,this.bottom=t.bottom||o+(t.height||n),this.width=t.width||r,this.lineHeight=void 0!==e?e:t.lineHeight,i&&!this.lineHeight&&(this.lineHeight=13)}function f(t,e,n,r){function o(t,e){for(var o,i=new p(t),s=1,a=0;a<e.length;a++){for(;t.overlapsOppositeAxis(n,e[a])||t.within(n)&&t.overlapsAny(r);)t.move(e[a]);if(t.within(n))return t;var l=t.intersectPercentage(n);s>l&&(o=new p(t),s=l),t=new p(i)}return o||i}var i=new p(e),s=e.cue,a=l(s),u=[];if(s.snapToLines){var c;switch(s.vertical){case"":u=["+y","-y"],c="height";break;case"rl":u=["+x","-x"],c="width";break;case"lr":u=["-x","+x"],c="width"}var f=i.lineHeight,d=f*Math.round(a),h=n[c]+f,y=u[0];Math.abs(d)>h&&(d=0>d?-1:1,d*=Math.ceil(h/f)*f),0>a&&(d+=""===s.vertical?n.height:n.width,u=u.reverse()),i.move(y,d)}else{var g=i.lineHeight/n.height*100;switch(s.lineAlign){case"middle":a-=g/2;break;case"end":a-=g}switch(s.vertical){case"":e.applyStyles({top:e.formatStyle(a,"%")});break;case"rl":e.applyStyles({left:e.formatStyle(a,"%")});break;case"lr":e.applyStyles({right:e.formatStyle(a,"%")})}u=["+y","-x","+x","-y"],i=new p(e)}var v=o(i,u);e.move(v.toCSSCompatValues(n))}function d(){}var h=Object.create||function(){function t(){}return function(e){if(1!==arguments.length)throw new Error("Object.create shim only accepts one parameter.");return t.prototype=e,new t}}();e.prototype=h(Error.prototype),e.prototype.constructor=e,e.Errors={BadSignature:{code:0,message:"Malformed WebVTT signature."},BadTimeStamp:{code:1,message:"Malformed time stamp."}},r.prototype={set:function(t,e){this.get(t)||""===e||(this.values[t]=e)},get:function(t,e,n){return n?this.has(t)?this.values[t]:e[n]:this.has(t)?this.values[t]:e},has:function(t){return t in this.values},alt:function(t,e,n){for(var r=0;r<n.length;++r)if(e===n[r]){this.set(t,e);break}},integer:function(t,e){/^-?\d+$/.test(e)&&this.set(t,parseInt(e,10))},percent:function(t,e){var n;return(n=e.match(/^([\d]{1,3})(\.[\d]*)?%$/))&&(e=parseFloat(e),e>=0&&100>=e)?(this.set(t,e),!0):!1}};var y={"&amp;":"&","&lt;":"<","&gt;":">","&lrm;":"‎","&rlm;":"‏","&nbsp;":" "},g={c:"span",i:"i",b:"b",u:"u",ruby:"ruby",rt:"rt",v:"span",lang:"span"},v={v:"title",lang:"lang"},m={rt:"ruby"},b=[1470,1472,1475,1478,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1520,1521,1522,1523,1524,1544,1547,1549,1563,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1645,1646,1647,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1765,1766,1774,1775,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1807,1808,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1969,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2e3,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2036,2037,2042,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2074,2084,2088,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2142,2208,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,8207,64285,64287,64288,64289,64290,64291,64292,64293,64294,64295,64296,64298,64299,64300,64301,64302,64303,64304,64305,64306,64307,64308,64309,64310,64312,64313,64314,64315,64316,64318,64320,64321,64323,64324,64326,64327,64328,64329,64330,64331,64332,64333,64334,64335,64336,64337,64338,64339,64340,64341,64342,64343,64344,64345,64346,64347,64348,64349,64350,64351,64352,64353,64354,64355,64356,64357,64358,64359,64360,64361,64362,64363,64364,64365,64366,64367,64368,64369,64370,64371,64372,64373,64374,64375,64376,64377,64378,64379,64380,64381,64382,64383,64384,64385,64386,64387,64388,64389,64390,64391,64392,64393,64394,64395,64396,64397,64398,64399,64400,64401,64402,64403,64404,64405,64406,64407,64408,64409,64410,64411,64412,64413,64414,64415,64416,64417,64418,64419,64420,64421,64422,64423,64424,64425,64426,64427,64428,64429,64430,64431,64432,64433,64434,64435,64436,64437,64438,64439,64440,64441,64442,64443,64444,64445,64446,64447,64448,64449,64467,64468,64469,64470,64471,64472,64473,64474,64475,64476,64477,64478,64479,64480,64481,64482,64483,64484,64485,64486,64487,64488,64489,64490,64491,64492,64493,64494,64495,64496,64497,64498,64499,64500,64501,64502,64503,64504,64505,64506,64507,64508,64509,64510,64511,64512,64513,64514,64515,64516,64517,64518,64519,64520,64521,64522,64523,64524,64525,64526,64527,64528,64529,64530,64531,64532,64533,64534,64535,64536,64537,64538,64539,64540,64541,64542,64543,64544,64545,64546,64547,64548,64549,64550,64551,64552,64553,64554,64555,64556,64557,64558,64559,64560,64561,64562,64563,64564,64565,64566,64567,64568,64569,64570,64571,64572,64573,64574,64575,64576,64577,64578,64579,64580,64581,64582,64583,64584,64585,64586,64587,64588,64589,64590,64591,64592,64593,64594,64595,64596,64597,64598,64599,64600,64601,64602,64603,64604,64605,64606,64607,64608,64609,64610,64611,64612,64613,64614,64615,64616,64617,64618,64619,64620,64621,64622,64623,64624,64625,64626,64627,64628,64629,64630,64631,64632,64633,64634,64635,64636,64637,64638,64639,64640,64641,64642,64643,64644,64645,64646,64647,64648,64649,64650,64651,64652,64653,64654,64655,64656,64657,64658,64659,64660,64661,64662,64663,64664,64665,64666,64667,64668,64669,64670,64671,64672,64673,64674,64675,64676,64677,64678,64679,64680,64681,64682,64683,64684,64685,64686,64687,64688,64689,64690,64691,64692,64693,64694,64695,64696,64697,64698,64699,64700,64701,64702,64703,64704,64705,64706,64707,64708,64709,64710,64711,64712,64713,64714,64715,64716,64717,64718,64719,64720,64721,64722,64723,64724,64725,64726,64727,64728,64729,64730,64731,64732,64733,64734,64735,64736,64737,64738,64739,64740,64741,64742,64743,64744,64745,64746,64747,64748,64749,64750,64751,64752,64753,64754,64755,64756,64757,64758,64759,64760,64761,64762,64763,64764,64765,64766,64767,64768,64769,64770,64771,64772,64773,64774,64775,64776,64777,64778,64779,64780,64781,64782,64783,64784,64785,64786,64787,64788,64789,64790,64791,64792,64793,64794,64795,64796,64797,64798,64799,64800,64801,64802,64803,64804,64805,64806,64807,64808,64809,64810,64811,64812,64813,64814,64815,64816,64817,64818,64819,64820,64821,64822,64823,64824,64825,64826,64827,64828,64829,64848,64849,64850,64851,64852,64853,64854,64855,64856,64857,64858,64859,64860,64861,64862,64863,64864,64865,64866,64867,64868,64869,64870,64871,64872,64873,64874,64875,64876,64877,64878,64879,64880,64881,64882,64883,64884,64885,64886,64887,64888,64889,64890,64891,64892,64893,64894,64895,64896,64897,64898,64899,64900,64901,64902,64903,64904,64905,64906,64907,64908,64909,64910,64911,64914,64915,64916,64917,64918,64919,64920,64921,64922,64923,64924,64925,64926,64927,64928,64929,64930,64931,64932,64933,64934,64935,64936,64937,64938,64939,64940,64941,64942,64943,64944,64945,64946,64947,64948,64949,64950,64951,64952,64953,64954,64955,64956,64957,64958,64959,64960,64961,64962,64963,64964,64965,64966,64967,65008,65009,65010,65011,65012,65013,65014,65015,65016,65017,65018,65019,65020,65136,65137,65138,65139,65140,65142,65143,65144,65145,65146,65147,65148,65149,65150,65151,65152,65153,65154,65155,65156,65157,65158,65159,65160,65161,65162,65163,65164,65165,65166,65167,65168,65169,65170,65171,65172,65173,65174,65175,65176,65177,65178,65179,65180,65181,65182,65183,65184,65185,65186,65187,65188,65189,65190,65191,65192,65193,65194,65195,65196,65197,65198,65199,65200,65201,65202,65203,65204,65205,65206,65207,65208,65209,65210,65211,65212,65213,65214,65215,65216,65217,65218,65219,65220,65221,65222,65223,65224,65225,65226,65227,65228,65229,65230,65231,65232,65233,65234,65235,65236,65237,65238,65239,65240,65241,65242,65243,65244,65245,65246,65247,65248,65249,65250,65251,65252,65253,65254,65255,65256,65257,65258,65259,65260,65261,65262,65263,65264,65265,65266,65267,65268,65269,65270,65271,65272,65273,65274,65275,65276,67584,67585,67586,67587,67588,67589,67592,67594,67595,67596,67597,67598,67599,67600,67601,67602,67603,67604,67605,67606,67607,67608,67609,67610,67611,67612,67613,67614,67615,67616,67617,67618,67619,67620,67621,67622,67623,67624,67625,67626,67627,67628,67629,67630,67631,67632,67633,67634,67635,67636,67637,67639,67640,67644,67647,67648,67649,67650,67651,67652,67653,67654,67655,67656,67657,67658,67659,67660,67661,67662,67663,67664,67665,67666,67667,67668,67669,67671,67672,67673,67674,67675,67676,67677,67678,67679,67840,67841,67842,67843,67844,67845,67846,67847,67848,67849,67850,67851,67852,67853,67854,67855,67856,67857,67858,67859,67860,67861,67862,67863,67864,67865,67866,67867,67872,67873,67874,67875,67876,67877,67878,67879,67880,67881,67882,67883,67884,67885,67886,67887,67888,67889,67890,67891,67892,67893,67894,67895,67896,67897,67903,67968,67969,67970,67971,67972,67973,67974,67975,67976,67977,67978,67979,67980,67981,67982,67983,67984,67985,67986,67987,67988,67989,67990,67991,67992,67993,67994,67995,67996,67997,67998,67999,68e3,68001,68002,68003,68004,68005,68006,68007,68008,68009,68010,68011,68012,68013,68014,68015,68016,68017,68018,68019,68020,68021,68022,68023,68030,68031,68096,68112,68113,68114,68115,68117,68118,68119,68121,68122,68123,68124,68125,68126,68127,68128,68129,68130,68131,68132,68133,68134,68135,68136,68137,68138,68139,68140,68141,68142,68143,68144,68145,68146,68147,68160,68161,68162,68163,68164,68165,68166,68167,68176,68177,68178,68179,68180,68181,68182,68183,68184,68192,68193,68194,68195,68196,68197,68198,68199,68200,68201,68202,68203,68204,68205,68206,68207,68208,68209,68210,68211,68212,68213,68214,68215,68216,68217,68218,68219,68220,68221,68222,68223,68352,68353,68354,68355,68356,68357,68358,68359,68360,68361,68362,68363,68364,68365,68366,68367,68368,68369,68370,68371,68372,68373,68374,68375,68376,68377,68378,68379,68380,68381,68382,68383,68384,68385,68386,68387,68388,68389,68390,68391,68392,68393,68394,68395,68396,68397,68398,68399,68400,68401,68402,68403,68404,68405,68416,68417,68418,68419,68420,68421,68422,68423,68424,68425,68426,68427,68428,68429,68430,68431,68432,68433,68434,68435,68436,68437,68440,68441,68442,68443,68444,68445,68446,68447,68448,68449,68450,68451,68452,68453,68454,68455,68456,68457,68458,68459,68460,68461,68462,68463,68464,68465,68466,68472,68473,68474,68475,68476,68477,68478,68479,68608,68609,68610,68611,68612,68613,68614,68615,68616,68617,68618,68619,68620,68621,68622,68623,68624,68625,68626,68627,68628,68629,68630,68631,68632,68633,68634,68635,68636,68637,68638,68639,68640,68641,68642,68643,68644,68645,68646,68647,68648,68649,68650,68651,68652,68653,68654,68655,68656,68657,68658,68659,68660,68661,68662,68663,68664,68665,68666,68667,68668,68669,68670,68671,68672,68673,68674,68675,68676,68677,68678,68679,68680,126464,126465,126466,126467,126469,126470,126471,126472,126473,126474,126475,126476,126477,126478,126479,126480,126481,126482,126483,126484,126485,126486,126487,126488,126489,126490,126491,126492,126493,126494,126495,126497,126498,126500,126503,126505,126506,126507,126508,126509,126510,126511,126512,126513,126514,126516,126517,126518,126519,126521,126523,126530,126535,126537,126539,126541,126542,126543,126545,126546,126548,126551,126553,126555,126557,126559,126561,126562,126564,126567,126568,126569,126570,126572,126573,126574,126575,126576,126577,126578,126580,126581,126582,126583,126585,126586,126587,126588,126590,126592,126593,126594,126595,126596,126597,126598,126599,126600,126601,126603,126604,126605,126606,126607,126608,126609,126610,126611,126612,126613,126614,126615,126616,126617,126618,126619,126625,126626,126627,126629,126630,126631,126632,126633,126635,126636,126637,126638,126639,126640,126641,126642,126643,126644,126645,126646,126647,126648,126649,126650,126651,1114109];u.prototype.applyStyles=function(t,e){e=e||this.div;for(var n in t)t.hasOwnProperty(n)&&(e.style[n]=t[n])},u.prototype.formatStyle=function(t,e){return 0===t?0:t+e},c.prototype=h(u.prototype),c.prototype.constructor=c,p.prototype.move=function(t,e){switch(e=void 0!==e?e:this.lineHeight,t){case"+x":this.left+=e,this.right+=e;break;case"-x":this.left-=e,this.right-=e;break;case"+y":this.top+=e,this.bottom+=e;break;case"-y":this.top-=e,this.bottom-=e}},p.prototype.overlaps=function(t){return this.left<t.right&&this.right>t.left&&this.top<t.bottom&&this.bottom>t.top},p.prototype.overlapsAny=function(t){for(var e=0;e<t.length;e++)if(this.overlaps(t[e]))return!0;return!1},p.prototype.within=function(t){return this.top>=t.top&&this.bottom<=t.bottom&&this.left>=t.left&&this.right<=t.right},p.prototype.overlapsOppositeAxis=function(t,e){switch(e){case"+x":return this.left<t.left;case"-x":return this.right>t.right;case"+y":return this.top<t.top;case"-y":return this.bottom>t.bottom}},p.prototype.intersectPercentage=function(t){var e=Math.max(0,Math.min(this.right,t.right)-Math.max(this.left,t.left)),n=Math.max(0,Math.min(this.bottom,t.bottom)-Math.max(this.top,t.top)),r=e*n;return r/(this.height*this.width)},p.prototype.toCSSCompatValues=function(t){return{top:this.top-t.top,bottom:t.bottom-this.bottom,left:this.left-t.left,right:t.right-this.right,height:this.height,width:this.width}},p.getSimpleBoxPosition=function(t){var e=t.div?t.div.offsetHeight:t.tagName?t.offsetHeight:0,n=t.div?t.div.offsetWidth:t.tagName?t.offsetWidth:0,r=t.div?t.div.offsetTop:t.tagName?t.offsetTop:0;t=t.div?t.div.getBoundingClientRect():t.tagName?t.getBoundingClientRect():t;var o={left:t.left,right:t.right,top:t.top||r,height:t.height||e,bottom:t.bottom||r+(t.height||e),width:t.width||n};return o},d.StringDecoder=function(){return{decode:function(t){if(!t)return"";if("string"!=typeof t)throw new Error("Error - expected string data.");return decodeURIComponent(encodeURIComponent(t))}}},d.convertCueToDOMTree=function(t,e){return t&&e?s(t,e):null};var _=.05,j="sans-serif",T="1.5%";d.processCues=function(t,e,n){function r(t){for(var e=0;e<t.length;e++)if(t[e].hasBeenReset||!t[e].displayState)return!0;return!1}if(!t||!e||!n)return null;for(;n.firstChild;)n.removeChild(n.firstChild);var o=t.document.createElement("div");if(o.style.position="absolute",o.style.left="0",o.style.right="0",o.style.top="0",o.style.bottom="0",o.style.margin=T,n.appendChild(o),r(e)){var i=[],s=p.getSimpleBoxPosition(o),a=Math.round(s.height*_*100)/100,l={font:a+"px "+j};!function(){for(var n,r,a=0;a<e.length;a++)r=e[a],n=new c(t,r,l),o.appendChild(n.div),f(t,n,s,i),r.displayState=n.div,i.push(p.getSimpleBoxPosition(n))}()}else for(var u=0;u<e.length;u++)o.appendChild(e[u].displayState)},d.Parser=function(t,e,n){n||(n=e,e={}),e||(e={}),this.window=t,this.vttjs=e,this.state="INITIAL",this.buffer="",this.decoder=n||new TextDecoder("utf8"),this.regionList=[]},d.Parser.prototype={reportOrThrowError:function(t){if(!(t instanceof e))throw t;this.onparsingerror&&this.onparsingerror(t)},parse:function(t){function n(){for(var t=l.buffer,e=0;e<t.length&&"\r"!==t[e]&&"\n"!==t[e];)++e;var n=t.substr(0,e);return"\r"===t[e]&&++e,"\n"===t[e]&&++e,l.buffer=t.substr(e),n}function s(t){var e=new r;if(o(t,function(t,n){switch(t){case"id":e.set(t,n);break;case"width":e.percent(t,n);break;case"lines":e.integer(t,n);break;case"regionanchor":case"viewportanchor":var o=n.split(",");if(2!==o.length)break;var i=new r;if(i.percent("x",o[0]),i.percent("y",o[1]),!i.has("x")||!i.has("y"))break;e.set(t+"X",i.get("x")),e.set(t+"Y",i.get("y"));break;case"scroll":e.alt(t,n,["up"])}},/=/,/\s/),e.has("id")){var n=new(l.vttjs.VTTRegion||l.window.VTTRegion);n.width=e.get("width",100),n.lines=e.get("lines",3),n.regionAnchorX=e.get("regionanchorX",0),n.regionAnchorY=e.get("regionanchorY",100),n.viewportAnchorX=e.get("viewportanchorX",0),n.viewportAnchorY=e.get("viewportanchorY",100),n.scroll=e.get("scroll",""),l.onregion&&l.onregion(n),l.regionList.push({id:e.get("id"),region:n})}}function a(t){o(t,function(t,e){switch(t){case"Region":s(e)}},/:/)}var l=this;t&&(l.buffer+=l.decoder.decode(t,{stream:!0}));try{var u;if("INITIAL"===l.state){if(!/\r\n|\n/.test(l.buffer))return this;u=n();var c=u.match(/^WEBVTT([ \t].*)?$/);if(!c||!c[0])throw new e(e.Errors.BadSignature);l.state="HEADER"}for(var p=!1;l.buffer;){if(!/\r\n|\n/.test(l.buffer))return this;switch(p?p=!1:u=n(),l.state){case"HEADER":/:/.test(u)?a(u):u||(l.state="ID");continue;case"NOTE":u||(l.state="ID");continue;case"ID":if(/^NOTE($|[ \t])/.test(u)){l.state="NOTE";break}if(!u)continue;if(l.cue=new(l.vttjs.VTTCue||l.window.VTTCue)(0,0,""),l.state="CUE",-1===u.indexOf("-->")){l.cue.id=u;continue}case"CUE":try{i(u,l.cue,l.regionList)}catch(f){l.reportOrThrowError(f),l.cue=null,l.state="BADCUE";continue}l.state="CUETEXT";continue;case"CUETEXT":var d=-1!==u.indexOf("-->");if(!u||d&&(p=!0)){l.oncue&&l.oncue(l.cue),l.cue=null,l.state="ID";continue}l.cue.text&&(l.cue.text+="\n"),l.cue.text+=u;continue;case"BADCUE":u||(l.state="ID");continue}}}catch(f){l.reportOrThrowError(f),"CUETEXT"===l.state&&l.cue&&l.oncue&&l.oncue(l.cue),l.cue=null,l.state="INITIAL"===l.state?"BADWEBVTT":"BADCUE"}return this},flush:function(){var t=this;try{if(t.buffer+=t.decoder.decode(),(t.cue||"HEADER"===t.state)&&(t.buffer+="\n\n",t.parse()),"INITIAL"===t.state)throw new e(e.Errors.BadSignature)}catch(n){t.reportOrThrowError(n)}return t.onflush&&t.onflush(),this}},t.WebVTT=d}(this,this.vttjs||{}),function(){function t(t){function e(e,n,r,o,i,s){for(;i>=0&&s>i;i+=t){var a=o?o[i]:i;r=n(r,e[a],a,e)}return r}return function(n,r,o,i){r=b(r,i,4);var s=!C(n)&&m.keys(n),a=(s||n).length,l=t>0?0:a-1;return arguments.length<3&&(o=n[s?s[l]:l],l+=t),e(n,r,o,s,l,a)}}function e(t){return function(e,n,r){n=_(n,r);for(var o=E(e),i=t>0?0:o-1;i>=0&&o>i;i+=t)if(n(e[i],i,e))return i;return-1}}function n(t,e,n){return function(r,o,i){var s=0,a=E(r);if("number"==typeof i)t>0?s=i>=0?i:Math.max(i+a,s):a=i>=0?Math.min(i+1,a):i+a+1;else if(n&&i&&a)return i=n(r,o),r[i]===o?i:-1;if(o!==o)return i=e(c.call(r,s,a),m.isNaN),i>=0?i+s:-1;for(i=t>0?s:a-1;i>=0&&a>i;i+=t)if(r[i]===o)return i;return-1}}function r(t,e){var n=M.length,r=t.constructor,o=m.isFunction(r)&&r.prototype||a,i="constructor";for(m.has(t,i)&&!m.contains(e,i)&&e.push(i);n--;)i=M[n],i in t&&t[i]!==o[i]&&!m.contains(e,i)&&e.push(i)}var o=this,i=o._,s=Array.prototype,a=Object.prototype,l=Function.prototype,u=s.push,c=s.slice,p=a.toString,f=a.hasOwnProperty,d=Array.isArray,h=Object.keys,y=l.bind,g=Object.create,v=function(){},m=function(t){return t instanceof m?t:this instanceof m?(this._wrapped=t,void 0):new m(t)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=m),exports._=m):o._=m,m.VERSION="1.8.3";var b=function(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,o){return t.call(e,n,r,o)};case 4:return function(n,r,o,i){return t.call(e,n,r,o,i)}}return function(){return t.apply(e,arguments)}},_=function(t,e,n){return null==t?m.identity:m.isFunction(t)?b(t,e,n):m.isObject(t)?m.matcher(t):m.property(t)};m.iteratee=function(t,e){return _(t,e,1/0)};var j=function(t,e){return function(n){var r=arguments.length;if(2>r||null==n)return n;for(var o=1;r>o;o++)for(var i=arguments[o],s=t(i),a=s.length,l=0;a>l;l++){var u=s[l];e&&void 0!==n[u]||(n[u]=i[u])}return n}},T=function(t){if(!m.isObject(t))return{};if(g)return g(t);v.prototype=t;var e=new v;return v.prototype=null,e},w=function(t){return function(e){return null==e?void 0:e[t]}},k=Math.pow(2,53)-1,E=w("length"),C=function(t){var e=E(t);return"number"==typeof e&&e>=0&&k>=e};m.each=m.forEach=function(t,e,n){e=b(e,n);var r,o;if(C(t))for(r=0,o=t.length;o>r;r++)e(t[r],r,t);else{var i=m.keys(t);for(r=0,o=i.length;o>r;r++)e(t[i[r]],i[r],t)}return t},m.map=m.collect=function(t,e,n){e=_(e,n);for(var r=!C(t)&&m.keys(t),o=(r||t).length,i=Array(o),s=0;o>s;s++){var a=r?r[s]:s;i[s]=e(t[a],a,t)}return i},m.reduce=m.foldl=m.inject=t(1),m.reduceRight=m.foldr=t(-1),m.find=m.detect=function(t,e,n){var r;return r=C(t)?m.findIndex(t,e,n):m.findKey(t,e,n),void 0!==r&&-1!==r?t[r]:void 0},m.filter=m.select=function(t,e,n){var r=[];return e=_(e,n),m.each(t,function(t,n,o){e(t,n,o)&&r.push(t)}),r},m.reject=function(t,e,n){return m.filter(t,m.negate(_(e)),n)},m.every=m.all=function(t,e,n){e=_(e,n);for(var r=!C(t)&&m.keys(t),o=(r||t).length,i=0;o>i;i++){var s=r?r[i]:i;if(!e(t[s],s,t))return!1}return!0},m.some=m.any=function(t,e,n){e=_(e,n);for(var r=!C(t)&&m.keys(t),o=(r||t).length,i=0;o>i;i++){var s=r?r[i]:i;if(e(t[s],s,t))return!0}return!1},m.contains=m.includes=m.include=function(t,e,n,r){return C(t)||(t=m.values(t)),("number"!=typeof n||r)&&(n=0),m.indexOf(t,e,n)>=0},m.invoke=function(t,e){var n=c.call(arguments,2),r=m.isFunction(e);return m.map(t,function(t){var o=r?e:t[e];return null==o?o:o.apply(t,n)})},m.pluck=function(t,e){return m.map(t,m.property(e))},m.where=function(t,e){return m.filter(t,m.matcher(e))},m.findWhere=function(t,e){return m.find(t,m.matcher(e))},m.max=function(t,e,n){var r,o,i=-1/0,s=-1/0;if(null==e&&null!=t){t=C(t)?t:m.values(t);for(var a=0,l=t.length;l>a;a++)r=t[a],r>i&&(i=r)}else e=_(e,n),m.each(t,function(t,n,r){o=e(t,n,r),(o>s||o===-1/0&&i===-1/0)&&(i=t,s=o)});return i},m.min=function(t,e,n){var r,o,i=1/0,s=1/0;if(null==e&&null!=t){t=C(t)?t:m.values(t);for(var a=0,l=t.length;l>a;a++)r=t[a],i>r&&(i=r)}else e=_(e,n),m.each(t,function(t,n,r){o=e(t,n,r),(s>o||1/0===o&&1/0===i)&&(i=t,s=o)});return i},m.shuffle=function(t){for(var e,n=C(t)?t:m.values(t),r=n.length,o=Array(r),i=0;r>i;i++)e=m.random(0,i),e!==i&&(o[i]=o[e]),o[e]=n[i];return o},m.sample=function(t,e,n){return null==e||n?(C(t)||(t=m.values(t)),t[m.random(t.length-1)]):m.shuffle(t).slice(0,Math.max(0,e))},m.sortBy=function(t,e,n){return e=_(e,n),m.pluck(m.map(t,function(t,n,r){return{value:t,index:n,criteria:e(t,n,r)}}).sort(function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(r>n||void 0===r)return-1}return t.index-e.index}),"value")};var O=function(t){return function(e,n,r){var o={};return n=_(n,r),m.each(e,function(r,i){var s=n(r,i,e);t(o,r,s)}),o}};m.groupBy=O(function(t,e,n){m.has(t,n)?t[n].push(e):t[n]=[e]}),m.indexBy=O(function(t,e,n){t[n]=e}),m.countBy=O(function(t,e,n){m.has(t,n)?t[n]++:t[n]=1}),m.toArray=function(t){return t?m.isArray(t)?c.call(t):C(t)?m.map(t,m.identity):m.values(t):[]},m.size=function(t){return null==t?0:C(t)?t.length:m.keys(t).length},m.partition=function(t,e,n){e=_(e,n);var r=[],o=[];return m.each(t,function(t,n,i){(e(t,n,i)?r:o).push(t)}),[r,o]},m.first=m.head=m.take=function(t,e,n){return null==t?void 0:null==e||n?t[0]:m.initial(t,t.length-e)},m.initial=function(t,e,n){return c.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))},m.last=function(t,e,n){return null==t?void 0:null==e||n?t[t.length-1]:m.rest(t,Math.max(0,t.length-e))},m.rest=m.tail=m.drop=function(t,e,n){return c.call(t,null==e||n?1:e)},m.compact=function(t){return m.filter(t,m.identity)};var x=function(t,e,n,r){for(var o=[],i=0,s=r||0,a=E(t);a>s;s++){var l=t[s];if(C(l)&&(m.isArray(l)||m.isArguments(l))){e||(l=x(l,e,n));var u=0,c=l.length;for(o.length+=c;c>u;)o[i++]=l[u++]}else n||(o[i++]=l)}return o};m.flatten=function(t,e){return x(t,e,!1)},m.without=function(t){return m.difference(t,c.call(arguments,1))},m.uniq=m.unique=function(t,e,n,r){m.isBoolean(e)||(r=n,n=e,e=!1),null!=n&&(n=_(n,r));for(var o=[],i=[],s=0,a=E(t);a>s;s++){var l=t[s],u=n?n(l,s,t):l;e?(s&&i===u||o.push(l),i=u):n?m.contains(i,u)||(i.push(u),o.push(l)):m.contains(o,l)||o.push(l)}return o},m.union=function(){return m.uniq(x(arguments,!0,!0))},m.intersection=function(t){for(var e=[],n=arguments.length,r=0,o=E(t);o>r;r++){var i=t[r];if(!m.contains(e,i)){for(var s=1;n>s&&m.contains(arguments[s],i);s++);s===n&&e.push(i)}}return e},m.difference=function(t){var e=x(arguments,!0,!0,1);return m.filter(t,function(t){return!m.contains(e,t)})},m.zip=function(){return m.unzip(arguments)},m.unzip=function(t){for(var e=t&&m.max(t,E).length||0,n=Array(e),r=0;e>r;r++)n[r]=m.pluck(t,r);return n},m.object=function(t,e){for(var n={},r=0,o=E(t);o>r;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n},m.findIndex=e(1),m.findLastIndex=e(-1),m.sortedIndex=function(t,e,n,r){n=_(n,r,1);for(var o=n(e),i=0,s=E(t);s>i;){var a=Math.floor((i+s)/2);n(t[a])<o?i=a+1:s=a}return i},m.indexOf=n(1,m.findIndex,m.sortedIndex),m.lastIndexOf=n(-1,m.findLastIndex),m.range=function(t,e,n){null==e&&(e=t||0,t=0),n=n||1;
for(var r=Math.max(Math.ceil((e-t)/n),0),o=Array(r),i=0;r>i;i++,t+=n)o[i]=t;return o};var S=function(t,e,n,r,o){if(!(r instanceof e))return t.apply(n,o);var i=T(t.prototype),s=t.apply(i,o);return m.isObject(s)?s:i};m.bind=function(t,e){if(y&&t.bind===y)return y.apply(t,c.call(arguments,1));if(!m.isFunction(t))throw new TypeError("Bind must be called on a function");var n=c.call(arguments,2),r=function(){return S(t,r,e,this,n.concat(c.call(arguments)))};return r},m.partial=function(t){var e=c.call(arguments,1),n=function(){for(var r=0,o=e.length,i=Array(o),s=0;o>s;s++)i[s]=e[s]===m?arguments[r++]:e[s];for(;r<arguments.length;)i.push(arguments[r++]);return S(t,n,this,this,i)};return n},m.bindAll=function(t){var e,n,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(e=1;r>e;e++)n=arguments[e],t[n]=m.bind(t[n],t);return t},m.memoize=function(t,e){var n=function(r){var o=n.cache,i=""+(e?e.apply(this,arguments):r);return m.has(o,i)||(o[i]=t.apply(this,arguments)),o[i]};return n.cache={},n},m.delay=function(t,e){var n=c.call(arguments,2);return setTimeout(function(){return t.apply(null,n)},e)},m.defer=m.partial(m.delay,m,1),m.throttle=function(t,e,n){var r,o,i,s=null,a=0;n||(n={});var l=function(){a=n.leading===!1?0:m.now(),s=null,i=t.apply(r,o),s||(r=o=null)};return function(){var u=m.now();a||n.leading!==!1||(a=u);var c=e-(u-a);return r=this,o=arguments,0>=c||c>e?(s&&(clearTimeout(s),s=null),a=u,i=t.apply(r,o),s||(r=o=null)):s||n.trailing===!1||(s=setTimeout(l,c)),i}},m.debounce=function(t,e,n){var r,o,i,s,a,l=function(){var u=m.now()-s;e>u&&u>=0?r=setTimeout(l,e-u):(r=null,n||(a=t.apply(i,o),r||(i=o=null)))};return function(){i=this,o=arguments,s=m.now();var u=n&&!r;return r||(r=setTimeout(l,e)),u&&(a=t.apply(i,o),i=o=null),a}},m.wrap=function(t,e){return m.partial(e,t)},m.negate=function(t){return function(){return!t.apply(this,arguments)}},m.compose=function(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}},m.after=function(t,e){return function(){return--t<1?e.apply(this,arguments):void 0}},m.before=function(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),1>=t&&(e=null),n}},m.once=m.partial(m.before,2);var P=!{toString:null}.propertyIsEnumerable("toString"),M=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];m.keys=function(t){if(!m.isObject(t))return[];if(h)return h(t);var e=[];for(var n in t)m.has(t,n)&&e.push(n);return P&&r(t,e),e},m.allKeys=function(t){if(!m.isObject(t))return[];var e=[];for(var n in t)e.push(n);return P&&r(t,e),e},m.values=function(t){for(var e=m.keys(t),n=e.length,r=Array(n),o=0;n>o;o++)r[o]=t[e[o]];return r},m.mapObject=function(t,e,n){e=_(e,n);for(var r,o=m.keys(t),i=o.length,s={},a=0;i>a;a++)r=o[a],s[r]=e(t[r],r,t);return s},m.pairs=function(t){for(var e=m.keys(t),n=e.length,r=Array(n),o=0;n>o;o++)r[o]=[e[o],t[e[o]]];return r},m.invert=function(t){for(var e={},n=m.keys(t),r=0,o=n.length;o>r;r++)e[t[n[r]]]=n[r];return e},m.functions=m.methods=function(t){var e=[];for(var n in t)m.isFunction(t[n])&&e.push(n);return e.sort()},m.extend=j(m.allKeys),m.extendOwn=m.assign=j(m.keys),m.findKey=function(t,e,n){e=_(e,n);for(var r,o=m.keys(t),i=0,s=o.length;s>i;i++)if(r=o[i],e(t[r],r,t))return r},m.pick=function(t,e,n){var r,o,i={},s=t;if(null==s)return i;m.isFunction(e)?(o=m.allKeys(s),r=b(e,n)):(o=x(arguments,!1,!1,1),r=function(t,e,n){return e in n},s=Object(s));for(var a=0,l=o.length;l>a;a++){var u=o[a],c=s[u];r(c,u,s)&&(i[u]=c)}return i},m.omit=function(t,e,n){if(m.isFunction(e))e=m.negate(e);else{var r=m.map(x(arguments,!1,!1,1),String);e=function(t,e){return!m.contains(r,e)}}return m.pick(t,e,n)},m.defaults=j(m.allKeys,!0),m.create=function(t,e){var n=T(t);return e&&m.extendOwn(n,e),n},m.clone=function(t){return m.isObject(t)?m.isArray(t)?t.slice():m.extend({},t):t},m.tap=function(t,e){return e(t),t},m.isMatch=function(t,e){var n=m.keys(e),r=n.length;if(null==t)return!r;for(var o=Object(t),i=0;r>i;i++){var s=n[i];if(e[s]!==o[s]||!(s in o))return!1}return!0};var A=function(t,e,n,r){if(t===e)return 0!==t||1/t===1/e;if(null==t||null==e)return t===e;t instanceof m&&(t=t._wrapped),e instanceof m&&(e=e._wrapped);var o=p.call(t);if(o!==p.call(e))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!==+t?+e!==+e:0===+t?1/+t===1/e:+t===+e;case"[object Date]":case"[object Boolean]":return+t===+e}var i="[object Array]"===o;if(!i){if("object"!=typeof t||"object"!=typeof e)return!1;var s=t.constructor,a=e.constructor;if(s!==a&&!(m.isFunction(s)&&s instanceof s&&m.isFunction(a)&&a instanceof a)&&"constructor"in t&&"constructor"in e)return!1}n=n||[],r=r||[];for(var l=n.length;l--;)if(n[l]===t)return r[l]===e;if(n.push(t),r.push(e),i){if(l=t.length,l!==e.length)return!1;for(;l--;)if(!A(t[l],e[l],n,r))return!1}else{var u,c=m.keys(t);if(l=c.length,m.keys(e).length!==l)return!1;for(;l--;)if(u=c[l],!m.has(e,u)||!A(t[u],e[u],n,r))return!1}return n.pop(),r.pop(),!0};m.isEqual=function(t,e){return A(t,e)},m.isEmpty=function(t){return null==t?!0:C(t)&&(m.isArray(t)||m.isString(t)||m.isArguments(t))?0===t.length:0===m.keys(t).length},m.isElement=function(t){return!(!t||1!==t.nodeType)},m.isArray=d||function(t){return"[object Array]"===p.call(t)},m.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},m.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(t){m["is"+t]=function(e){return p.call(e)==="[object "+t+"]"}}),m.isArguments(arguments)||(m.isArguments=function(t){return m.has(t,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(m.isFunction=function(t){return"function"==typeof t||!1}),m.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},m.isNaN=function(t){return m.isNumber(t)&&t!==+t},m.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"===p.call(t)},m.isNull=function(t){return null===t},m.isUndefined=function(t){return void 0===t},m.has=function(t,e){return null!=t&&f.call(t,e)},m.noConflict=function(){return o._=i,this},m.identity=function(t){return t},m.constant=function(t){return function(){return t}},m.noop=function(){},m.property=w,m.propertyOf=function(t){return null==t?function(){}:function(e){return t[e]}},m.matcher=m.matches=function(t){return t=m.extendOwn({},t),function(e){return m.isMatch(e,t)}},m.times=function(t,e,n){var r=Array(Math.max(0,t));e=b(e,n,1);for(var o=0;t>o;o++)r[o]=e(o);return r},m.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},m.now=Date.now||function(){return(new Date).getTime()};var R={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},I=m.invert(R),V=function(t){var e=function(e){return t[e]},n="(?:"+m.keys(t).join("|")+")",r=RegExp(n),o=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(o,e):t}};m.escape=V(R),m.unescape=V(I),m.result=function(t,e,n){var r=null==t?void 0:t[e];return void 0===r&&(r=n),m.isFunction(r)?r.call(t):r};var L=0;m.uniqueId=function(t){var e=++L+"";return t?t+e:e},m.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var N=/(.)^/,D={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},F=/\\|'|\r|\n|\u2028|\u2029/g,B=function(t){return"\\"+D[t]};m.template=function(t,e,n){!e&&n&&(e=n),e=m.defaults({},e,m.templateSettings);var r=RegExp([(e.escape||N).source,(e.interpolate||N).source,(e.evaluate||N).source].join("|")+"|$","g"),o=0,i="__p+='";t.replace(r,function(e,n,r,s,a){return i+=t.slice(o,a).replace(F,B),o=a+e.length,n?i+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?i+="'+\n((__t=("+r+"))==null?'':__t)+\n'":s&&(i+="';\n"+s+"\n__p+='"),e}),i+="';\n",e.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var s=new Function(e.variable||"obj","_",i)}catch(a){throw a.source=i,a}var l=function(t){return s.call(this,t,m)},u=e.variable||"obj";return l.source="function("+u+"){\n"+i+"}",l},m.chain=function(t){var e=m(t);return e._chain=!0,e};var H=function(t,e){return t._chain?m(e).chain():e};m.mixin=function(t){m.each(m.functions(t),function(e){var n=m[e]=t[e];m.prototype[e]=function(){var t=[this._wrapped];return u.apply(t,arguments),H(this,n.apply(m,t))}})},m.mixin(m),m.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=s[t];m.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0],H(this,n)}}),m.each(["concat","join","slice"],function(t){var e=s[t];m.prototype[t]=function(){return H(this,e.apply(this._wrapped,arguments))}}),m.prototype.value=function(){return this._wrapped},m.prototype.valueOf=m.prototype.toJSON=m.prototype.value,m.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return m})}.call(this);var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function t(t,e){var r=null;t.event?(r=t,r.file_url&&(r.file_format=n(r.file_url)),r.company_id=l,r.display_id=a,u&&(r.version=u),e(r)):e(r)}function e(){var t=new Date,e=t.getUTCFullYear(),n=t.getUTCMonth()+1,r=t.getUTCDate();return 10>n&&(n="0"+n),10>r&&(r="0"+r),""+e+n+r}function n(t){var e,n=/[?#&]/;return t&&"string"==typeof t?(e=t.substr(t.lastIndexOf(".")+1),n.test(e)&&(e=e.substr(0,-1!==e.indexOf("?")?e.indexOf("?"):e.length),e=e.substr(0,-1!==e.indexOf("#")?e.indexOf("#"):e.length),e=e.substr(0,-1!==e.indexOf("&")?e.indexOf("&"):e.length)),e.toLowerCase()):null}function r(t){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:e(),rows:[{insertId:""}]},r=JSON.parse(JSON.stringify(n));return r.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),r.rows[0].json=JSON.parse(JSON.stringify(t)),r.rows[0].json.ts=(new Date).toISOString(),r}function o(e,n){t(n,function(t){null!==t&&RiseVision.Common.Logger.log(e,t)})}function i(t,e){l=t,a=e}function s(t){u=t}var a="",l="",u=null;return{getInsertData:r,getFileFormat:n,logEvent:o,setIds:i,setVersion:s}}(),RiseVision.Common.Logger=function(t){"use strict";function e(t){var e=new XMLHttpRequest;return new Date-u<358e4?t({}):(e.open("POST",o,!0),e.onloadend=function(){var n=JSON.parse(e.response);t({token:n.access_token,refreshedAt:new Date})},e.send(),void 0)}function n(t){return s&&l===t}function r(r,o){function p(e){var n,s,a=new XMLHttpRequest;s=i.replace("TABLE_ID",r),u=e.refreshedAt||u,c=e.token||c,n=t.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+c),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!r||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),e(p)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",i="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",u=0,c="";return{log:r}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function t(t,e){var n="font-family: "+decodeURIComponent(e.font.family).replace(/'/g,"")+"; ",r="color: "+(e.color?e.color:e.forecolor)+"; ",o="font-size: "+(-1===e.size.indexOf("px")?e.size+"px; ":e.size+"; "),i="font-weight: "+(e.bold?"bold":"normal")+"; ",s="font-style: "+(e.italic?"italic":"normal")+"; ",a="text-decoration: "+(e.underline?"underline":"none")+"; ",l="background-color: "+(e.highlightColor?e.highlightColor:e.backcolor)+";";return"."+t+" {"+n+r+o+i+s+a+l+"}"}function e(t){for(var e=document.createElement("style"),n=0,r=t.length;r>n;n++)e.appendChild(document.createTextNode(t[n]));document.head.appendChild(e)}function n(n,i){function s(){i&&"function"==typeof i&&i()}function a(){s()}var l=null,u=[],c=[],p=[];if(!n||0===n.length)return s(),void 0;n.forEach(function(n){n.class&&n.fontStyle&&e([t(n.class,n.fontStyle)])});for(var f=0;f<n.length;f++)n[f].fontStyle&&n[f].fontStyle.font.type&&"google"===n[f].fontStyle.font.type&&(l=n[f].fontStyle.font.family.split(",")[0],l=l.replace(/'/g,""),u.push(l));for(f=0;f<n.length;f++)n[f].fontStyle&&n[f].fontStyle.font.type&&"custom"===n[f].fontStyle.font.type&&(c.push(decodeURIComponent(n[f].fontStyle.font.family).replace(/'/g,"")),p.push(n[f].fontStyle.font.url.replace(/'/g,"\\'")));if(0===u.length&&0===c.length)s();else{for(var d=0;d<c.length;d+=1)r(c[d],p[d]);u.length>0?o(u,a):s()}}function r(t,e,n){var r=null,o="font-family: "+t+"; src: url('"+e+"');";n=n||document,r=n.styleSheets[0],null!==r&&r.addRule("@font-face",o)}function o(t,e){WebFont.load({google:{families:t},active:function(){e&&"function"==typeof e&&e()},inactive:function(){e&&"function"==typeof e&&e()},timeout:2e3})}function i(t){for(var e=t.length,n=[],r=0;e>r;r++)n[r]=new Image,n[r].src=t[r]}function s(t){for(var e,n=window.location.search.substring(1),r=n.split("&"),o=0;o<r.length;o++)if(e=r[o].split("="),e[0]==t)return decodeURIComponent(e[1]);return""}function a(t){var e="";switch(t){case 404:e="The file does not exist or cannot be accessed.";break;case 507:e="There is not enough disk space to save the file on Rise Cache.";break;default:e="There was a problem retrieving the file from Rise Cache."}return e}function l(t){var e=document.createElement("div");return e.innerHTML=t,e.textContent}function u(t,e){var n=new XMLHttpRequest;if(t&&e&&"function"==typeof e){n.open("HEAD",t+"?cb="+(new Date).getTime(),!1);try{n.send(),e(n.status>=200&&n.status<304)}catch(r){e(!1)}}}function c(){var t=25,e=navigator.userAgent.match(/Chrome\/(\S+)/),n=e?e[1]:0;return n&&(n=parseInt(n.substring(0,n.indexOf("."))),t>=n)?!0:!1}function p(t,e){return/^(?:f|ht)tps?\:\/\//.test(t)||(t=(e?"https://":"http://")+t),t}return{addProtocol:p,getQueryParameter:s,getFontCssStyle:t,addCSSRules:e,loadFonts:n,loadCustomFont:r,loadGoogleFonts:o,preloadImages:i,getRiseCacheErrorMessage:a,unescapeHTML:l,hasInternetConnection:u,isLegacy:c}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function t(t){var e=new XMLHttpRequest,n=this;t&&"function"==typeof t&&(l?e.open("GET",i,!0):e.open("GET",i+"ping?callback=_",!0),e.onreadystatechange=function(){try{if(4===e.readyState)if(s=!0,200===e.status)a=!0,t(!0,e.responseText);else{if(404===e.status)return l=!0,n.ping(t);console.debug("Rise Cache is not running"),a=!1,t(!1,null)}}catch(r){console.debug("Caught exception: ",r.description)}},e.send())}function e(t,e,n){function r(){var e,r,s;a?e=l?i+"files?url="+encodeURIComponent(t):n?i+"?url="+encodeURIComponent(t):i+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(t):n?e=t:(r=t.split("?"),s=1===r.length?"?":"&",e=t+s+"cb="+(new Date).getTime()),o("HEAD",e)}function o(t,n){var r=new XMLHttpRequest,i={xhr:r,url:n};a?(r.open(t,n,!0),r.addEventListener("loadend",function(){var s=r.status||0;202===s?(u++,3>u?setTimeout(function(){o(t,n)},3e3):e(i,new Error("File is downloading"))):s>=200&&300>s?e(i):"HEAD"===t?o("GET",n):e(i,new Error("The request failed with status code: "+s))}),r.send()):e(i)}if(t&&e&&"function"==typeof e){var u=0;return s?r():this.ping(r)}}function n(t){var e="";switch(t){case 502:e="There was a problem retrieving the file.";break;case 504:e="Unable to download the file. The server is not responding.";break;case 507:e="There is not enough disk space to save the file on Rise Cache.";break;case 534:e="The file does not exist or cannot be accessed.";break;default:e=""}return e}function r(t){return t&&"function"==typeof t?s?(t(a),void 0):this.ping(function(){t(a)}):void 0}function o(t){return t&&"function"==typeof t?s?(t(l),void 0):this.ping(function(){t(l)}):void 0}var i="//localhost:9494/",s=!1,a=!1,l=!1;return{getErrorMessage:n,getFile:e,isRiseCacheRunning:r,isV2Running:o,ping:t}}();var version="2.0.0";"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");const config={STORAGE_ENV:"prod",COMPONENTS_PATH:"components/"};var RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(t,e){"use strict";function n(){e.rpc.call("","rsevent_done",null,x.getString("id")),null!==N&&c(N,!0),c({event:"done"},!1)}function r(){e.rpc.call("","rsevent_ready",null,x.getString("id"),!0,!0,!0,!0,!0)}function o(){clearTimeout(D),D=null}function i(){o(),D=setTimeout(function(){n()},5e3)}function s(){if(V&&V.length>0){if("file"===E)return V[0];if("folder"===E&&L)return V[L]}return null}function a(){return B}function l(){return H}function u(t,e){F=!0,B="undefined"!=typeof e,M.show(t),L=null,R||i()}function c(t,e){e&&(N=t),t.file_url||(t.file_url=s()),RiseVision.Common.LoggerUtils.logEvent(g(),t)}function p(t){"file"===E?V[0]=t:"folder"===E&&(V=t),U=!1,M.hide(),R||y()}function f(t){"file"===E?V[0]=t:"folder"===E&&(V=t),A&&A.update(V),F=!1,H=!1,B=!1,U=!1,N=null}function d(t){U=!0,M.show(t),L=null,R||i()}function h(){R=!0,o(),A&&(I?A.pause():(L=null,A.reset()))}function y(){return C&&(C=!1,c({event:"configuration",event_details:O},!1)),R=!1,c({event:"play"},!1),F?(i(),void 0):U?("file"===E&&S&&S.retry(),void 0):(A?(M.hide(),A.play()):V&&V.length>0&&(A=new RiseVision.Video.PlayerVJS(k),A.init(V)),void 0)}function g(){return"video_v2_events"}function v(){L=null,n()}function m(){M.hide(),!R&&A&&A.play()}function b(t){L=t}function j(t,n){var o;k=_.clone(t),E=n,x=new e.Prefs,document.getElementById("container").style.width=x.getInt("rsW")+"px",document.getElementById("container").style.height=x.getInt("rsH")+"px",k.width=x.getInt("rsW"),k.height=x.getInt("rsH"),k.video.hasOwnProperty("resume")&&(I=k.video.resume),M=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),RiseVision.Common.Utilities.isLegacy()?u("This version of Video Widget is not supported on this version of Rise Player. Please use the latest Rise Player version available at https://help.risevision.com/user/create-a-display"):(M.show("Please wait while your video is downloaded."),"file"===E?(o=0!==Object.keys(k.storage).length,o?(O="storage file",S=new RiseVision.Video.StorageFile(k),S.init()):(O="custom",P=new RiseVision.Video.NonStorage(k),P.init())):"folder"===E&&(O="storage folder",S=new RiseVision.Video.StorageFolder(k),S.init())),r()}function T(t){var e=null,n={},r="Sorry, there was a problem playing the video.",o="Error loading media: File could not be played",i="Error loading YouTube: Video could not be played",s="Error loading player: No media sources found",a="Error loading playlist: No playable sources found",l="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.",p="The format of that video is not supported";t&&(t.type&&t.message?e=t.type+" - "+t.message:t.type?e=t.type:t.message&&(e=t.message),t.message&&(t.message===o||t.message===i?r=l:(t.message===s||t.message===a)&&(r=p))),n.event="player error",n.event_details=e,H=!0,c(n,!0),u(r)}function w(){h()}var k,E,C=!0,O=null,x=null,S=null,P=null,M=null,A=null,R=!0,I=!0,V=[],L=null,N=null,D=null,F=!1,B=!1,H=!1,U=!1;return{getTableName:g,hasPlayerError:l,hasStorageError:a,logEvent:c,onFileInit:p,onFileRefresh:f,onFileUnavailable:d,pause:h,play:y,setAdditionalParams:j,showError:u,playerEnded:v,playerReady:m,playerError:T,playerItemChange:b,stop:w}}(window,gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.PlayerUtils=function(){"use strict";function t(t){var e,n=[];for(e=0;e<t.length;e+=1)n.push({file:t[e],type:this.getVideoFileType(t[e])});return n}function e(t){var e,n=[".mp4",".webm"],r=t.toLowerCase(),o=null;for(e=0;e<=n.length;e+=1)if(-1!==r.indexOf(n[e])){o=n[e].substr(n[e].lastIndexOf(".")+1);break}return o}return{getPlaylist:t,getVideoFileType:e}}();var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(t){"use strict";function e(){var e=document.getElementById("videoStorage");e&&(e.addEventListener("rise-storage-response",function(t){t.detail&&t.detail.url&&(r?(r=!1,RiseVision.Video.onFileInit(t.detail.url)):t.detail.hasOwnProperty("changed")&&(t.detail.changed?RiseVision.Video.onFileRefresh(t.detail.url):(RiseVision.Video.hasStorageError()||RiseVision.Video.hasPlayerError())&&RiseVision.Video.onFileRefresh(t.detail.url)))}),e.addEventListener("rise-storage-api-error",function(t){var e={event:"storage api error",event_details:"Response code: "+t.detail.code+", message: "+t.detail.message};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),e.addEventListener("rise-storage-no-file",function(t){var e={event:"storage file not found",event_details:t.detail};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),e.addEventListener("rise-storage-file-throttled",function(t){var e={event:"storage file throttled",file_url:t.detail};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),e.addEventListener("rise-storage-subscription-expired",function(){var t={event:"storage subscription expired"};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),e.addEventListener("rise-storage-subscription-error",function(t){var e={event:"storage subscription error",event_details:"The request failed with status code: "+t.detail.error.currentTarget.status};RiseVision.Video.logEvent(e,!0)}),e.addEventListener("rise-storage-error",function(t){var e={event:"rise storage error",event_details:"The request failed with status code: "+t.detail.error.currentTarget.status};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),e.addEventListener("rise-cache-error",function(t){var e,n={event:"rise cache error",event_details:t.detail.error.message},r=0;RiseVision.Video.logEvent(n,!0),i.isV2Running()?e=i.getErrorMessage(r):(t.detail.error.message&&(r=+t.detail.error.message.substring(t.detail.error.message.indexOf(":")+2)),e=o.getRiseCacheErrorMessage(r)),RiseVision.Video.showError(e)}),e.addEventListener("rise-cache-not-running",function(t){var e={event:"rise cache not running",event_details:t.detail&&t.detail.error?t.detail.error.message:""};RiseVision.Video.logEvent(e,!0)}),e.addEventListener("rise-cache-file-unavailable",function(){RiseVision.Video.onFileUnavailable("File is downloading")}),e.setAttribute("folder",t.storage.folder),e.setAttribute("fileName",t.storage.fileName),e.setAttribute("companyId",t.storage.companyId),e.setAttribute("env",config.STORAGE_ENV))}function n(){var t=document.getElementById("videoStorage")}var r=!0,o=RiseVision.Common.Utilities,i=RiseVision.Common.RiseCache;return{init:e,retry:n}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(t){"use strict";function e(){return _.pluck(l,"url")}function n(t){return _.find(l,function(e){return t.name===e.name})}function r(t){var e=n(t);e&&l.splice(l.indexOf(e),1)}function o(t){var e=n(t);e&&(e.url=t.url)}function i(t){var e=n(t);e||(t.fileName=t.name.slice(t.name.lastIndexOf("/")+1,t.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,t,"fileName"),0,t))}function s(){var n=document.getElementById("videoStorage");n&&(n.addEventListener("rise-storage-response",function(t){var n=t.detail;if(n.added&&(i(n),a))return a=!1,RiseVision.Video.onFileInit(e()),void 0;if(n.hasOwnProperty("changed"))if(n.changed)o(n);else if(!RiseVision.Video.hasStorageError()&&!RiseVision.Video.hasPlayerError())return;n.deleted&&r(n),RiseVision.Video.onFileRefresh(e())}),n.addEventListener("rise-storage-api-error",function(t){var e={event:"storage api error",event_details:"Response code: "+t.detail.code+", message: "+t.detail.message};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),n.addEventListener("rise-storage-empty-folder",function(){var t={event:"storage folder empty"};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),n.addEventListener("rise-storage-no-folder",function(t){var e={event:"storage folder doesn't exist",event_details:t.detail};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not exist or has been moved to Trash.")}),n.addEventListener("rise-storage-folder-invalid",function(){var t={event:"storage folder format(s) invalid"};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("The selected folder does not contain any supported video formats.")}),n.addEventListener("rise-storage-subscription-expired",function(){var t={event:"storage subscription expired"};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),n.addEventListener("rise-storage-subscription-error",function(t){var e={event:"storage subscription error",event_details:"The request failed with status code: "+t.detail.error.currentTarget.status};RiseVision.Video.logEvent(e,!0)}),n.addEventListener("rise-storage-error",function(t){var e={event:"rise storage error",event_details:"The request failed with status code: "+t.detail.error.currentTarget.status};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),n.addEventListener("rise-cache-error",function(t){var e,n={event:"rise cache error",event_details:t.detail.error.message},r=0;RiseVision.Video.logEvent(n,!0),c.isV2Running()?e=c.getErrorMessage(r):(t.detail.error.message&&(r=+t.detail.error.message.substring(t.detail.error.message.indexOf(":")+2)),e=u.getRiseCacheErrorMessage(r)),RiseVision.Video.showError(e)}),n.addEventListener("rise-cache-not-running",function(t){var e={event:"rise cache not running",event_details:t.detail&&t.detail.error?t.detail.error.message:""};RiseVision.Video.logEvent(e,!0)}),n.setAttribute("fileType","video"),n.setAttribute("companyId",t.storage.companyId),n.setAttribute("folder",t.storage.folder),n.setAttribute("env",config.STORAGE_ENV))}var a=!0,l=[],u=RiseVision.Common.Utilities,c=RiseVision.Common.RiseCache;return{init:s}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(t){"use strict";function e(t){o.getFile(u,function(t,e){var r,s=0;e?e.message&&"File is downloading"===e.message?RiseVision.Video.onFileUnavailable(e.message):(RiseVision.Video.logEvent({event:"non-storage error",event_details:e.message,file_url:t.url},!0),o.isV2Running()?r=o.getErrorMessage(s):(e.message&&(s=+e.message.substring(e.message.indexOf(":")+2)),r=i.getRiseCacheErrorMessage(s)),RiseVision.Video.showError(r)):l?(l=!1,RiseVision.Video.onFileInit(t.url),n()):RiseVision.Video.onFileRefresh(t.url)},t)}function n(){null===a&&(a=setInterval(function(){e(!1)},s))}function r(){u=t.url&&""!==t.url?t.url:t.selector.url,u=i.addProtocol(u),e(!0)}var o=RiseVision.Common.RiseCache,i=RiseVision.Common.Utilities,s=9e5,a=null,l=!0,u="";return{init:r}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.PlayerVJS=function(t){"use strict";function e(){return{controls:!1,height:t.height,width:t.width}}function n(){l.src({type:"video/"+c.getVideoFileType(u[0]),src:u[0]}),l.on("ended",function(){RiseVision.Video.playerEnded()}),RiseVision.Video.playerReady()}function r(t){u=t,l=videojs("player",e(),function(){n()})}function o(){l.paused()||l.pause()}function i(){p&&(p=!1,l.src({type:c.getVideoFileType(u[0]),src:u[0]})),l.play()}function s(){o(),l.remainingTime()>0&&l.currentTime(0)}function a(t){u=t,p=!0}var l=null,u=null,c=RiseVision.Video.PlayerUtils,p=!1;return{init:r,pause:o,play:i,reset:s,update:a}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(t,e){"use strict";function n(){try{e.style.height=t.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function r(){if(i){for(;e.firstChild;)e.removeChild(e.firstChild);e.style.display="none",t.style.display="block",i=!1}}function o(n){var r,o=document.createDocumentFragment();i?(r=e.querySelector(".message"),r.innerHTML=n):(t.style.display="none",e.style.display="block",r=document.createElement("p"),r.innerHTML=n,r.setAttribute("class","message"),o.appendChild(r),e.appendChild(o),i=!0)}var i=!1;return n(),{hide:r,show:o}},function(t,e){"use strict";function n(t,e){var n=null,r="",o="",i="";Array.isArray(t)&&t.length>0&&Array.isArray(e)&&e.length>0&&("companyId"===t[0]&&(o=e[0]),"displayId"===t[1]&&(i=e[1]?e[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,i),RiseVision.Common.LoggerUtils.setVersion(version),"additionalParams"===t[2]&&(n=JSON.parse(e[2]),r=0!==Object.keys(n.storage).length?n.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(n,r)))}function r(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function i(){RiseVision.Video.stop()}function s(){l&&""!==l&&(e.rpc.register("rscmd_play_"+l,r),e.rpc.register("rscmd_pause_"+l,o),e.rpc.register("rscmd_stop_"+l,i),e.rpc.register("rsparam_set_"+l,n),e.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var a=new e.Prefs,l=a.getString("id");t.oncontextmenu=function(){return!1},RiseVision.Common.RiseCache.isV2Running(function(e){function n(){t.removeEventListener("WebComponentsReady",n),p=!0,c&&p&&s()}function r(){u.removeEventListener("rise-storage-ready",r),c=!0,c&&p&&s()}var o=document.createDocumentFragment(),i=document.createElement("link"),a=document.createElement("script"),l=config.COMPONENTS_PATH+(e?"rise-storage-v2":"rise-storage")+"/rise-storage.html",u=document.createElement("rise-storage"),c=!1,p=!1;a.src=config.COMPONENTS_PATH+"webcomponentsjs/webcomponents-lite.min.js",t.addEventListener("WebComponentsReady",n),document.getElementsByTagName("head")[0].appendChild(a),i.setAttribute("rel","import"),i.setAttribute("href",l),document.getElementsByTagName("head")[0].appendChild(i),u.setAttribute("id","videoStorage"),u.setAttribute("refresh",5),e&&u.setAttribute("usage","widget"),u.addEventListener("rise-storage-ready",r),o.appendChild(u),document.body.appendChild(o)})}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var t=document.createElement("script");t.type="text/javascript",t.async=!0,t.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(t,e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
