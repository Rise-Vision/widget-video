var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(e){"use strict";function n(e,n){Array.isArray(e)&&e.length>0&&Array.isArray(n)&&n.length>0&&("companyId"===e[0]&&(l=n[0]),"displayId"===e[1]&&(a=n[1]?n[1]:"preview"),d(l,a))}function t(t){t&&"function"==typeof t&&(d=t,l&&a?d(l,a):s&&""!==s&&(e.rpc.register("rsparam_set_"+s,n),e.rpc.call("","rsparam_get",null,s,["companyId","displayId"])))}function i(e){var n,t=/[?#&]/;return e&&"string"==typeof e?(n=e.substr(e.lastIndexOf(".")+1),t.test(n)&&(n=n.substr(0,-1!==n.indexOf("?")?n.indexOf("?"):n.length),n=n.substr(0,-1!==n.indexOf("#")?n.indexOf("#"):n.length),n=n.substr(0,-1!==n.indexOf("&")?n.indexOf("&"):n.length)),n.toLowerCase()):null}function o(e){var n=JSON.parse(JSON.stringify(u));return n.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),n.rows[0].json=JSON.parse(JSON.stringify(e)),n.rows[0].json.ts=(new Date).toISOString(),n}function r(e){var n=new Date,t=n.getUTCFullYear(),i=n.getUTCMonth()+1,o=n.getUTCDate();return 10>i&&(i="0"+i),10>o&&(o="0"+o),e+t+i+o}var s=(new e.Prefs).getString("id"),a="",l="",d=null,u={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,rows:[{insertId:""}]};return{getIds:t,getInsertData:o,getFileFormat:i,getTable:r}}(gadgets),RiseVision.Common.Logger=function(e){"use strict";function n(e){var n=new XMLHttpRequest;return new Date-d<358e4?e({}):(n.open("POST",o,!0),n.onloadend=function(){var t=JSON.parse(n.response);e({token:t.access_token,refreshedAt:new Date})},n.send(),void 0)}function t(e){return s&&l===e}function i(i,o){function c(n){var t,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",e.getTable(i)),d=n.refreshedAt||d,u=n.token||u,t=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(t))}if(i&&o&&o.event&&!t(o.event))return s=!0,l=o.event,setTimeout(function(){s=!1},a),n(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,u="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var n=new XMLHttpRequest;e&&"function"==typeof e&&(n.open("GET",t+"ping?callback=_",!0),n.onreadystatechange=function(){try{4===n.readyState&&(i=!0,200===n.status?(o=!0,e(!0,n.responseText)):(console.debug("Rise Cache is not running"),o=!1,e(!1,null)))}catch(t){console.debug("Caught exception: ",t.description)}},n.send())}function n(e,n,r){function s(i){var o,s,a,l,d=new XMLHttpRequest;i?(o=r?t+"?url="+encodeURIComponent(e):t+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e),l={xhr:d,url:o},d.open("GET",o,!0),d.addEventListener("loadend",function(){var e=d.status||0;0===e||e>=200&&300>e?n(l):n(l,new Error("The request failed with status code: "+e))}),d.send()):(r?o=e:(s=e.split("?"),a=1===s.length?"?":"&",o=e+a+"cb="+(new Date).getTime()),l={xhr:null,url:o},n(l))}if(e&&n&&"function"==typeof n)return i?s(o):this.ping(s)}var t="http://localhost:9494/",i=!1,o=!1;return{getFile:n,ping:e}}(),"undefined"==typeof config){var config={SKIN:"skin/RVSkin.xml",STORAGE_ENV:"prod"};"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json")}var RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e){"use strict";function n(){e.rpc.call("","rsevent_done",null,E.getString("id")),null!==A&&d(A,!0),d({event:"done"},!1)}function t(){e.rpc.call("","rsevent_ready",null,E.getString("id"),!0,!0,!0,!0,!0)}function i(){clearTimeout(F),F=null}function o(){i(),F=setTimeout(function(){n()},5e3)}function r(){var e=I.getFrameObject(S);return e?e.getPlaybackData():null}function s(){var e=null;if(L&&L.length>0){if("file"===R)return L[0];if("folder"===R&&(e=r()))return L[e.index]}return null}function a(e,n){var t={},i=RiseVision.Common.LoggerUtils,o=null;e.event&&(t.event=e.event),e.event_details&&(t.event_details=e.event_details),o=e.url?e.url:s(),t.file_url=o,t.file_format=i.getFileFormat(o),i.getIds(function(e,i){t.company_id=e,t.display_id=i,n(t)})}function l(e){N=!0,b.show(e),I.remove(S,function(){T||o()})}function d(e,n){n&&(A=e),a(e,function(e){x.log("video_events",e)})}function u(e){"file"===R?L[0]=e:"folder"===R&&(L=e),b.hide(),T||g()}function c(e){"file"===R?L[0]=e:"folder"===R&&(L=e),O=!1,A=null}function f(){var e=I.getFrameObject(S);return T=!0,N?(i(),void 0):(e&&e.pause(),void 0)}function g(){var e=I.getFrameObject(S);return T=!1,d({event:"play"},!1),N?(o(),void 0):(O||(e?e.play():L&&L.length>0&&("file"===R?(I.add(0),I.createFramePlayer(0,y,L[0],config.SKIN,"player-file.html")):"folder"===R&&(I.add(0),I.createFramePlayer(0,y,L,config.SKIN,"player-folder.html")))),void 0)}function m(){I.remove(S,function(){n()})}function v(){var e;b.hide(),T||(e=I.getFrameObject(S),e&&e.play())}function p(n,i){var o;y=_.clone(n),R=i,E=new e.Prefs,document.getElementById("videoContainer").style.height=E.getInt("rsH")+"px",y.width=E.getInt("rsW"),y.height=E.getInt("rsH"),b=new RiseVision.Common.Message(document.getElementById("videoContainer"),document.getElementById("messageContainer")),b.show("Please wait while your video is downloaded."),I=new RiseVision.Common.Video.FrameController,"file"===R?(o=0!==Object.keys(y.storage).length,o?(w=new RiseVision.Video.StorageFile(y),w.init()):(C=new RiseVision.Video.NonStorage(y),C.init())):"folder"===R&&(w=new RiseVision.Video.StorageFolder(y),w.init()),t()}function V(e){var n=null,t={},i="",o="Sorry, there was a problem playing the video.",r="Error loading media: File could not be played",a="Error loading YouTube: Video could not be played",u="Error loading player: No playable sources found",c="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.";O=!0,e&&(e.type&&e.message?n=e.type+" - "+e.message:e.type?n=e.type:e.message&&(n=e.message),e.message&&(e.message===r||e.message===a?o=c:e.message===u&&(i=s(),i&&i.indexOf("www.youtube.com")>-1&&(o=c)))),t.event="player error",t.event_details=n,d(t,!0),l(o)}function h(){f()}var y,R,E=null,w=null,C=null,b=null,I=null,O=!1,T=!0,S=0,L=[],A=null,F=null,N=!1,x=RiseVision.Common.Logger;return{logEvent:d,onFileInit:u,onFileRefresh:c,pause:f,play:g,setAdditionalParams:p,showError:l,playerEnded:m,playerReady:v,playerError:V,stop:h}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function n(){var n=document.getElementById("videoStorage");n&&(n.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(t?(t=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&e.detail.changed&&RiseVision.Video.onFileRefresh(e.detail.url))}),n.addEventListener("rise-storage-no-file",function(e){var n={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),n.addEventListener("rise-storage-file-throttled",function(e){var n={event:"storage file throttled",url:e.detail};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),n.addEventListener("rise-storage-error",function(){var e={event:"storage error"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Storage.")}),n.addEventListener("rise-cache-error",function(){var e={event:"cache error"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Cache.")}),n.setAttribute("folder",e.storage.folder),n.setAttribute("fileName",e.storage.fileName),n.setAttribute("companyId",e.storage.companyId),n.setAttribute("env",config.STORAGE_ENV),n.go())}var t=!0;return{init:n}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function n(){return _.pluck(l,"url")}function t(e){return _.find(l,function(n){return e.name===n.name})}function i(e){var n=t(e);n&&l.splice(l.indexOf(n),1)}function o(e){var n=t(e);n&&(n.url=e.url)}function r(e){var n=t(e);n||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function s(){var t=document.getElementById("videoStorage");t&&(t.addEventListener("rise-storage-response",function(e){var t=e.detail;return t.added&&(r(t),a)?(a=!1,RiseVision.Video.onFileInit(n()),void 0):(t.changed&&o(t),t.deleted&&i(t),RiseVision.Video.onFileRefresh(n()),void 0)}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),t.addEventListener("rise-storage-no-folder",function(e){var n={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("The selected folder does not exist.")}),t.addEventListener("rise-storage-error",function(){var e={event:"storage error"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Storage.")}),t.addEventListener("rise-cache-error",function(){var e={event:"cache error"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Cache.")}),t.setAttribute("fileType","video"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go())}var a=!0,l=[];return{init:s}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function n(n){o.getFile(e.url,function(e,n){n?RiseVision.Video.logEvent({event:"non-storage error",event_details:n.message,url:e.url}):a?(a=!1,RiseVision.Video.onFileInit(e.url),t()):RiseVision.Video.onFileRefresh(e.url)},n)}function t(){null===s&&(s=setInterval(function(){n(!1)},r))}function i(){n(!0)}var o=RiseVision.Common.RiseCache,r=9e5,s=null,a=!0;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Video=RiseVision.Common.Video||{},RiseVision.Common.Video.FrameController=function(){"use strict";function e(e){return document.getElementById(l+e)}function n(n){var t,i=e(n);return t=i.querySelector("iframe"),t?t.contentWindow?t.contentWindow:t.contentDocument.document?t.contentDocument.document:t.contentDocument:null}function t(t){var i,o=e(t),r=n(t);r&&(i=o.querySelector("iframe"),r.remove(),i.setAttribute("src","about:blank"))}function i(n){var t=e(n),i=document.createElement("iframe");i.setAttribute("allowTransparency",!0),i.setAttribute("frameborder","0"),i.setAttribute("scrolling","no"),t.appendChild(i)}function o(t,i,o,r,s){var a,l=e(t),d=n(t);d&&(a=l.querySelector("iframe"),a.onload=function(){a.onload=null,d.init(i,o,r),d.load()},a.setAttribute("src",s))}function r(n){var t=e(n);t.style.visibility="hidden"}function s(e,n){var i=document.getElementById(l+e);t(e),setTimeout(function(){for(;i.firstChild;)i.removeChild(i.firstChild);n&&"function"==typeof n&&n()},200)}function a(n){var t=e(n);t.style.visibility="visible"}var l="if_";return{add:i,createFramePlayer:o,getFrameContainer:e,getFrameObject:n,hide:r,remove:s,show:a}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,n){"use strict";function t(){try{n.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function i(){if(r){for(;n.firstChild;)n.removeChild(n.firstChild);n.style.display="none",e.style.visibility="visible",r=!1}}function o(t){var i,o=document.createDocumentFragment();r?(i=n.querySelector(".message"),i.innerHTML=t):(e.style.visibility="hidden",n.style.display="block",i=document.createElement("p"),i.innerHTML=t,i.setAttribute("class","message"),o.appendChild(i),n.appendChild(o),r=!0)}var r=!1;return t(),{hide:i,show:o}},function(e,n){"use strict";function t(e,n){var t,i;Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(n)&&n.length>0&&(t=JSON.parse(n[0]),i=0!==Object.keys(t.storage).length?t.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(t,i))}function i(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function r(){RiseVision.Video.stop()}function s(){e.removeEventListener("WebComponentsReady",s),l&&""!==l&&(n.rpc.register("rscmd_play_"+l,i),n.rpc.register("rscmd_pause_"+l,o),n.rpc.register("rscmd_stop_"+l,r),n.rpc.register("rsparam_set_"+l,t),n.rpc.call("","rsparam_get",null,l,["additionalParams"]))}var a=new n.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",s)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)}();
//# sourceMappingURL=data:application/json;base64,
