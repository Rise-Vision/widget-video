var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,i){var t=null;e.event?(t=e,t.file_url&&(t.file_format=n(t.file_url)),t.company_id=l,t.display_id=a,d&&(t.version=d),i(t)):i(t)}function i(){var e=new Date,i=e.getUTCFullYear(),n=e.getUTCMonth()+1,t=e.getUTCDate();return 10>n&&(n="0"+n),10>t&&(t="0"+t),i+n+t}function n(e){var i,n=/[?#&]/;return e&&"string"==typeof e?(i=e.substr(e.lastIndexOf(".")+1),n.test(i)&&(i=i.substr(0,-1!==i.indexOf("?")?i.indexOf("?"):i.length),i=i.substr(0,-1!==i.indexOf("#")?i.indexOf("#"):i.length),i=i.substr(0,-1!==i.indexOf("&")?i.indexOf("&"):i.length)),i.toLowerCase()):null}function t(e){var n={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:i(),rows:[{insertId:""}]},t=JSON.parse(JSON.stringify(n));return t.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),t.rows[0].json=JSON.parse(JSON.stringify(e)),t.rows[0].json.ts=(new Date).toISOString(),t}function o(i,n){e(n,function(e){null!==e&&RiseVision.Common.Logger.log(i,e)})}function s(e,i){l=e,a=i}function r(e){d=e}var a="",l="",d=null;return{getInsertData:t,getFileFormat:n,logEvent:o,setIds:s,setVersion:r}}(),RiseVision.Common.Logger=function(e){"use strict";function i(e){var i=new XMLHttpRequest;return new Date-d<358e4?e({}):(i.open("POST",o,!0),i.onloadend=function(){var n=JSON.parse(i.response);e({token:n.access_token,refreshedAt:new Date})},i.send(),void 0)}function n(e){return r&&l===e}function t(t,o){function c(i){var n,r,a=new XMLHttpRequest;r=s.replace("TABLE_ID",t),d=i.refreshedAt||d,u=i.token||u,n=e.getInsertData(o),a.open("POST",r,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!t||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return r=!0,l=o.event,setTimeout(function(){r=!1},a),i(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",s="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",r=!1,a=1e3,l="",d=0,u="";return{log:t}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,i){var n="font-family: "+decodeURIComponent(i.font.family).replace(/'/g,"")+"; ",t="color: "+(i.color?i.color:i.forecolor)+"; ",o="font-size: "+(-1===i.size.indexOf("px")?i.size+"px; ":i.size+"; "),s="font-weight: "+(i.bold?"bold":"normal")+"; ",r="font-style: "+(i.italic?"italic":"normal")+"; ",a="text-decoration: "+(i.underline?"underline":"none")+"; ",l="background-color: "+(i.highlightColor?i.highlightColor:i.backcolor)+";";return"."+e+" {"+n+t+o+s+r+a+l+"}"}function i(e){for(var i=document.createElement("style"),n=0,t=e.length;t>n;n++)i.appendChild(document.createTextNode(e[n]));document.head.appendChild(i)}function n(n,s){function r(){s&&"function"==typeof s&&s()}function a(){r()}var l=null,d=[],u=[],c=[];if(!n||0===n.length)return r(),void 0;n.forEach(function(n){n.class&&n.fontStyle&&i([e(n.class,n.fontStyle)])});for(var f=0;f<n.length;f++)n[f].fontStyle&&n[f].fontStyle.font.type&&"google"===n[f].fontStyle.font.type&&(l=n[f].fontStyle.font.family.split(",")[0],l=l.replace(/'/g,""),d.push(l));for(f=0;f<n.length;f++)n[f].fontStyle&&n[f].fontStyle.font.type&&"custom"===n[f].fontStyle.font.type&&(u.push(decodeURIComponent(n[f].fontStyle.font.family).replace(/'/g,"")),c.push(n[f].fontStyle.font.url.replace(/'/g,"\\'")));if(0===d.length&&0===u.length)r();else{for(var g=0;g<u.length;g+=1)t(u[g],c[g]);d.length>0?o(d,a):r()}}function t(e,i,n){var t=null,o="font-family: "+e+"; src: url('"+i+"');";n=n||document,t=n.styleSheets[0],null!==t&&t.addRule("@font-face",o)}function o(e,i){WebFont.load({google:{families:e},active:function(){i&&"function"==typeof i&&i()},inactive:function(){i&&"function"==typeof i&&i()},timeout:2e3})}function s(e){for(var i=e.length,n=[],t=0;i>t;t++)n[t]=new Image,n[t].src=e[t]}function r(e){for(var i,n=window.location.search.substring(1),t=n.split("&"),o=0;o<t.length;o++)if(i=t[o].split("="),i[0]==e)return decodeURIComponent(i[1]);return""}function a(e){var i="";switch(e){case 404:i="The file does not exist or cannot be accessed.";break;case 507:i="There is not enough disk space to save the file on Rise Cache.";break;default:i="There was a problem retrieving the file from Rise Cache."}return i}function l(e){var i=document.createElement("div");return i.innerHTML=e,i.textContent}function d(e,i){var n=new XMLHttpRequest;if(e&&i&&"function"==typeof i){n.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{n.send(),i(n.status>=200&&n.status<304)}catch(t){i(!1)}}}return{getQueryParameter:r,getFontCssStyle:e,addCSSRules:i,loadFonts:n,loadCustomFont:t,loadGoogleFonts:o,preloadImages:s,getRiseCacheErrorMessage:a,unescapeHTML:l,hasInternetConnection:d}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var i=new XMLHttpRequest;e&&"function"==typeof e&&(i.open("GET",t+"ping?callback=_",!0),i.onreadystatechange=function(){try{4===i.readyState&&(o=!0,200===i.status?(s=!0,e(!0,i.responseText)):(console.debug("Rise Cache is not running"),s=!1,e(!1,null)))}catch(n){console.debug("Caught exception: ",n.description)}},i.send())}function i(e,i,n){function r(){var i,o,r;s?i=n?t+"?url="+encodeURIComponent(e):t+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):n?i=e:(o=e.split("?"),r=1===o.length?"?":"&",i=e+r+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,n){var t=new XMLHttpRequest,o={xhr:t,url:n};s?(t.open(e,n,!0),t.addEventListener("loadend",function(){var s=t.status||0;s>=200&&300>s?i(o):"HEAD"===e?a("GET",n):i(o,new Error("The request failed with status code: "+s))}),t.send()):i(o)}if(e&&i&&"function"==typeof i)return o?r():this.ping(r)}function n(e){return e&&"function"==typeof e?o?(e(s),void 0):this.ping(function(){e(s)}):void 0}var t="//localhost:9494/",o=!1,s=!1;return{getFile:i,isRiseCacheRunning:n,ping:e}}();var version="1.1.0";"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e,i){"use strict";function n(){i.rpc.call("","rsevent_done",null,b.getString("id")),null!==k&&u(k,!0),u({event:"done"},!1)}function t(){i.rpc.call("","rsevent_ready",null,b.getString("id"),!0,!0,!0,!0,!0)}function o(){clearTimeout(G),G=null}function s(){o(),G=setTimeout(function(){n()},5e3)}function r(){if(F&&F.length>0){if("file"===C)return F[0];if("folder"===C&&P)return F[P]}return null}function a(){return M}function l(){return D}function d(e,i){U=!0,M="undefined"!=typeof i,L.show(e),P=null,x&&x.clear(),N||s()}function u(e,i){i&&(k=e),e.file_url||(e.file_url=r()),RiseVision.Common.LoggerUtils.logEvent(v(),e)}function c(e){"file"===C?F[0]=e:"folder"===C&&(F=e),L.hide(),N||p()}function f(e){"file"===C?F[0]=e:"folder"===C&&(F=e),x&&x.update(F),U=!1,D=!1,M=!1,k=null}function g(){N=!0,o(),x&&(A?x.pause():(P=null,x.pause(),x.reset()))}function p(){return T&&(T=!1,u({event:"configuration",event_details:I},!1)),N=!1,u({event:"play"},!1),U?(s(),void 0):(x?(L.hide(),x.play()):F&&F.length>0&&(x=new RiseVision.Video.Player(w,C),x.init(F)),void 0)}function v(){return"video_v2_events"}function m(){P=null,n()}function V(){L.hide(),N||x.play()}function h(e){P=e}function R(e,n){var o;w=_.clone(e),C=n,b=new i.Prefs,document.getElementById("container").style.width=b.getInt("rsW")+"px",document.getElementById("container").style.height=b.getInt("rsH")+"px",w.width=b.getInt("rsW"),w.height=b.getInt("rsH"),w.video.hasOwnProperty("resume")&&(A=w.video.resume),L=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),L.show("Please wait while your video is downloaded."),"file"===C?(o=0!==Object.keys(w.storage).length,o?(I="storage file",S=new RiseVision.Video.StorageFile(w),S.init()):(I="custom",O=new RiseVision.Video.NonStorage(w),O.init())):"folder"===C&&(I="storage folder",S=new RiseVision.Video.StorageFolder(w),S.init()),t()}function y(e){var i=null,n={},t="Sorry, there was a problem playing the video.",o="Error loading media: File could not be played",s="Error loading YouTube: Video could not be played",r="Error loading player: No media sources found",a="Error loading playlist: No playable sources found",l="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.",c="The format of that video is not supported";e&&(e.type&&e.message?i=e.type+" - "+e.message:e.type?i=e.type:e.message&&(i=e.message),e.message&&(e.message===o||e.message===s?t=l:(e.message===r||e.message===a)&&(t=c))),n.event="player error",n.event_details=i,D=!0,u(n,!0),d(t)}function E(){g()}var w,C,T=!0,I=null,b=null,S=null,O=null,L=null,x=null,N=!0,A=!0,F=[],P=null,k=null,G=null,U=!1,M=!1,D=!1;return{getTableName:v,hasPlayerError:l,hasStorageError:a,logEvent:u,onFileInit:c,onFileRefresh:f,pause:g,play:p,setAdditionalParams:R,showError:d,playerEnded:m,playerReady:V,playerError:y,playerItemChange:h,stop:E}}(window,gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.PlayerUtils=function(){"use strict";function e(e){for(var i=[],n=0;n<e.length;n+=1)i.push({file:e[n],type:this.getVideoFileType(e[n])});return i}function i(e){var i,n=[".mp4",".webm"],t=e.toLowerCase(),o=null;for(i=0;i<=n.length;i+=1)if(-1!==t.indexOf(n[i])){o=n[i].substr(n[i].lastIndexOf(".")+1);break}return o}return{getPlaylist:e,getVideoFileType:i}}();var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function i(){var i=document.getElementById("videoStorage");i&&(i.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(n?(n=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Video.onFileRefresh(e.detail.url):(RiseVision.Video.hasStorageError()||RiseVision.Video.hasPlayerError())&&RiseVision.Video.onFileRefresh(e.detail.url)))}),i.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),i.addEventListener("rise-storage-no-file",function(e){var i={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),i.addEventListener("rise-storage-file-throttled",function(e){var i={event:"storage file throttled",file_url:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),i.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),i.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),i.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var n=0;e.detail.error.message&&(n=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var t=RiseVision.Common.Utilities.getRiseCacheErrorMessage(n);RiseVision.Video.showError(t)}),i.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),i.setAttribute("folder",e.storage.folder),i.setAttribute("fileName",e.storage.fileName),i.setAttribute("companyId",e.storage.companyId),i.setAttribute("env",config.STORAGE_ENV),i.go())}var n=!0;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function i(){return _.pluck(l,"url")}function n(e){return _.find(l,function(i){return e.name===i.name})}function t(e){var i=n(e);i&&l.splice(l.indexOf(i),1)}function o(e){var i=n(e);i&&(i.url=e.url)}function s(e){var i=n(e);i||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function r(){var n=document.getElementById("videoStorage");n&&(n.addEventListener("rise-storage-response",function(e){var n=e.detail;if(n.added&&(s(n),a))return a=!1,RiseVision.Video.onFileInit(i()),void 0;if(n.hasOwnProperty("changed"))if(n.changed)o(n);else if(!RiseVision.Video.hasStorageError()&&!RiseVision.Video.hasPlayerError())return;n.deleted&&t(n),RiseVision.Video.onFileRefresh(i())}),n.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),n.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),n.addEventListener("rise-storage-no-folder",function(e){var i={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected folder does not exist or has been moved to Trash.")}),n.addEventListener("rise-storage-folder-invalid",function(){var e={event:"storage folder format(s) invalid"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any supported video formats.")}),n.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),n.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),n.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var n=0;e.detail.error.message&&(n=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var t=RiseVision.Common.Utilities.getRiseCacheErrorMessage(n);RiseVision.Video.showError(t)}),n.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),n.setAttribute("fileType","video"),n.setAttribute("companyId",e.storage.companyId),n.setAttribute("folder",e.storage.folder),n.setAttribute("env",config.STORAGE_ENV),n.go())}var a=!0,l=[];return{init:r}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function i(e){o.getFile(l,function(e,i){if(i){RiseVision.Video.logEvent({event:"non-storage error",event_details:i.message,file_url:e.url},!0);var t=0;i.message&&(t=+i.message.substring(i.message.indexOf(":")+2));var o=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(o)}else a?(a=!1,RiseVision.Video.onFileInit(e.url),n()):RiseVision.Video.onFileRefresh(e.url)},e)}function n(){null===r&&(r=setInterval(function(){i(!1)},s))}function t(){l=e.url&&""!==e.url?e.url:e.selector.url,i(!0)}var o=RiseVision.Common.RiseCache,s=9e5,r=null,a=!0,l="";return{init:t}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.Player=function(e){"use strict";function i(){RiseVision.Video.playerEnded()}function n(){y||(clearTimeout(E),E=setTimeout(function(){h.play()},1e3*V))}function t(){clearTimeout(E),E=null}function o(e){RiseVision.Video.playerItemChange(e)}function s(e){e&&RiseVision.Video.playerError({type:"video",message:e.message})}function r(e){e&&RiseVision.Video.playerError({type:"setup",message:e.message})}function a(){h.on("setupError",function(e){r(e)}),h.on("ready",function(){h.on("playlistComplete",function(){i()}),h.on("playlistItem",function(e){o(e.index)}),h.on("error",function(e){s(e)}),h.setVolume(e.video.volume),e.video.controls&&V>1&&(h.on("pause",function(){n()}),h.on("play",function(){t()})),RiseVision.Video.playerReady()})}function l(i){return{controls:e.video.controls,height:e.height,playlist:R.getPlaylist(i),skin:{name:"rise"},stretching:m,width:e.width}}function d(){y=!1,clearTimeout(E),E=null}function u(i){h=jwplayer("player"),w=i,m=e.video.scaleToFit?"uniform":"none",v=e.video.controls?e.video.autoplay:!0,e.video.pause?(e.video.pause="string"==typeof e.video.pause?parseInt(e.video.pause,10):e.video.pause,V=isNaN(e.video.pause)?0:e.video.pause):V=0,h.setup(l(i)),a()}function c(){y=!1,C&&(C=!1,h.load(R.getPlaylist(w))),v&&h.play()}function f(){"PLAYING"===h.getState().toUpperCase()&&(y=!0,clearTimeout(E),h.pause())}function g(){function e(){h.pause(),h.off("seeked",e),d()}0!==h.getPlaylistIndex()&&h.playlistItem(0),h.on("seeked",e),h.seek(0)}function p(e){w=e,C=!0}var v,m,V,h=null,R=RiseVision.Video.PlayerUtils,y=!1,E=null,w=null,C=!1;return{clear:d,init:u,pause:f,play:c,reset:g,update:p}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,i){"use strict";function n(){try{i.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function t(){if(s){for(;i.firstChild;)i.removeChild(i.firstChild);i.style.display="none",e.style.display="block",s=!1}}function o(n){var t,o=document.createDocumentFragment();s?(t=i.querySelector(".message"),t.innerHTML=n):(e.style.display="none",i.style.display="block",t=document.createElement("p"),t.innerHTML=n,t.setAttribute("class","message"),o.appendChild(t),i.appendChild(o),s=!0)}var s=!1;return n(),{hide:t,show:o}},function(e,i){"use strict";function n(e,i){var n=null,t="",o="",s="";Array.isArray(e)&&e.length>0&&Array.isArray(i)&&i.length>0&&("companyId"===e[0]&&(o=i[0]),"displayId"===e[1]&&(s=i[1]?i[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,s),RiseVision.Common.LoggerUtils.setVersion(version),"additionalParams"===e[2]&&(n=JSON.parse(i[2]),t=0!==Object.keys(n.storage).length?n.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(n,t)))}function t(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function s(){RiseVision.Video.stop()}function r(){e.removeEventListener("WebComponentsReady",r),l&&""!==l&&(i.rpc.register("rscmd_play_"+l,t),i.rpc.register("rscmd_pause_"+l,o),i.rpc.register("rscmd_stop_"+l,s),i.rpc.register("rsparam_set_"+l,n),i.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var a=new i.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",r)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var i=document.getElementsByTagName("script")[0];i.parentNode.insertBefore(e,i)}();
//# sourceMappingURL=data:application/json;base64,
