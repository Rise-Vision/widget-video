var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(e){"use strict";function t(e,t){Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(u=t[0]),"displayId"===e[1]&&(d=t[1]?t[1]:"preview"),c(u,d))}function n(e,t){var n=null;e.event?(n={},n.event=e.event,e.event_details&&(n.event_details=e.event_details),e.file_url&&(n.file_url=e.file_url,n.file_format=o(e.file_url)),i(function(e,i){n.company_id=e,n.display_id=i,t(n)})):t(n)}function i(n){n&&"function"==typeof n&&(c=n,u&&d?c(u,d):l&&""!==l&&(e.rpc.register("rsparam_set_"+l,t),e.rpc.call("","rsparam_get",null,l,["companyId","displayId"])))}function o(e){var t,n=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),n.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function r(e){var t=JSON.parse(JSON.stringify(f));return t.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),t.rows[0].json=JSON.parse(JSON.stringify(e)),t.rows[0].json.ts=(new Date).toISOString(),t}function s(e){var t=new Date,n=t.getUTCFullYear(),i=t.getUTCMonth()+1,o=t.getUTCDate();return 10>i&&(i="0"+i),10>o&&(o="0"+o),e+n+i+o}function a(e,t){n(t,function(t){null!==t&&RiseVision.Common.Logger.log(e,t)})}var l=(new e.Prefs).getString("id"),d="",u="",c=null,f={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,rows:[{insertId:""}]};return{getIds:i,getInsertData:r,getFileFormat:o,getTable:s,logEvent:a}}(gadgets),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-d<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var n=JSON.parse(t.response);e({token:n.access_token,refreshedAt:new Date})},t.send(),void 0)}function n(e){return s&&l===e}function i(i,o){function c(t){var n,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",e.getTable(i)),d=t.refreshedAt||d,u=t.token||u,n=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(n))}if(!(!i||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&n(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),t(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,u="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var t=new XMLHttpRequest;e&&"function"==typeof e&&(t.open("GET",n+"ping?callback=_",!0),t.onreadystatechange=function(){try{4===t.readyState&&(i=!0,200===t.status?(o=!0,e(!0,t.responseText)):(console.debug("Rise Cache is not running"),o=!1,e(!1,null)))}catch(n){console.debug("Caught exception: ",n.description)}},t.send())}function t(e,t,r){function s(t){var i,o,s;t?i=r?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):r?i=e:(o=e.split("?"),s=1===o.length?"?":"&",i=e+s+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,n){var i=new XMLHttpRequest,r={xhr:i,url:n};i.open(e,n,!0),i.onerror=function(){"HEAD"===e?a("GET",n):o?t(r,new Error("The request failed with no status")):t(r)},i.onload=function(){var o=i.status||0;o>=200&&300>o?t(r):"HEAD"===e?a("GET",n):t(r,new Error("The request failed with status code: "+o))},i.send()}if(e&&t&&"function"==typeof t)return i?s(o):this.ping(s)}var n="http://localhost:9494/",i=!1,o=!1;return{getFile:t,ping:e}}(),"undefined"==typeof config){var config={SKIN:"skin/RVSkin.xml",STORAGE_ENV:"prod"};"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json")}var RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e){"use strict";function t(){e.rpc.call("","rsevent_done",null,E.getString("id")),null!==L&&d(L,!0),d({event:"done"},!1)}function n(){e.rpc.call("","rsevent_ready",null,E.getString("id"),!0,!0,!0,!0,!0)}function i(){clearTimeout(F),F=null}function o(){i(),F=setTimeout(function(){t()},5e3)}function r(){var e=T.getFrameObject(S);return e?e.getPlaybackData():null}function s(){var e=null;if(A&&A.length>0){if("file"===R)return A[0];if("folder"===R&&(e=r()))return A[e.index]}return null}function a(e,t){var n={},i=RiseVision.Common.LoggerUtils,o=null;e.event&&(n.event=e.event),e.event_details&&(n.event_details=e.event_details),o=e.url?e.url:s(),n.file_url=o,n.file_format=i.getFileFormat(o),i.getIds(function(e,i){n.company_id=e,n.display_id=i,t(n)})}function l(e){N=!0,b.show(e),T.remove(S,function(){O||o()})}function d(e,t){t&&(L=e),a(e,function(e){D.log("video_events",e)})}function u(e){"file"===R?A[0]=e:"folder"===R&&(A=e),b.hide(),O||g()}function c(e){"file"===R?A[0]=e:"folder"===R&&(A=e),I=!1,L=null}function f(){var e=T.getFrameObject(S);return O=!0,N?(i(),void 0):(e&&e.pause(),void 0)}function g(){var e=T.getFrameObject(S);return O=!1,d({event:"play"},!1),N?(o(),void 0):(I||(e?e.play():A&&A.length>0&&("file"===R?(T.add(0),T.createFramePlayer(0,y,A[0],config.SKIN,"player-file.html")):"folder"===R&&(T.add(0),T.createFramePlayer(0,y,A,config.SKIN,"player-folder.html")))),void 0)}function m(){T.remove(S,function(){t()})}function v(){var e;b.hide(),O||(e=T.getFrameObject(S),e&&e.play())}function p(t,i){var o,r={},s=null;y=_.clone(t),R=i,E=new e.Prefs,document.getElementById("videoContainer").style.height=E.getInt("rsH")+"px",y.width=E.getInt("rsW"),y.height=E.getInt("rsH"),b=new RiseVision.Common.Message(document.getElementById("videoContainer"),document.getElementById("messageContainer")),b.show("Please wait while your video is downloaded."),T=new RiseVision.Common.Video.FrameController,"file"===R?(o=0!==Object.keys(y.storage).length,o?(s="storage",w=new RiseVision.Video.StorageFile(y),w.init()):(s="custom",C=new RiseVision.Video.NonStorage(y),C.init())):"folder"===R&&(s="storage",w=new RiseVision.Video.StorageFolder(y),w.init()),r.event="configuration",r.event_details=s,d(r,!1),n()}function h(e){var t=null,n={},i="",o="Sorry, there was a problem playing the video.",r="Error loading media: File could not be played",a="Error loading YouTube: Video could not be played",u="Error loading player: No playable sources found",c="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.";I=!0,e&&(e.type&&e.message?t=e.type+" - "+e.message:e.type?t=e.type:e.message&&(t=e.message),e.message&&(e.message===r||e.message===a?o=c:e.message===u&&(i=s(),i&&i.indexOf("www.youtube.com")>-1&&(o=c)))),n.event="player error",n.event_details=t,d(n,!0),l(o)}function V(){f()}var y,R,E=null,w=null,C=null,b=null,T=null,I=!1,O=!0,S=0,A=[],L=null,F=null,N=!1,D=RiseVision.Common.Logger;return{logEvent:d,onFileInit:u,onFileRefresh:c,pause:f,play:g,setAdditionalParams:p,showError:l,playerEnded:m,playerReady:v,playerError:h,stop:V}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function t(){var t=document.getElementById("videoStorage");t&&(t.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(n?(n=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&e.detail.changed&&RiseVision.Video.onFileRefresh(e.detail.url))}),t.addEventListener("rise-storage-no-file",function(e){var t={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-file-throttled",function(e){var t={event:"storage file throttled",url:e.detail};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),t.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Storage.")}),t.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Cache.")}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("env",config.STORAGE_ENV),t.go())}var n=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function t(){return _.pluck(l,"url")}function n(e){return _.find(l,function(t){return e.name===t.name})}function i(e){var t=n(e);t&&l.splice(l.indexOf(t),1)}function o(e){var t=n(e);t&&(t.url=e.url)}function r(e){var t=n(e);t||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function s(){var n=document.getElementById("videoStorage");n&&(n.addEventListener("rise-storage-response",function(e){var n=e.detail;return n.added&&(r(n),a)?(a=!1,RiseVision.Video.onFileInit(t()),void 0):(n.changed&&o(n),n.deleted&&i(n),RiseVision.Video.onFileRefresh(t()),void 0)}),n.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),n.addEventListener("rise-storage-no-folder",function(e){var t={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("The selected folder does not exist.")}),n.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Storage.")}),n.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Cache.")}),n.setAttribute("fileType","video"),n.setAttribute("companyId",e.storage.companyId),n.setAttribute("folder",e.storage.folder),n.setAttribute("env",config.STORAGE_ENV),n.go())}var a=!0,l=[];return{init:s}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function t(e){o.getFile(l,function(e,t){t?(RiseVision.Video.logEvent({event:"non-storage error",event_details:t.message,url:e.url},!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")):a?(a=!1,RiseVision.Video.onFileInit(e.url),n()):RiseVision.Video.onFileRefresh(e.url)},e)}function n(){null===s&&(s=setInterval(function(){t(!1)},r))}function i(){l=e.url&&""!==e.url?e.url:e.selector.url,t(!0)}var o=RiseVision.Common.RiseCache,r=9e5,s=null,a=!0,l="";return{init:i}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Video=RiseVision.Common.Video||{},RiseVision.Common.Video.FrameController=function(){"use strict";function e(e){return document.getElementById(l+e)}function t(t){var n,i=e(t);return n=i.querySelector("iframe"),n?n.contentWindow?n.contentWindow:n.contentDocument.document?n.contentDocument.document:n.contentDocument:null}function n(n){var i,o=e(n),r=t(n);r&&(i=o.querySelector("iframe"),r.remove(),i.setAttribute("src","about:blank"))}function i(t){var n=e(t),i=document.createElement("iframe");i.setAttribute("allowTransparency",!0),i.setAttribute("frameborder","0"),i.setAttribute("scrolling","no"),n.appendChild(i)}function o(n,i,o,r,s){var a,l=e(n),d=t(n);d&&(a=l.querySelector("iframe"),a.onload=function(){a.onload=null,d.init(i,o,r),d.load()},a.setAttribute("src",s))}function r(t){var n=e(t);n.style.visibility="hidden"}function s(e,t){var i=document.getElementById(l+e);n(e),setTimeout(function(){for(;i.firstChild;)i.removeChild(i.firstChild);t&&"function"==typeof t&&t()},200)}function a(t){var n=e(t);n.style.visibility="visible"}var l="if_";return{add:i,createFramePlayer:o,getFrameContainer:e,getFrameObject:t,hide:r,remove:s,show:a}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function n(){try{t.style.height=e.style.height}catch(n){console.warn("Can't initialize Message - ",n.message)}}function i(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",r=!1}}function o(n){var i,o=document.createDocumentFragment();r?(i=t.querySelector(".message"),i.innerHTML=n):(e.style.visibility="hidden",t.style.display="block",i=document.createElement("p"),i.innerHTML=n,i.setAttribute("class","message"),o.appendChild(i),t.appendChild(o),r=!0)}var r=!1;return n(),{hide:i,show:o}},function(e,t){"use strict";function n(e,t){var n,i;Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(t)&&t.length>0&&(n=JSON.parse(t[0]),i=0!==Object.keys(n.storage).length?n.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(n,i))}function i(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function r(){RiseVision.Video.stop()}function s(){e.removeEventListener("WebComponentsReady",s),l&&""!==l&&(t.rpc.register("rscmd_play_"+l,i),t.rpc.register("rscmd_pause_"+l,o),t.rpc.register("rscmd_stop_"+l,r),t.rpc.register("rsparam_set_"+l,n),t.rpc.call("","rsparam_get",null,l,["additionalParams"]))}var a=new t.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",s)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,
