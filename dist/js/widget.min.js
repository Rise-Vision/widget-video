var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(e){"use strict";function t(e,t){Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(u=t[0]),"displayId"===e[1]&&(d=t[1]?t[1]:"preview"),c(u,d))}function i(e,t){var i=null;e.event?(i={},i.event=e.event,e.event_details&&(i.event_details=e.event_details),e.file_url&&(i.file_url=e.file_url,i.file_format=o(e.file_url)),n(function(e,n){i.company_id=e,i.display_id=n,t(i)})):t(i)}function n(i){i&&"function"==typeof i&&(c=i,u&&d?c(u,d):l&&""!==l&&(e.rpc.register("rsparam_set_"+l,t),e.rpc.call("","rsparam_get",null,l,["companyId","displayId"])))}function o(e){var t,i=/[?#&]/;return e&&"string"==typeof e?(t=e.substr(e.lastIndexOf(".")+1),i.test(t)&&(t=t.substr(0,-1!==t.indexOf("?")?t.indexOf("?"):t.length),t=t.substr(0,-1!==t.indexOf("#")?t.indexOf("#"):t.length),t=t.substr(0,-1!==t.indexOf("&")?t.indexOf("&"):t.length)),t.toLowerCase()):null}function r(e){var t=JSON.parse(JSON.stringify(f));return t.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),t.rows[0].json=JSON.parse(JSON.stringify(e)),t.rows[0].json.ts=(new Date).toISOString(),t}function s(e){var t=new Date,i=t.getUTCFullYear(),n=t.getUTCMonth()+1,o=t.getUTCDate();return 10>n&&(n="0"+n),10>o&&(o="0"+o),e+i+n+o}function a(e,t){i(t,function(t){null!==t&&RiseVision.Common.Logger.log(e,t)})}var l=(new e.Prefs).getString("id"),d="",u="",c=null,f={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,rows:[{insertId:""}]};return{getIds:n,getInsertData:r,getFileFormat:o,getTable:s,logEvent:a}}(gadgets),RiseVision.Common.Logger=function(e){"use strict";function t(e){var t=new XMLHttpRequest;return new Date-d<358e4?e({}):(t.open("POST",o,!0),t.onloadend=function(){var i=JSON.parse(t.response);e({token:i.access_token,refreshedAt:new Date})},t.send(),void 0)}function i(e){return s&&l===e}function n(n,o){function c(t){var i,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",e.getTable(n)),d=t.refreshedAt||d,u=t.token||u,i=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(i))}if(!(!n||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&i(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),t(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,u="";return{log:n}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var t=new XMLHttpRequest;e&&"function"==typeof e&&(t.open("GET",i+"ping?callback=_",!0),t.onreadystatechange=function(){try{4===t.readyState&&(n=!0,200===t.status?(o=!0,e(!0,t.responseText)):(console.debug("Rise Cache is not running"),o=!1,e(!1,null)))}catch(i){console.debug("Caught exception: ",i.description)}},t.send())}function t(e,t,r){function s(t){var n,o,s;t?n=r?i+"?url="+encodeURIComponent(e):i+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):r?n=e:(o=e.split("?"),s=1===o.length?"?":"&",n=e+s+"cb="+(new Date).getTime()),a("HEAD",n)}function a(e,i){var n=new XMLHttpRequest,r={xhr:n,url:i};n.open(e,i,!0),n.addEventListener("loadend",function(){var s=n.status||0;s>=200&&300>s?t(r):"HEAD"===e?a("GET",i):o?t(r,new Error("The request failed with status code: "+s)):t(r)}),n.send()}if(e&&t&&"function"==typeof t)return n?s(o):this.ping(s)}var i="http://localhost:9494/",n=!1,o=!1;return{getFile:t,ping:e}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={SKIN:"skin/RVSkin.xml",STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e){"use strict";function t(){e.rpc.call("","rsevent_done",null,C.getString("id")),null!==x&&d(x,!0),d({event:"done"},!1)}function i(){e.rpc.call("","rsevent_ready",null,C.getString("id"),!0,!0,!0,!0,!0)}function n(){clearTimeout(D),D=null}function o(){n(),D=setTimeout(function(){t()},5e3)}function r(){var e=S.getFrameObject(F);return e?e.getPlaybackData():null}function s(){var e=null;if(N&&N.length>0){if("file"===E)return N[0];if("folder"===E&&(e=r()))return N[e.index]}return null}function a(){return q}function l(e,t){G=!0,q="undefined"!=typeof t,O.show(e),S.remove(F,function(){L||o()})}function d(e,t){t&&(x=e),e.file_url||(e.file_url=s()),RiseVision.Common.LoggerUtils.logEvent(m(),e)}function u(e){"file"===E?N[0]=e:"folder"===E&&(N=e),O.hide(),L||g()}function c(e){"file"===E?N[0]=e:"folder"===E&&(N=e),G=!1,q=!1,x=null}function f(){var e=S.getFrameObject(F);L=!0,n(),e&&(A?e.pause():S.remove(F))}function g(){var e={},t=S.getFrameObject(F);return w&&(w=!1,e.event="configuration",e.event_details=b,d(e,!1)),L=!1,d({event:"play"},!1),G?(o(),void 0):(t?t.play():N&&N.length>0&&("file"===E?(S.add(0),S.createFramePlayer(0,y,N[0],config.SKIN,"player-file.html")):"folder"===E&&(S.add(0),S.createFramePlayer(0,y,N,config.SKIN,"player-folder.html"))),void 0)}function m(){return"video_events"}function v(){S.remove(F,function(){t()})}function p(){var e;O.hide(),L||(e=S.getFrameObject(F),e&&e.play())}function h(t,n){var o;y=_.clone(t),E=n,C=new e.Prefs,document.getElementById("videoContainer").style.height=C.getInt("rsH")+"px",y.width=C.getInt("rsW"),y.height=C.getInt("rsH"),y.video.hasOwnProperty("resume")&&(A=y.video.resume),O=new RiseVision.Common.Message(document.getElementById("videoContainer"),document.getElementById("messageContainer")),O.show("Please wait while your video is downloaded."),S=new RiseVision.Common.Video.FrameController,"file"===E?(o=0!==Object.keys(y.storage).length,o?(b="storage file",T=new RiseVision.Video.StorageFile(y),T.init()):(b="custom",I=new RiseVision.Video.NonStorage(y),I.init())):"folder"===E&&(b="storage folder",T=new RiseVision.Video.StorageFolder(y),T.init()),i()}function V(e){var t=null,i={},n="Sorry, there was a problem playing the video.",o="Error loading media: File could not be played",r="Error loading YouTube: Video could not be played",s="Error loading player: No playable sources found",a="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.",u="The format of that video is not supported";e&&(e.type&&e.message?t=e.type+" - "+e.message:e.type?t=e.type:e.message&&(t=e.message),e.message&&(e.message===o||e.message===r?n=a:e.message===s&&(n=u))),i.event="player error",i.event_details=t,d(i,!0),l(n)}function R(){f()}var y,E,w=!0,b=null,C=null,T=null,I=null,O=null,S=null,L=!0,A=!0,F=0,N=[],x=null,D=null,G=!1,q=!1;return{getTableName:m,hasStorageError:a,logEvent:d,onFileInit:u,onFileRefresh:c,pause:f,play:g,setAdditionalParams:h,showError:l,playerEnded:v,playerReady:p,playerError:V,stop:R}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function t(){var t=document.getElementById("videoStorage");t&&(t.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(i?(i=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Video.onFileRefresh(e.detail.url):RiseVision.Video.hasStorageError()&&RiseVision.Video.onFileRefresh(e.detail.url)))}),t.addEventListener("rise-storage-no-file",function(e){var t={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-file-throttled",function(e){var t={event:"storage file throttled",file_url:e.detail};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),t.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(t,!0);var i=e.detail.error.currentTarget.status,n="There was a problem retrieving the file from Rise Cache.";404===i&&(n="The image does not exist or cannot be accessed."),RiseVision.Video.showError(n)}),t.setAttribute("folder",e.storage.folder),t.setAttribute("fileName",e.storage.fileName),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("env",config.STORAGE_ENV),t.go())}var i=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function t(){return _.pluck(l,"url")}function i(e){return _.find(l,function(t){return e.name===t.name})}function n(e){var t=i(e);t&&l.splice(l.indexOf(t),1)}function o(e){var t=i(e);t&&(t.url=e.url)}function r(e){var t=i(e);t||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function s(){var i=document.getElementById("videoStorage");i&&(i.addEventListener("rise-storage-response",function(e){var i=e.detail;if(i.added&&(r(i),a))return a=!1,RiseVision.Video.onFileInit(t()),void 0;if(i.hasOwnProperty("changed"))if(i.changed)o(i);else if(!RiseVision.Video.hasStorageError())return;i.deleted&&n(i),RiseVision.Video.onFileRefresh(t())}),i.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),i.addEventListener("rise-storage-no-folder",function(e){var t={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("The selected folder does not exist or has been moved to Trash.")}),i.addEventListener("rise-storage-folder-invalid",function(){var e={event:"storage folder format(s) invalid"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any supported video formats.")}),i.addEventListener("rise-storage-error",function(e){var t={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(t,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),i.addEventListener("rise-cache-error",function(e){var t={event:"rise cache error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(t,!0);var i=e.detail.error.currentTarget.status,n="There was a problem retrieving the file from Rise Cache.";404===i&&(n="The image does not exist or cannot be accessed."),RiseVision.Video.showError(n)}),i.setAttribute("fileType","video"),i.setAttribute("companyId",e.storage.companyId),i.setAttribute("folder",e.storage.folder),i.setAttribute("env",config.STORAGE_ENV),i.go())}var a=!0,l=[];return{init:s}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function t(e){o.getFile(l,function(e,t){if(t){RiseVision.Video.logEvent({event:"non-storage error",event_details:t.message,file_url:e.url},!0);var n=t.message.substring(t.message.indexOf(":")+2),o="There was a problem retrieving the file from Rise Cache.";"404"===n&&(o="The image does not exist or cannot be accessed."),RiseVision.Video.showError(o)}else a?(a=!1,RiseVision.Video.onFileInit(e.url),i()):RiseVision.Video.onFileRefresh(e.url)},e)}function i(){null===s&&(s=setInterval(function(){t(!1)},r))}function n(){l=e.url&&""!==e.url?e.url:e.selector.url,t(!0)}var o=RiseVision.Common.RiseCache,r=9e5,s=null,a=!0,l="";return{init:n}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Video=RiseVision.Common.Video||{},RiseVision.Common.Video.FrameController=function(){"use strict";function e(e){return document.getElementById(l+e)}function t(t){var i,n=e(t);return i=n.querySelector("iframe"),i?i.contentWindow?i.contentWindow:i.contentDocument.document?i.contentDocument.document:i.contentDocument:null}function i(i){var n,o=e(i),r=t(i);r&&(n=o.querySelector("iframe"),r.remove(),n.setAttribute("src","about:blank"))}function n(t){var i=e(t),n=document.createElement("iframe");n.setAttribute("allowTransparency",!0),n.setAttribute("frameborder","0"),n.setAttribute("scrolling","no"),i.appendChild(n)}function o(i,n,o,r,s){var a,l=e(i),d=t(i);d&&(a=l.querySelector("iframe"),a.onload=function(){a.onload=null,d.init(n,o,r),d.load()},a.setAttribute("src",s))}function r(t){var i=e(t);i.style.visibility="hidden"}function s(e,t){var n=document.getElementById(l+e);i(e),setTimeout(function(){for(;n.firstChild;)n.removeChild(n.firstChild);t&&"function"==typeof t&&t()},200)}function a(t){var i=e(t);i.style.visibility="visible"}var l="if_";return{add:n,createFramePlayer:o,getFrameContainer:e,getFrameObject:t,hide:r,remove:s,show:a}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,t){"use strict";function i(){try{t.style.height=e.style.height}catch(i){console.warn("Can't initialize Message - ",i.message)}}function n(){if(r){for(;t.firstChild;)t.removeChild(t.firstChild);t.style.display="none",e.style.visibility="visible",r=!1}}function o(i){var n,o=document.createDocumentFragment();r?(n=t.querySelector(".message"),n.innerHTML=i):(e.style.visibility="hidden",t.style.display="block",n=document.createElement("p"),n.innerHTML=i,n.setAttribute("class","message"),o.appendChild(n),t.appendChild(o),r=!0)}var r=!1;return i(),{hide:n,show:o}},function(e,t){"use strict";function i(e,t){var i=null,n="",o="",r="";Array.isArray(e)&&e.length>0&&Array.isArray(t)&&t.length>0&&("companyId"===e[0]&&(o=t[0]),"undefined"!==e[1]&&"displayId"===e[1]&&(r="undefined"!==t[1]?t[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,r),"undefined"!==e[2]&&"additionalParams"===e[2]&&("undefined"!==t[2]&&(i=JSON.parse(t[2])),n=0!==Object.keys(i.storage).length?i.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(i,n)))}function n(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function r(){RiseVision.Video.stop()}function s(){e.removeEventListener("WebComponentsReady",s),l&&""!==l&&(t.rpc.register("rscmd_play_"+l,n),t.rpc.register("rscmd_pause_"+l,o),t.rpc.register("rscmd_stop_"+l,r),t.rpc.register("rsparam_set_"+l,i),t.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var a=new t.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",s)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(e,t)}();
//# sourceMappingURL=data:application/json;base64,
