var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,i){var n=null;e.event?(n=e,n.file_url&&(n.file_format=t(n.file_url)),n.company_id=l,n.display_id=a,d&&(n.version=d),i(n)):i(n)}function i(){var e=new Date,i=e.getUTCFullYear(),t=e.getUTCMonth()+1,n=e.getUTCDate();return 10>t&&(t="0"+t),10>n&&(n="0"+n),i+t+n}function t(e){var i,t=/[?#&]/;return e&&"string"==typeof e?(i=e.substr(e.lastIndexOf(".")+1),t.test(i)&&(i=i.substr(0,-1!==i.indexOf("?")?i.indexOf("?"):i.length),i=i.substr(0,-1!==i.indexOf("#")?i.indexOf("#"):i.length),i=i.substr(0,-1!==i.indexOf("&")?i.indexOf("&"):i.length)),i.toLowerCase()):null}function n(e){var t={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:i(),rows:[{insertId:""}]},n=JSON.parse(JSON.stringify(t));return n.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),n.rows[0].json=JSON.parse(JSON.stringify(e)),n.rows[0].json.ts=(new Date).toISOString(),n}function o(i,t){e(t,function(e){null!==e&&RiseVision.Common.Logger.log(i,e)})}function s(e,i){l=e,a=i}function r(e){d=e}var a="",l="",d=null;return{getInsertData:n,getFileFormat:t,logEvent:o,setIds:s,setVersion:r}}(),RiseVision.Common.Logger=function(e){"use strict";function i(e){var i=new XMLHttpRequest;return new Date-d<358e4?e({}):(i.open("POST",o,!0),i.onloadend=function(){var t=JSON.parse(i.response);e({token:t.access_token,refreshedAt:new Date})},i.send(),void 0)}function t(e){return r&&l===e}function n(n,o){function c(i){var t,r,a=new XMLHttpRequest;r=s.replace("TABLE_ID",n),d=i.refreshedAt||d,u=i.token||u,t=e.getInsertData(o),a.open("POST",r,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(t))}if(!(!n||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&t(o.event)))return r=!0,l=o.event,setTimeout(function(){r=!1},a),i(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",s="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",r=!1,a=1e3,l="",d=0,u="";return{log:n}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,i){var t="font-family: "+decodeURIComponent(i.font.family).replace(/'/g,"")+"; ",n="color: "+(i.color?i.color:i.forecolor)+"; ",o="font-size: "+(-1===i.size.indexOf("px")?i.size+"px; ":i.size+"; "),s="font-weight: "+(i.bold?"bold":"normal")+"; ",r="font-style: "+(i.italic?"italic":"normal")+"; ",a="text-decoration: "+(i.underline?"underline":"none")+"; ",l="background-color: "+(i.highlightColor?i.highlightColor:i.backcolor)+";";return"."+e+" {"+t+n+o+s+r+a+l+"}"}function i(e){for(var i=document.createElement("style"),t=0,n=e.length;n>t;t++)i.appendChild(document.createTextNode(e[t]));document.head.appendChild(i)}function t(t,s){function r(){s&&"function"==typeof s&&s()}function a(){r()}var l=null,d=[],u=[],c=[];if(!t||0===t.length)return r(),void 0;t.forEach(function(t){t.class&&t.fontStyle&&i([e(t.class,t.fontStyle)])});for(var f=0;f<t.length;f++)t[f].fontStyle&&t[f].fontStyle.font.type&&"google"===t[f].fontStyle.font.type&&(l=t[f].fontStyle.font.family.split(",")[0],l=l.replace(/'/g,""),d.push(l));for(f=0;f<t.length;f++)t[f].fontStyle&&t[f].fontStyle.font.type&&"custom"===t[f].fontStyle.font.type&&(u.push(decodeURIComponent(t[f].fontStyle.font.family).replace(/'/g,"")),c.push(t[f].fontStyle.font.url.replace(/'/g,"\\'")));if(0===d.length&&0===u.length)r();else{for(var g=0;g<u.length;g+=1)n(u[g],c[g]);d.length>0?o(d,a):r()}}function n(e,i,t){var n=null,o="font-family: "+e+"; src: url('"+i+"');";t=t||document,n=t.styleSheets[0],null!==n&&n.addRule("@font-face",o)}function o(e,i){WebFont.load({google:{families:e},active:function(){i&&"function"==typeof i&&i()},inactive:function(){i&&"function"==typeof i&&i()},timeout:2e3})}function s(e){for(var i=e.length,t=[],n=0;i>n;n++)t[n]=new Image,t[n].src=e[n]}function r(e){for(var i,t=window.location.search.substring(1),n=t.split("&"),o=0;o<n.length;o++)if(i=n[o].split("="),i[0]==e)return decodeURIComponent(i[1]);return""}function a(e){var i="";switch(e){case 404:i="The file does not exist or cannot be accessed.";break;case 507:i="There is not enough disk space to save the file on Rise Cache.";break;default:i="There was a problem retrieving the file from Rise Cache."}return i}function l(e){var i=document.createElement("div");return i.innerHTML=e,i.textContent}function d(e,i){var t=new XMLHttpRequest;if(e&&i&&"function"==typeof i){t.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{t.send(),i(t.status>=200&&t.status<304)}catch(n){i(!1)}}}function u(){var e=25,i=navigator.userAgent.match(/Chrome\/(\S+)/),t=i?i[1]:0;return t&&(t=parseInt(t.substring(0,t.indexOf("."))),e>=t)?!0:!1}return{getQueryParameter:r,getFontCssStyle:e,addCSSRules:i,loadFonts:t,loadCustomFont:n,loadGoogleFonts:o,preloadImages:s,getRiseCacheErrorMessage:a,unescapeHTML:l,hasInternetConnection:d,isLegacy:u}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var i=new XMLHttpRequest,t=this;e&&"function"==typeof e&&(a?i.open("GET",o,!0):i.open("GET",o+"ping?callback=_",!0),i.onreadystatechange=function(){try{if(4===i.readyState)if(s=!0,200===i.status)r=!0,e(!0,i.responseText);else{if(404===i.status)return a=!0,t.ping(e);console.debug("Rise Cache is not running"),r=!1,e(!1,null)}}catch(n){console.debug("Caught exception: ",n.description)}},i.send())}function i(e,i,t){function n(){var i,n,s;r?i=t?o+"?url="+encodeURIComponent(e):o+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):t?i=e:(n=e.split("?"),s=1===n.length?"?":"&",i=e+s+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,t){var n=new XMLHttpRequest,o={xhr:n,url:t};r?(n.open(e,t,!0),n.addEventListener("loadend",function(){var s=n.status||0;s>=200&&300>s?i(o):"HEAD"===e?a("GET",t):i(o,new Error("The request failed with status code: "+s))}),n.send()):i(o)}if(e&&i&&"function"==typeof i)return s?n():this.ping(n)}function t(e){return e&&"function"==typeof e?s?(e(r),void 0):this.ping(function(){e(r)}):void 0}function n(e){return e&&"function"==typeof e?s?(e(a),void 0):this.ping(function(){e(a)}):void 0}var o="//localhost:9494/",s=!1,r=!1,a=!1;return{getFile:i,isRiseCacheRunning:t,isV2Running:n,ping:e}}();var version="1.1.0";"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e,i){"use strict";function t(){i.rpc.call("","rsevent_done",null,S.getString("id")),null!==k&&u(k,!0),u({event:"done"},!1)}function n(){i.rpc.call("","rsevent_ready",null,S.getString("id"),!0,!0,!0,!0,!0)}function o(){clearTimeout(G),G=null}function s(){o(),G=setTimeout(function(){t()},5e3)}function r(){if(P&&P.length>0){if("file"===b)return P[0];if("folder"===b&&U)return P[U]}return null}function a(){return D}function l(){return q}function d(e,i){M=!0,D="undefined"!=typeof i,x.show(e),U=null,N||s()}function u(e,i){i&&(k=e),e.file_url||(e.file_url=r()),RiseVision.Common.LoggerUtils.logEvent(m(),e)}function c(e){"file"===b?P[0]=e:"folder"===b&&(P=e),H=!1,x.hide(),N||v()}function f(e){"file"===b?P[0]=e:"folder"===b&&(P=e),A&&A.update(P),M=!1,q=!1,D=!1,H=!1,k=null}function g(e){H=!0,x.show(e),U=null,N||s()}function p(){N=!0,o(),A&&(F?A.pause():(U=null,A.reset()))}function v(){return T&&(T=!1,u({event:"configuration",event_details:I},!1)),N=!1,u({event:"play"},!1),M?(s(),void 0):H?("file"===b&&L&&L.retry(),void 0):(A?(x.hide(),A.play()):P&&P.length>0&&(A=new RiseVision.Video.Player(C,b),A.init(P)),void 0)}function m(){return"video_v2_events"}function h(){U=null,t()}function V(){x.hide(),!N&&A&&A.play()}function R(e){U=e}function y(e,t){var o;C=_.clone(e),b=t,S=new i.Prefs,document.getElementById("container").style.width=S.getInt("rsW")+"px",document.getElementById("container").style.height=S.getInt("rsH")+"px",C.width=S.getInt("rsW"),C.height=S.getInt("rsH"),C.video.hasOwnProperty("resume")&&(F=C.video.resume),x=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),RiseVision.Common.Utilities.isLegacy()?d("This version of Video Widget is not supported on this version of Rise Player. Please use the latest Rise Player version available at https://help.risevision.com/user/create-a-display"):(x.show("Please wait while your video is downloaded."),"file"===b?(o=0!==Object.keys(C.storage).length,o?(I="storage file",L=new RiseVision.Video.StorageFile(C),L.init()):(I="custom",O=new RiseVision.Video.NonStorage(C),O.init())):"folder"===b&&(I="storage folder",L=new RiseVision.Video.StorageFolder(C),L.init())),n()}function E(e){var i=null,t={},n="Sorry, there was a problem playing the video.",o="Error loading media: File could not be played",s="Error loading YouTube: Video could not be played",r="Error loading player: No media sources found",a="Error loading playlist: No playable sources found",l="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.",c="The format of that video is not supported";e&&(e.type&&e.message?i=e.type+" - "+e.message:e.type?i=e.type:e.message&&(i=e.message),e.message&&(e.message===o||e.message===s?n=l:(e.message===r||e.message===a)&&(n=c))),t.event="player error",t.event_details=i,q=!0,u(t,!0),d(n)}function w(){p()}var C,b,T=!0,I=null,S=null,L=null,O=null,x=null,A=null,N=!0,F=!0,P=[],U=null,k=null,G=null,M=!1,D=!1,q=!1,H=!1;return{getTableName:m,hasPlayerError:l,hasStorageError:a,logEvent:u,onFileInit:c,onFileRefresh:f,onFileUnavailable:g,pause:p,play:v,setAdditionalParams:y,showError:d,playerEnded:h,playerReady:V,playerError:E,playerItemChange:R,stop:w}}(window,gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.PlayerUtils=function(){"use strict";function e(e){for(var i=[],t=0;t<e.length;t+=1)i.push({file:e[t],type:this.getVideoFileType(e[t])});return i}function i(e){var i,t=[".mp4",".webm"],n=e.toLowerCase(),o=null;for(i=0;i<=t.length;i+=1)if(-1!==n.indexOf(t[i])){o=t[i].substr(t[i].lastIndexOf(".")+1);break}return o}return{getPlaylist:e,getVideoFileType:i}}();var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function i(){var i=document.getElementById("videoStorage");i&&(i.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(n?(n=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Video.onFileRefresh(e.detail.url):(RiseVision.Video.hasStorageError()||RiseVision.Video.hasPlayerError())&&RiseVision.Video.onFileRefresh(e.detail.url)))}),i.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),i.addEventListener("rise-storage-no-file",function(e){var i={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),i.addEventListener("rise-storage-file-throttled",function(e){var i={event:"storage file throttled",file_url:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),i.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),i.addEventListener("rise-storage-subscription-error",function(e){var i={event:"storage subscription error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0)}),i.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),i.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),i.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),i.addEventListener("rise-cache-file-unavailable",function(){RiseVision.Video.onFileUnavailable("File is downloading")}),i.setAttribute("folder",e.storage.folder),i.setAttribute("fileName",e.storage.fileName),i.setAttribute("companyId",e.storage.companyId),i.setAttribute("env",config.STORAGE_ENV),i.go())}function t(){var e=document.getElementById("videoStorage");e&&e.go()}var n=!0;return{init:i,retry:t}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function i(){return _.pluck(l,"url")}function t(e){return _.find(l,function(i){return e.name===i.name})}function n(e){var i=t(e);i&&l.splice(l.indexOf(i),1)}function o(e){var i=t(e);i&&(i.url=e.url)}function s(e){var i=t(e);i||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function r(){var t=document.getElementById("videoStorage");t&&(t.addEventListener("rise-storage-response",function(e){var t=e.detail;if(t.added&&(s(t),a))return a=!1,RiseVision.Video.onFileInit(i()),void 0;if(t.hasOwnProperty("changed"))if(t.changed)o(t);else if(!RiseVision.Video.hasStorageError()&&!RiseVision.Video.hasPlayerError())return;t.deleted&&n(t),RiseVision.Video.onFileRefresh(i())}),t.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),t.addEventListener("rise-storage-no-folder",function(e){var i={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"storage folder format(s) invalid"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any supported video formats.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-subscription-error",function(e){var i={event:"storage subscription error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0)}),t.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),t.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),t.setAttribute("fileType","video"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go())}var a=!0,l=[];return{init:r}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function i(e){o.getFile(l,function(e,i){if(i){RiseVision.Video.logEvent({event:"non-storage error",event_details:i.message,file_url:e.url},!0);var n=0;i.message&&(n=+i.message.substring(i.message.indexOf(":")+2));var o=RiseVision.Common.Utilities.getRiseCacheErrorMessage(n);RiseVision.Video.showError(o)}else a?(a=!1,RiseVision.Video.onFileInit(e.url),t()):RiseVision.Video.onFileRefresh(e.url)},e)}function t(){null===r&&(r=setInterval(function(){i(!1)},s))}function n(){l=e.url&&""!==e.url?e.url:e.selector.url,i(!0)}var o=RiseVision.Common.RiseCache,s=9e5,r=null,a=!0,l="";return{init:n}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.Player=function(e){"use strict";function i(){RiseVision.Video.playerEnded()}function t(){V||(clearTimeout(R),R=setTimeout(function(){"PLAYING"!==m.getState().toUpperCase()&&m.play()},1e3*v))}function n(e){RiseVision.Video.playerItemChange(e)}function o(e){e&&RiseVision.Video.playerError({type:"video",message:e.message})}function s(e){e&&RiseVision.Video.playerError({type:"setup",message:e.message})}function r(){m.on("setupError",function(e){s(e)}),m.on("ready",function(){m.on("playlistComplete",function(){i()}),m.on("playlistItem",function(e){n(e.index)}),m.on("error",function(e){o(e)}),m.setVolume(e.video.volume),e.video.controls&&v>1&&m.on("pause",function(){t()}),RiseVision.Video.playerReady()})}function a(i){return{controls:e.video.controls,height:e.height,playlist:h.getPlaylist(i),skin:{name:"rise"},stretching:p,width:e.width}}function l(i){m=jwplayer("player"),y=i,p=e.video.scaleToFit?"uniform":"none",g=e.video.controls?e.video.autoplay:!0,e.video.pause?(e.video.pause="string"==typeof e.video.pause?parseInt(e.video.pause,10):e.video.pause,v=isNaN(e.video.pause)?0:e.video.pause):v=0,m.setup(a(i)),r()}function d(){V=!1,E&&(E=!1,m.load(h.getPlaylist(y))),g&&m.play()}function u(){V=!0,clearTimeout(R),"PLAYING"===m.getState().toUpperCase()&&m.pause()}function c(){function e(){m.off("play",e),m.pause()}function i(){m.off("seeked",i),m.pause()}u(),"COMPLETE"!==m.getState().toUpperCase()&&setTimeout(function(){0!==m.getPlaylistIndex()?(m.on("play",e),m.playlistItem(0)):(m.on("seeked",i),m.seek(0))},100)}function f(e){y=e,E=!0}var g,p,v,m=null,h=RiseVision.Video.PlayerUtils,V=!1,R=null,y=null,E=!1;return{init:l,pause:u,play:d,reset:c,update:f}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,i){"use strict";function t(){try{i.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function n(){if(s){for(;i.firstChild;)i.removeChild(i.firstChild);i.style.display="none",e.style.display="block",s=!1}}function o(t){var n,o=document.createDocumentFragment();s?(n=i.querySelector(".message"),n.innerHTML=t):(e.style.display="none",i.style.display="block",n=document.createElement("p"),n.innerHTML=t,n.setAttribute("class","message"),o.appendChild(n),i.appendChild(o),s=!0)}var s=!1;return t(),{hide:n,show:o}},function(e,i){"use strict";function t(e,i){var t=null,n="",o="",s="";Array.isArray(e)&&e.length>0&&Array.isArray(i)&&i.length>0&&("companyId"===e[0]&&(o=i[0]),"displayId"===e[1]&&(s=i[1]?i[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,s),RiseVision.Common.LoggerUtils.setVersion(version),"additionalParams"===e[2]&&(t=JSON.parse(i[2]),n=0!==Object.keys(t.storage).length?t.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(t,n)))}function n(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function s(){RiseVision.Video.stop()}function r(){e.removeEventListener("WebComponentsReady",r),l&&""!==l&&(i.rpc.register("rscmd_play_"+l,n),i.rpc.register("rscmd_pause_"+l,o),i.rpc.register("rscmd_stop_"+l,s),i.rpc.register("rsparam_set_"+l,t),i.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var a=new i.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",r),RiseVision.Common.RiseCache.isV2Running(function(e){var i=document.createDocumentFragment(),t=document.createElement("link"),n="components/"+(e?"rise-storage-v2":"rise-storage")+"/rise-storage.html",o=document.createElement("rise-storage");t.setAttribute("rel","import"),t.setAttribute("href",n),document.getElementsByTagName("head")[0].appendChild(t),o.setAttribute("id","videoStorage"),o.setAttribute("refresh",5),i.appendChild(o),document.body.appendChild(i);var s=document.createElement("script");s.src="components/webcomponentsjs/webcomponents-lite.min.js",document.getElementsByTagName("head")[0].appendChild(s)})}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var i=document.getElementsByTagName("script")[0];i.parentNode.insertBefore(e,i)}();
//# sourceMappingURL=data:application/json;base64,
