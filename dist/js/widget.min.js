var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(e){"use strict";function n(e,n){Array.isArray(e)&&e.length>0&&Array.isArray(n)&&n.length>0&&("companyId"===e[0]&&(l=n[0]),"displayId"===e[1]&&(a=n[1]?n[1]:"preview"),u(l,a))}function t(t){t&&"function"==typeof t&&(u=t,l&&a?u(l,a):r&&""!==r&&(e.rpc.register("rsparam_set_"+r,n),e.rpc.call("","rsparam_get",null,r,["companyId","displayId"])))}function i(e){var n,t=/[?#&]/;return e&&"string"==typeof e?(n=e.substr(e.lastIndexOf(".")+1),t.test(n)&&(n=n.substr(0,-1!==n.indexOf("?")?n.indexOf("?"):n.length),n=n.substr(0,-1!==n.indexOf("#")?n.indexOf("#"):n.length),n=n.substr(0,-1!==n.indexOf("&")?n.indexOf("&"):n.length)),n.toLowerCase()):null}function o(e){var n=JSON.parse(JSON.stringify(c));return n.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),n.rows[0].json=JSON.parse(JSON.stringify(e)),n.rows[0].json.ts=(new Date).toISOString(),n}function s(e){var n=new Date,t=n.getUTCFullYear(),i=n.getUTCMonth()+1,o=n.getUTCDate();return 10>i&&(i="0"+i),10>o&&(o="0"+o),e+t+i+o}var r=(new e.Prefs).getString("id"),a="",l="",u=null,c={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,rows:[{insertId:""}]};return{getIds:t,getInsertData:o,getFileFormat:i,getTable:s}}(gadgets),RiseVision.Common.Logger=function(e){"use strict";function n(e){var n=new XMLHttpRequest;return new Date-u<358e4?e({}):(n.open("POST",o,!0),n.onloadend=function(){var t=JSON.parse(n.response);e({token:t.access_token,refreshedAt:new Date})},n.send(),void 0)}function t(e){return r&&l===e}function i(i,o){function d(n){var t,r,a=new XMLHttpRequest;r=s.replace("TABLE_ID",e.getTable(i)),u=n.refreshedAt||u,c=n.token||c,t=e.getInsertData(o),a.open("POST",r,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+c),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(t))}if(i&&o&&o.event&&!t(o.event))return r=!0,l=o.event,setTimeout(function(){r=!1},a),n(d)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",s="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",r=!1,a=1e3,l="",u=0,c="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var n=new XMLHttpRequest;e&&"function"==typeof e&&(n.open("GET",t+"ping?callback=_",!0),n.onreadystatechange=function(){try{4===n.readyState&&(i=!0,200===n.status?(o=!0,e(!0,n.responseText)):(console.debug("Rise Cache is not running"),o=!1,e(!1,null)))}catch(t){console.debug("Caught exception: ",t.description)}},n.send())}function n(e,n,s){function r(i){var o,r,a,l,u=new XMLHttpRequest;i?(o=s?t+"?url="+encodeURIComponent(e):t+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e),l={xhr:u,url:o},u.open("GET",o,!0),u.addEventListener("loadend",function(){var e=u.status||0;0===e||e>=200&&300>e?n(l):n(l,new Error("The request failed with status code: "+e))}),u.send()):(s?o=e:(r=e.split("?"),a=1===r.length?"?":"&",o=e+a+"cb="+(new Date).getTime()),l={xhr:null,url:o},n(l))}if(e&&n&&"function"==typeof n)return i?r(o):this.ping(r)}var t="http://localhost:9494/",i=!1,o=!1;return{getFile:n,ping:e}}(),"undefined"==typeof config){var config={SKIN:"skin/RVSkin.xml",STORAGE_ENV:"prod"};"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json")}var RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e){"use strict";function n(){e.rpc.call("","rsevent_done",null,y.getString("id")),null!==b&&a(b,!0),a({event:"done"},!1)}function t(){e.rpc.call("","rsevent_ready",null,y.getString("id"),!0,!0,!0,!0,!0)}function i(){clearTimeout(T),T=null}function o(){i(),T=setTimeout(function(){n()},5e3)}function s(e,n){var t={},i=RiseVision.Common.LoggerUtils,o=null;e.event&&(t.event=e.event),e.event_details&&(t.event_details=e.event_details),e.url?o=e.url:O&&(o=O),t.file_url=o,t.file_format=i.getFileFormat(o),i.getIds(function(e,i){t.company_id=e,t.display_id=i,n(t)})}function r(e){S=!0,_.show(e),C.remove(I,function(){w||o()})}function a(e,n){n&&(b=e),s(e,function(e){A.log("video_events",e)})}function l(e){O=e,_.hide(),w||d()}function u(e){O=e,E=!1,b=null}function c(){var e=C.getFrameObject(I);return w=!0,S?(i(),void 0):(e&&e.pause(),void 0)}function d(){var e=C.getFrameObject(I);return w=!1,a({event:"play"},!1),S?(o(),void 0):(E||(e?e.play():O&&""!==O&&(C.add(0),C.createFramePlayer(0,R,O,config.SKIN,"player.html"))),void 0)}function g(){C.remove(I,function(){n()})}function m(){var e;_.hide(),w||(e=C.getFrameObject(I),e&&e.play())}function f(n,i){var o;Array.isArray(n)&&n.length>0&&"additionalParams"===n[0]&&Array.isArray(i)&&i.length>0&&(R=JSON.parse(i[0]),y=new e.Prefs,document.getElementById("videoContainer").style.height=y.getInt("rsH")+"px",R.width=y.getInt("rsW"),R.height=y.getInt("rsH"),_=new RiseVision.Common.Message(document.getElementById("videoContainer"),document.getElementById("messageContainer")),_.show("Please wait while your video is downloaded."),C=new RiseVision.Common.Video.FrameController,o=0!==Object.keys(R.storage).length,o?(h=new RiseVision.Video.Storage(R),h.init()):(V=new RiseVision.Video.NonStorage(R),V.init()),t())}function p(e){var n=null,t={};E=!0,e&&(e.type&&e.message?n=e.type+" - "+e.message:e.type?n=e.type:e.message&&(n=e.message)),t.event="player error",t.event_details=n,a(t,!0),r("Sorry, there was a problem playing the video.")}function v(){c()}var R,y=null,h=null,V=null,_=null,C=null,E=!1,w=!0,I=0,O="",b=null,T=null,S=!1,A=RiseVision.Common.Logger;return{logEvent:a,onFileInit:l,onFileRefresh:u,pause:c,play:d,setAdditionalParams:f,showError:r,playerEnded:g,playerReady:m,playerError:p,stop:v}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.Storage=function(e){"use strict";function n(){var n=document.getElementById("videoStorage");n&&(n.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(t?(t=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&e.detail.changed&&RiseVision.Video.onFileRefresh(e.detail.url))}),n.addEventListener("rise-storage-no-file",function(){var e={event:"storage file not found"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected video does not exist.")}),n.addEventListener("rise-storage-error",function(){var e={event:"storage error"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Storage.")}),n.setAttribute("folder",e.storage.folder),n.setAttribute("fileName",e.storage.fileName),n.setAttribute("companyId",e.storage.companyId),n.setAttribute("env",config.STORAGE_ENV),n.go())}var t=!0;return{init:n}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function n(){o.getFile(e.url,function(e,n){n?RiseVision.Video.logEvent({event:"non-storage error",event_details:n.message,url:e.url}):a?(a=!1,RiseVision.Video.onFileInit(e.url),t()):RiseVision.Video.onFileRefresh(e.url)})}function t(){null===r&&(r=setInterval(function(){n()},s))}function i(){n()}var o=RiseVision.Common.RiseCache,s=9e5,r=null,a=!0;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Video=RiseVision.Common.Video||{},RiseVision.Common.Video.FrameController=function(){"use strict";function e(e){return document.getElementById(l+e)}function n(n){var t,i=e(n);return t=i.querySelector("iframe"),t?t.contentWindow?t.contentWindow:t.contentDocument.document?t.contentDocument.document:t.contentDocument:null}function t(t){var i,o=e(t),s=n(t);s&&(i=o.querySelector("iframe"),s.remove(),i.setAttribute("src","about:blank"))}function i(n){var t=e(n),i=document.createElement("iframe");i.setAttribute("allowTransparency",!0),i.setAttribute("frameborder","0"),i.setAttribute("scrolling","no"),t.appendChild(i)}function o(t,i,o,s,r){var a,l=e(t),u=n(t);u&&(a=l.querySelector("iframe"),a.onload=function(){a.onload=null,u.init(i,o,s),u.load()},a.setAttribute("src",r))}function s(n){var t=e(n);t.style.visibility="hidden"}function r(e,n){var i=document.getElementById(l+e);t(e),setTimeout(function(){for(;i.firstChild;)i.removeChild(i.firstChild);n&&"function"==typeof n&&n()},200)}function a(n){var t=e(n);t.style.visibility="visible"}var l="if_";return{add:i,createFramePlayer:o,getFrameContainer:e,getFrameObject:n,hide:s,remove:r,show:a}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,n){"use strict";function t(){try{n.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function i(){if(s){for(;n.firstChild;)n.removeChild(n.firstChild);n.style.display="none",e.style.visibility="visible",s=!1}}function o(t){var i,o=document.createDocumentFragment();s?(i=n.querySelector(".message"),i.innerHTML=t):(e.style.visibility="hidden",n.style.display="block",i=document.createElement("p"),i.innerHTML=t,i.setAttribute("class","message"),i.style.lineHeight=n.style.height,o.appendChild(i),n.appendChild(o),s=!0)}var s=!1;return t(),{hide:i,show:o}},function(e,n){"use strict";function t(){RiseVision.Video.play()}function i(){RiseVision.Video.pause()}function o(){RiseVision.Video.stop()}function s(){e.removeEventListener("WebComponentsReady",s),a&&""!==a&&(n.rpc.register("rscmd_play_"+a,t),n.rpc.register("rscmd_pause_"+a,i),n.rpc.register("rscmd_stop_"+a,o),n.rpc.register("rsparam_set_"+a,RiseVision.Video.setAdditionalParams),n.rpc.call("","rsparam_get",null,a,["additionalParams"]))}var r=new n.Prefs,a=r.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",s)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)}();
//# sourceMappingURL=data:application/json;base64,
