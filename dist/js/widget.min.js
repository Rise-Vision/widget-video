var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,i){var n=null;e.event?(n=e,n.file_url&&(n.file_format=t(n.file_url)),n.company_id=l,n.display_id=a,d&&(n.version=d),i(n)):i(n)}function i(){var e=new Date,i=e.getUTCFullYear(),t=e.getUTCMonth()+1,n=e.getUTCDate();return 10>t&&(t="0"+t),10>n&&(n="0"+n),i+t+n}function t(e){var i,t=/[?#&]/;return e&&"string"==typeof e?(i=e.substr(e.lastIndexOf(".")+1),t.test(i)&&(i=i.substr(0,-1!==i.indexOf("?")?i.indexOf("?"):i.length),i=i.substr(0,-1!==i.indexOf("#")?i.indexOf("#"):i.length),i=i.substr(0,-1!==i.indexOf("&")?i.indexOf("&"):i.length)),i.toLowerCase()):null}function n(e){var t={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:i(),rows:[{insertId:""}]},n=JSON.parse(JSON.stringify(t));return n.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),n.rows[0].json=JSON.parse(JSON.stringify(e)),n.rows[0].json.ts=(new Date).toISOString(),n}function o(i,t){e(t,function(e){null!==e&&RiseVision.Common.Logger.log(i,e)})}function r(e,i){l=e,a=i}function s(e){d=e}var a="",l="",d=null;return{getInsertData:n,getFileFormat:t,logEvent:o,setIds:r,setVersion:s}}(),RiseVision.Common.Logger=function(e){"use strict";function i(e){var i=new XMLHttpRequest;return new Date-d<358e4?e({}):(i.open("POST",o,!0),i.onloadend=function(){var t=JSON.parse(i.response);e({token:t.access_token,refreshedAt:new Date})},i.send(),void 0)}function t(e){return s&&l===e}function n(n,o){function u(i){var t,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",n),d=i.refreshedAt||d,c=i.token||c,t=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+c),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(t))}if(!(!n||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&t(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),i(u)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,c="";return{log:n}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,i){var t="font-family: "+decodeURIComponent(i.font.family).replace(/'/g,"")+"; ",n="color: "+(i.color?i.color:i.forecolor)+"; ",o="font-size: "+(-1===i.size.indexOf("px")?i.size+"px; ":i.size+"; "),r="font-weight: "+(i.bold?"bold":"normal")+"; ",s="font-style: "+(i.italic?"italic":"normal")+"; ",a="text-decoration: "+(i.underline?"underline":"none")+"; ",l="background-color: "+(i.highlightColor?i.highlightColor:i.backcolor)+";";return"."+e+" {"+t+n+o+r+s+a+l+"}"}function i(e){for(var i=document.createElement("style"),t=0,n=e.length;n>t;t++)i.appendChild(document.createTextNode(e[t]));document.head.appendChild(i)}function t(t,r){function s(){r&&"function"==typeof r&&r()}function a(){s()}var l=null,d=[],c=[],u=[];if(!t||0===t.length)return s(),void 0;t.forEach(function(t){t.class&&t.fontStyle&&i([e(t.class,t.fontStyle)])});for(var f=0;f<t.length;f++)t[f].fontStyle&&t[f].fontStyle.font.type&&"google"===t[f].fontStyle.font.type&&(l=t[f].fontStyle.font.family.split(",")[0],l=l.replace(/'/g,""),d.push(l));for(f=0;f<t.length;f++)t[f].fontStyle&&t[f].fontStyle.font.type&&"custom"===t[f].fontStyle.font.type&&(c.push(decodeURIComponent(t[f].fontStyle.font.family).replace(/'/g,"")),u.push(t[f].fontStyle.font.url.replace(/'/g,"\\'")));if(0===d.length&&0===c.length)s();else{for(var g=0;g<c.length;g+=1)n(c[g],u[g]);d.length>0?o(d,a):s()}}function n(e,i,t){var n=null,o="font-family: "+e+"; src: url('"+i+"');";t=t||document,n=t.styleSheets[0],null!==n&&n.addRule("@font-face",o)}function o(e,i){WebFont.load({google:{families:e},active:function(){i&&"function"==typeof i&&i()},inactive:function(){i&&"function"==typeof i&&i()},timeout:2e3})}function r(e){for(var i=e.length,t=[],n=0;i>n;n++)t[n]=new Image,t[n].src=e[n]}function s(e){for(var i,t=window.location.search.substring(1),n=t.split("&"),o=0;o<n.length;o++)if(i=n[o].split("="),i[0]==e)return decodeURIComponent(i[1]);return""}function a(e){var i="";switch(e){case 404:i="The file does not exist or cannot be accessed.";break;case 507:i="There is not enough disk space to save the file on Rise Cache.";break;default:i="There was a problem retrieving the file from Rise Cache."}return i}function l(e){var i=document.createElement("div");return i.innerHTML=e,i.textContent}function d(e,i){var t=new XMLHttpRequest;if(e&&i&&"function"==typeof i){t.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{t.send(),i(t.status>=200&&t.status<304)}catch(n){i(!1)}}}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:i,loadFonts:t,loadCustomFont:n,loadGoogleFonts:o,preloadImages:r,getRiseCacheErrorMessage:a,unescapeHTML:l,hasInternetConnection:d}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var i=new XMLHttpRequest;e&&"function"==typeof e&&(i.open("GET",n+"ping?callback=_",!0),i.onreadystatechange=function(){try{4===i.readyState&&(o=!0,200===i.status?(r=!0,e(!0,i.responseText)):(console.debug("Rise Cache is not running"),r=!1,e(!1,null)))}catch(t){console.debug("Caught exception: ",t.description)}},i.send())}function i(e,i,t){function s(){var i,o,s;r?i=t?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):t?i=e:(o=e.split("?"),s=1===o.length?"?":"&",i=e+s+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,t){var n=new XMLHttpRequest,o={xhr:n,url:t};r?(n.open(e,t,!0),n.addEventListener("loadend",function(){var r=n.status||0;r>=200&&300>r?i(o):"HEAD"===e?a("GET",t):i(o,new Error("The request failed with status code: "+r))}),n.send()):i(o)}if(e&&i&&"function"==typeof i)return o?s():this.ping(s)}function t(e){return e&&"function"==typeof e?o?(e(r),void 0):this.ping(function(){e(r)}):void 0}var n="//localhost:9494/",o=!1,r=!1;return{getFile:i,isRiseCacheRunning:t,ping:e}}();var version="1.1.0";"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e,i){"use strict";function t(){i.rpc.call("","rsevent_done",null,S.getString("id")),null!==P&&c(P,!0),c({event:"done"},!1)}function n(){i.rpc.call("","rsevent_ready",null,S.getString("id"),!0,!0,!0,!0,!0)}function o(){clearTimeout(G),G=null}function r(){o(),G=setTimeout(function(){t()},5e3)}function s(){if(M&&M.length>0){if("file"===C)return M[0];if("folder"===C&&D)return M[D]}return null}function a(){return q}function l(){return H}function d(e,i){U=!0,q="undefined"!=typeof i,L.show(e),D=null,F.remove(k,A.getFrameOrigin(),function(){x||r()})}function c(e,i){i&&(P=e),e.file_url||(e.file_url=s()),RiseVision.Common.LoggerUtils.logEvent(v(),e)}function u(e){"file"===C?M[0]=e:"folder"===C&&(M=e),L.hide(),x||m()}function f(e){"file"===C?M[0]=e:"folder"===C&&(M=e),U=!1,H=!1,q=!1,P=null}function g(){var e=F.getFrameObject(k);x=!0,o(),e&&(N?e.postMessage({event:"pause"},A.getFrameOrigin()):(D=null,F.remove(k,A.getFrameOrigin())))}function m(){var e,i={},t=F.getFrameObject(k);return b&&(b=!1,i.event="configuration",i.event_details=O,c(i,!1)),x=!1,c({event:"play"},!1),U?(r(),void 0):(t?t.postMessage({event:"play"},A.getFrameOrigin()):M&&M.length>0&&RiseVision.Common.RiseCache.isRiseCacheRunning(function(i){"file"===C?(e=i?"//localhost:9494/?url="+encodeURIComponent(A.getBucketPath())+"player-file-cache.html":"player-file.html",F.add(0),F.createFramePlayer(0,w,M[0],e,A.getFrameOrigin())):"folder"===C&&(e=i?"//localhost:9494/?url="+encodeURIComponent(A.getBucketPath())+"player-folder-cache.html":"player-folder.html",F.add(0),F.createFramePlayer(0,w,M,e,A.getFrameOrigin()))}),void 0)}function v(){return"video_v2_events"}function p(){D=null,F.remove(k,A.getFrameOrigin(),function(){t()})}function h(){var e;L.hide(),x||(e=F.getFrameObject(k),e&&e.postMessage({event:"play"},A.getFrameOrigin()))}function V(e){D=e}function R(e,t){var o;w=_.clone(e),C=t,S=new i.Prefs,document.getElementById("videoContainer").style.height=S.getInt("rsH")+"px",w.width=S.getInt("rsW"),w.height=S.getInt("rsH"),w.video.hasOwnProperty("resume")&&(N=w.video.resume),L=new RiseVision.Common.Message(document.getElementById("videoContainer"),document.getElementById("messageContainer")),L.show("Please wait while your video is downloaded."),A=new RiseVision.Video.WindowController,A.init(),F=new RiseVision.Video.FrameController,"file"===C?(o=0!==Object.keys(w.storage).length,o?(O="storage file",I=new RiseVision.Video.StorageFile(w),I.init()):(O="custom",T=new RiseVision.Video.NonStorage(w),T.init())):"folder"===C&&(O="storage folder",I=new RiseVision.Video.StorageFolder(w),I.init()),n()}function y(e){var i=null,t={},n="Sorry, there was a problem playing the video.",o="Error loading media: File could not be played",r="Error loading YouTube: Video could not be played",s="Error loading player: No playable sources found",a="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.",l="The format of that video is not supported";e&&(e.type&&e.message?i=e.type+" - "+e.message:e.type?i=e.type:e.message&&(i=e.message),e.message&&(e.message===o||e.message===r?n=a:e.message===s&&(n=l))),t.event="player error",t.event_details=i,H=!0,c(t,!0),d(n)}function E(){g()}var w,C,b=!0,O=null,S=null,I=null,T=null,L=null,F=null,A=null,x=!0,N=!0,k=0,M=[],D=null,P=null,G=null,U=!1,q=!1,H=!1;return{getTableName:v,hasPlayerError:l,hasStorageError:a,logEvent:c,onFileInit:u,onFileRefresh:f,pause:g,play:m,setAdditionalParams:R,showError:d,playerEnded:p,playerReady:h,playerError:y,playerItemChange:V,stop:E}}(window,gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function i(){var i=document.getElementById("videoStorage");i&&(i.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(t?(t=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Video.onFileRefresh(e.detail.url):(RiseVision.Video.hasStorageError()||RiseVision.Video.hasPlayerError())&&RiseVision.Video.onFileRefresh(e.detail.url)))}),i.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),i.addEventListener("rise-storage-no-file",function(e){var i={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),i.addEventListener("rise-storage-file-throttled",function(e){var i={event:"storage file throttled",file_url:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),i.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),i.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),i.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),i.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),i.setAttribute("folder",e.storage.folder),i.setAttribute("fileName",e.storage.fileName),i.setAttribute("companyId",e.storage.companyId),i.setAttribute("env",config.STORAGE_ENV),i.go())}var t=!0;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function i(){return _.pluck(l,"url")}function t(e){return _.find(l,function(i){return e.name===i.name})}function n(e){var i=t(e);i&&l.splice(l.indexOf(i),1)}function o(e){var i=t(e);i&&(i.url=e.url)}function r(e){var i=t(e);i||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function s(){var t=document.getElementById("videoStorage");t&&(t.addEventListener("rise-storage-response",function(e){var t=e.detail;if(t.added&&(r(t),a))return a=!1,RiseVision.Video.onFileInit(i()),void 0;if(t.hasOwnProperty("changed"))if(t.changed)o(t);else if(!RiseVision.Video.hasStorageError()&&!RiseVision.Video.hasPlayerError())return;t.deleted&&n(t),RiseVision.Video.onFileRefresh(i())}),t.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),t.addEventListener("rise-storage-no-folder",function(e){var i={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"storage folder format(s) invalid"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any supported video formats.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),t.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),t.setAttribute("fileType","video"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go())}var a=!0,l=[];return{init:s}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function i(e){o.getFile(l,function(e,i){if(i){RiseVision.Video.logEvent({event:"non-storage error",event_details:i.message,file_url:e.url},!0);var n=0;i.message&&(n=+i.message.substring(i.message.indexOf(":")+2));var o=RiseVision.Common.Utilities.getRiseCacheErrorMessage(n);RiseVision.Video.showError(o)}else a?(a=!1,RiseVision.Video.onFileInit(e.url),t()):RiseVision.Video.onFileRefresh(e.url)},e)}function t(){null===s&&(s=setInterval(function(){i(!1)},r))}function n(){l=e.url&&""!==e.url?e.url:e.selector.url,i(!0)}var o=RiseVision.Common.RiseCache,r=9e5,s=null,a=!0,l="";return{init:n}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.WindowController=function(){"use strict";function e(){var e=window.location.pathname.split("/"),i=window.location.host,t=window.location.protocol;s=t+"//"+i+"/";for(var n=0;n<e.length&&(""===e[n]||(s+=e[n]+"/","dist"!==e[n]));n+=1);}function i(){"localhost:8000"===window.location.host?a="http://localhost:8000":"s3.amazonaws.com"===window.location.host&&RiseVision.Common.RiseCache.isRiseCacheRunning(function(i){i?(a="http://localhost:9494",e()):a="http://s3.amazonaws.com"})}function t(){window.addEventListener("message",function(e){var i=e.origin||e.originalEvent.origin;if("http://localhost:9494"!==i&&"http://s3.amazonaws.com"!==i&&"http://localhost:8000"!==i)return i=null,void 0;if(e.data&&"object"==typeof e.data&&e.data.event)switch(e.data.event){case"playerEnded":RiseVision.Video.playerEnded();break;case"playerError":RiseVision.Video.playerError(e.data.error);break;case"playerItemChange":RiseVision.Video.playerItemChange(e.data.index);break;case"playerReady":RiseVision.Video.playerReady()}})}function n(){return s}function o(){return a}function r(){i(),t()}var s="",a="";return{getBucketPath:n,getFrameOrigin:o,init:r}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.FrameController=function(){"use strict";function e(e){return document.getElementById(l+e)}function i(i){var t,n=e(i);return t=n.querySelector("iframe"),t?t.contentWindow?t.contentWindow:t.contentDocument.document?t.contentDocument.document:t.contentDocument:null}function t(t,n){var o,r=e(t),s=i(t);s&&(o=r.querySelector("iframe"),s.postMessage({event:"remove"},n),o.setAttribute("src","about:blank"))}function n(i){var t=e(i),n=document.createElement("iframe");n.setAttribute("allowTransparency",!0),n.setAttribute("frameborder","0"),n.setAttribute("scrolling","no"),t.appendChild(n)}function o(t,n,o,r,s){var a,l=e(t),d=i(t);d&&(a=l.querySelector("iframe"),a.onload=function(){a.onload=null,d.postMessage({event:"init",params:n,files:o},s)},a.setAttribute("src",r))}function r(i){var t=e(i);t.style.visibility="hidden"}function s(e,i,n){var o=document.getElementById(l+e);t(e,i),setTimeout(function(){for(;o.firstChild;)o.removeChild(o.firstChild);n&&"function"==typeof n&&n()},200)}function a(i){var t=e(i);t.style.visibility="visible"}var l="if_";return{add:n,createFramePlayer:o,getFrameContainer:e,getFrameObject:i,hide:r,remove:s,show:a}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,i){"use strict";function t(){try{i.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function n(){if(r){for(;i.firstChild;)i.removeChild(i.firstChild);i.style.display="none",e.style.visibility="visible",r=!1}}function o(t){var n,o=document.createDocumentFragment();r?(n=i.querySelector(".message"),n.innerHTML=t):(e.style.visibility="hidden",i.style.display="block",n=document.createElement("p"),n.innerHTML=t,n.setAttribute("class","message"),o.appendChild(n),i.appendChild(o),r=!0)}var r=!1;return t(),{hide:n,show:o}},function(e,i){"use strict";function t(e,i){var t=null,n="",o="",r="";Array.isArray(e)&&e.length>0&&Array.isArray(i)&&i.length>0&&("companyId"===e[0]&&(o=i[0]),"displayId"===e[1]&&(r=i[1]?i[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,r),RiseVision.Common.LoggerUtils.setVersion(version),"additionalParams"===e[2]&&(t=JSON.parse(i[2]),n=0!==Object.keys(t.storage).length?t.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(t,n)))}function n(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function r(){RiseVision.Video.stop()}function s(){e.removeEventListener("WebComponentsReady",s),l&&""!==l&&(i.rpc.register("rscmd_play_"+l,n),i.rpc.register("rscmd_pause_"+l,o),i.rpc.register("rscmd_stop_"+l,r),i.rpc.register("rsparam_set_"+l,t),i.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var a=new i.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",s)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var i=document.getElementsByTagName("script")[0];i.parentNode.insertBefore(e,i)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3dpZGdldC5taW4uanMiXSwibmFtZXMiOlsiV0lER0VUX0NPTU1PTl9DT05GSUciLCJBVVRIX1BBVEhfVVJMIiwiTE9HR0VSX0NMSUVOVF9JRCIsIkxPR0dFUl9DTElFTlRfU0VDUkVUIiwiTE9HR0VSX1JFRlJFU0hfVE9LRU4iLCJTVE9SQUdFX0VOViIsIlNUT1JFX1VSTCIsIlJpc2VWaXNpb24iLCJDb21tb24iLCJMb2dnZXJVdGlscyIsImdldEV2ZW50UGFyYW1zIiwicGFyYW1zIiwiY2IiLCJqc29uIiwiZXZlbnQiLCJmaWxlX3VybCIsImZpbGVfZm9ybWF0IiwiZ2V0RmlsZUZvcm1hdCIsImNvbXBhbnlfaWQiLCJjb21wYW55SWQiLCJkaXNwbGF5X2lkIiwiZGlzcGxheUlkIiwidmVyc2lvbiIsImdldFN1ZmZpeCIsImRhdGUiLCJEYXRlIiwieWVhciIsImdldFVUQ0Z1bGxZZWFyIiwibW9udGgiLCJnZXRVVENNb250aCIsImRheSIsImdldFVUQ0RhdGUiLCJ1cmwiLCJzdHIiLCJoYXNQYXJhbXMiLCJzdWJzdHIiLCJsYXN0SW5kZXhPZiIsInRlc3QiLCJpbmRleE9mIiwibGVuZ3RoIiwidG9Mb3dlckNhc2UiLCJnZXRJbnNlcnREYXRhIiwiQkFTRV9JTlNFUlRfU0NIRU1BIiwia2luZCIsInNraXBJbnZhbGlkUm93cyIsImlnbm9yZVVua25vd25WYWx1ZXMiLCJ0ZW1wbGF0ZVN1ZmZpeCIsInJvd3MiLCJpbnNlcnRJZCIsImRhdGEiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJ0b1VwcGVyQ2FzZSIsInRzIiwidG9JU09TdHJpbmciLCJsb2dFdmVudCIsInRhYmxlIiwiTG9nZ2VyIiwibG9nIiwic2V0SWRzIiwiY29tcGFueSIsImRpc3BsYXkiLCJzZXRWZXJzaW9uIiwidmFsdWUiLCJ1dGlscyIsInJlZnJlc2hUb2tlbiIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwicmVmcmVzaERhdGUiLCJvcGVuIiwiUkVGUkVTSF9VUkwiLCJvbmxvYWRlbmQiLCJyZXNwIiwicmVzcG9uc2UiLCJ0b2tlbiIsImFjY2Vzc190b2tlbiIsInJlZnJlc2hlZEF0Iiwic2VuZCIsImlzVGhyb3R0bGVkIiwidGhyb3R0bGUiLCJsYXN0RXZlbnQiLCJ0YWJsZU5hbWUiLCJpbnNlcnRXaXRoVG9rZW4iLCJyZWZyZXNoRGF0YSIsImluc2VydERhdGEiLCJzZXJ2aWNlVXJsIiwicmVwbGFjZSIsInNldFJlcXVlc3RIZWFkZXIiLCJoYXNPd25Qcm9wZXJ0eSIsInNldFRpbWVvdXQiLCJ0aHJvdHRsZURlbGF5IiwiVXRpbGl0aWVzIiwiZ2V0Rm9udENzc1N0eWxlIiwiY2xhc3NOYW1lIiwiZm9udE9iaiIsImZhbWlseSIsImRlY29kZVVSSUNvbXBvbmVudCIsImZvbnQiLCJjb2xvciIsImZvcmVjb2xvciIsInNpemUiLCJ3ZWlnaHQiLCJib2xkIiwiaXRhbGljIiwidW5kZXJsaW5lIiwiaGlnaGxpZ2h0IiwiaGlnaGxpZ2h0Q29sb3IiLCJiYWNrY29sb3IiLCJhZGRDU1NSdWxlcyIsInJ1bGVzIiwic3R5bGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImhlYWQiLCJsb2FkRm9udHMiLCJzZXR0aW5ncyIsImNhbGxiYWNrIiwib25Hb29nbGVGb250c0xvYWRlZCIsImZhbWlsaWVzIiwiZ29vZ2xlRmFtaWxpZXMiLCJjdXN0b21GYW1pbGllcyIsImN1c3RvbVVybHMiLCJmb3JFYWNoIiwiaXRlbSIsImNsYXNzIiwiZm9udFN0eWxlIiwidHlwZSIsInNwbGl0IiwicHVzaCIsImoiLCJsb2FkQ3VzdG9tRm9udCIsImxvYWRHb29nbGVGb250cyIsImNvbnRlbnREb2MiLCJzaGVldCIsInJ1bGUiLCJzdHlsZVNoZWV0cyIsImFkZFJ1bGUiLCJXZWJGb250IiwibG9hZCIsImdvb2dsZSIsImFjdGl2ZSIsImluYWN0aXZlIiwidGltZW91dCIsInByZWxvYWRJbWFnZXMiLCJ1cmxzIiwiaW1hZ2VzIiwiSW1hZ2UiLCJzcmMiLCJnZXRRdWVyeVBhcmFtZXRlciIsInBhcmFtIiwicGFpciIsInF1ZXJ5Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJzdWJzdHJpbmciLCJ2YXJzIiwiZ2V0UmlzZUNhY2hlRXJyb3JNZXNzYWdlIiwic3RhdHVzQ29kZSIsImVycm9yTWVzc2FnZSIsInVuZXNjYXBlSFRNTCIsImh0bWwiLCJkaXYiLCJpbm5lckhUTUwiLCJ0ZXh0Q29udGVudCIsImhhc0ludGVybmV0Q29ubmVjdGlvbiIsImZpbGVQYXRoIiwiZ2V0VGltZSIsInN0YXR1cyIsImUiLCJSaXNlQ2FjaGUiLCJwaW5nIiwiciIsIkJBU0VfQ0FDSEVfVVJMIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsIl9waW5nUmVjZWl2ZWQiLCJfaXNDYWNoZVJ1bm5pbmciLCJyZXNwb25zZVRleHQiLCJjb25zb2xlIiwiZGVidWciLCJkZXNjcmlwdGlvbiIsImdldEZpbGUiLCJmaWxlVXJsIiwibm9jYWNoZWJ1c3RlciIsImZpbGVSZXF1ZXN0Iiwic2VwYXJhdG9yIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibWFrZVJlcXVlc3QiLCJtZXRob2QiLCJyZXF1ZXN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsIkVycm9yIiwidGhpcyIsImlzUmlzZUNhY2hlUnVubmluZyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25zdGFudCIsImNvbmZpZyIsIlZpZGVvIiwiZ2FkZ2V0cyIsIl9kb25lIiwicnBjIiwiY2FsbCIsIl9wcmVmcyIsImdldFN0cmluZyIsIl9lcnJvckxvZyIsIl9yZWFkeSIsIl9jbGVhckVycm9yVGltZXIiLCJjbGVhclRpbWVvdXQiLCJfZXJyb3JUaW1lciIsIl9zdGFydEVycm9yVGltZXIiLCJfZ2V0Q3VycmVudEZpbGUiLCJfY3VycmVudEZpbGVzIiwiX21vZGUiLCJfY3VycmVudFBsYXlsaXN0SW5kZXgiLCJoYXNTdG9yYWdlRXJyb3IiLCJfc3RvcmFnZUVycm9yRmxhZyIsImhhc1BsYXllckVycm9yIiwiX3BsYXllckVycm9yRmxhZyIsInNob3dFcnJvciIsIm1lc3NhZ2UiLCJpc1N0b3JhZ2VFcnJvciIsIl9lcnJvckZsYWciLCJfbWVzc2FnZSIsInNob3ciLCJfZnJhbWVDb250cm9sbGVyIiwicmVtb3ZlIiwiX2N1cnJlbnRGcmFtZSIsIl93aW5kb3dDb250cm9sbGVyIiwiZ2V0RnJhbWVPcmlnaW4iLCJfdmlld2VyUGF1c2VkIiwiaXNFcnJvciIsImdldFRhYmxlTmFtZSIsIm9uRmlsZUluaXQiLCJoaWRlIiwicGxheSIsIm9uRmlsZVJlZnJlc2giLCJwYXVzZSIsImZyYW1lT2JqIiwiZ2V0RnJhbWVPYmplY3QiLCJfcmVzdW1lIiwicG9zdE1lc3NhZ2UiLCJsb2dQYXJhbXMiLCJfaXNMb2FkaW5nIiwiZXZlbnRfZGV0YWlscyIsIl9jb25maWdEZXRhaWxzIiwiaXNSdW5uaW5nIiwiZ2V0QnVja2V0UGF0aCIsImFkZCIsImNyZWF0ZUZyYW1lUGxheWVyIiwiX2FkZGl0aW9uYWxQYXJhbXMiLCJwbGF5ZXJFbmRlZCIsInBsYXllclJlYWR5IiwicGxheWVySXRlbUNoYW5nZSIsImluZGV4Iiwic2V0QWRkaXRpb25hbFBhcmFtcyIsIm1vZGUiLCJpc1N0b3JhZ2VGaWxlIiwiXyIsImNsb25lIiwiUHJlZnMiLCJnZXRFbGVtZW50QnlJZCIsImhlaWdodCIsImdldEludCIsIndpZHRoIiwidmlkZW8iLCJyZXN1bWUiLCJNZXNzYWdlIiwiV2luZG93Q29udHJvbGxlciIsImluaXQiLCJGcmFtZUNvbnRyb2xsZXIiLCJPYmplY3QiLCJrZXlzIiwic3RvcmFnZSIsIl9zdG9yYWdlIiwiU3RvcmFnZUZpbGUiLCJfbm9uU3RvcmFnZSIsIk5vblN0b3JhZ2UiLCJTdG9yYWdlRm9sZGVyIiwicGxheWVyRXJyb3IiLCJlcnJvciIsImRldGFpbHMiLCJNRURJQV9FUlJPUiIsIllPVVRVQkVfRVJST1IiLCJQTEFZRVJfRVJST1IiLCJFTkNPRElOR19NRVNTQUdFIiwiRk9STUFUX01FU1NBR0UiLCJzdG9wIiwiZGV0YWlsIiwiX2luaXRpYWxMb2FkIiwiY2hhbmdlZCIsImNvZGUiLCJjdXJyZW50VGFyZ2V0Iiwic2V0QXR0cmlidXRlIiwiZm9sZGVyIiwiZmlsZU5hbWUiLCJnbyIsIl9nZXRVcmxzIiwicGx1Y2siLCJfZmlsZXMiLCJfZ2V0RXhpc3RpbmdGaWxlIiwiZmlsZSIsImZpbmQiLCJmIiwibmFtZSIsIl9kZWxldGVGaWxlIiwiZXhpc3RpbmciLCJzcGxpY2UiLCJfY2hhbmdlRmlsZSIsIl9hZGRGaWxlIiwic2xpY2UiLCJzb3J0ZWRJbmRleCIsImFkZGVkIiwiZGVsZXRlZCIsIl9nZXRGaWxlIiwib21pdENhY2hlQnVzdGVyIiwicmlzZUNhY2hlIiwiX3VybCIsIl9zdGFydFJlZnJlc2hJbnRlcnZhbCIsIl9yZWZyZXNoSW50ZXJ2YWxJZCIsInNldEludGVydmFsIiwiX3JlZnJlc2hEdXJhdGlvbiIsInNlbGVjdG9yIiwiX3NldEJ1Y2tldFBhdGgiLCJwYXRoQXJyYXkiLCJwYXRobmFtZSIsImhvc3QiLCJwcm90b2NvbCIsIl9idWNrZXRQYXRoIiwiX3NldEZyYW1lT3JpZ2luIiwiX2ZyYW1lT3JpZ2luIiwiX3NldE1lc3NhZ2VSZWNlaXZlciIsIm9yaWdpbiIsIm9yaWdpbmFsRXZlbnQiLCJnZXRGcmFtZUNvbnRhaW5lciIsIlBSRUZJWCIsImlmcmFtZSIsImZyYW1lQ29udGFpbmVyIiwicXVlcnlTZWxlY3RvciIsImNvbnRlbnRXaW5kb3ciLCJjb250ZW50RG9jdW1lbnQiLCJfY2xlYXIiLCJmaWxlcyIsIm9ubG9hZCIsInZpc2liaWxpdHkiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJtYWluQ29udGFpbmVyIiwibWVzc2FnZUNvbnRhaW5lciIsIl9pbml0Iiwid2FybiIsIl9hY3RpdmUiLCJwIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiY29uZmlndXJlIiwibmFtZXMiLCJ2YWx1ZXMiLCJhZGRpdGlvbmFsUGFyYW1zIiwiQXJyYXkiLCJpc0FycmF5IiwicG9seW1lclJlYWR5IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlkIiwicmVnaXN0ZXIiLCJwcmVmcyIsIm9uY29udGV4dG1lbnUiLCJfZ2FxIiwiZ2EiLCJhc3luYyIsInMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiXSwibWFwcGluZ3MiOiJBQUNBLEdBQUlBLHVCQUNGQyxjQUFlLGlCQUNmQyxpQkFBa0IsNEVBQ2xCQyxxQkFBc0IsMkJBQ3RCQyxxQkFBc0IscUVBQ3RCQyxZQUFhLE9BQ2JDLFVBQVcsNkNBSVRDLFdBQWFBLGNBQ2pCQSxZQUFXQyxPQUFTRCxXQUFXQyxXQUUvQkQsV0FBV0MsT0FBT0MsWUFBYyxXQUM5QixZQVdBLFNBQVNDLEdBQWVDLEVBQVFDLEdBQzlCLEdBQUlDLEdBQU8sSUFHUEYsR0FBT0csT0FDVEQsRUFBT0YsRUFFSEUsRUFBS0UsV0FDUEYsRUFBS0csWUFBY0MsRUFBY0osRUFBS0UsV0FHeENGLEVBQUtLLFdBQWFDLEVBQ2xCTixFQUFLTyxXQUFhQyxFQUVkQyxJQUNGVCxFQUFLUyxRQUFVQSxHQUdqQlYsRUFBR0MsSUFHSEQsRUFBR0MsR0FLUCxRQUFTVSxLQUNQLEdBQUlDLEdBQU8sR0FBSUMsTUFDYkMsRUFBT0YsRUFBS0csaUJBQ1pDLEVBQVFKLEVBQUtLLGNBQWdCLEVBQzdCQyxFQUFNTixFQUFLTyxZQVViLE9BUlksSUFBUkgsSUFDRkEsRUFBUSxJQUFNQSxHQUdOLEdBQU5FLElBQ0ZBLEVBQU0sSUFBTUEsR0FHUEosRUFBT0UsRUFBUUUsRUFNeEIsUUFBU2IsR0FBY2UsR0FDckIsR0FDRUMsR0FERUMsRUFBWSxPQUdoQixPQUFLRixJQUFzQixnQkFBUkEsSUFJbkJDLEVBQU1ELEVBQUlHLE9BQU9ILEVBQUlJLFlBQVksS0FBTyxHQUdwQ0YsRUFBVUcsS0FBS0osS0FDakJBLEVBQU1BLEVBQUlFLE9BQU8sRUFBeUIsS0FBckJGLEVBQUlLLFFBQVEsS0FBZUwsRUFBSUssUUFBUSxL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LE1BQU15RixPQUduQixRQUFTMEUsS0FDUGxOLEVBQU9tTixvQkFBb0IscUJBQXNCRCxHQUU3Q0UsR0FBYSxLQUFQQSxJQUNScEssRUFBUUUsSUFBSW1LLFNBQVMsY0FBZ0JELEVBQUloSSxHQUN6Q3BDLEVBQVFFLElBQUltSyxTQUFTLGVBQWlCRCxFQUFJOUgsR0FDMUN0QyxFQUFRRSxJQUFJbUssU0FBUyxjQUFnQkQsRUFBSTVFLEdBRXpDeEYsRUFBUUUsSUFBSW1LLFNBQVMsZUFBaUJELEVBQUlSLEdBQzFDNUosRUFBUUUsSUFBSUMsS0FBSyxHQUFJLGNBQWUsS0FBTWlLLEdBQUssWUFBYSxZQUFhLHNCQTFFN0UsR0FBSUUsR0FBUSxHQUFJdEssR0FBUTZELE1BQ3RCdUcsRUFBS0UsRUFBTWpLLFVBQVUsS0FHdkJyRCxHQUFPdU4sY0FBZ0IsV0FDckIsT0FBTyxHQXlFVHZOLEVBQU91QyxpQkFBaUIscUJBQXNCMkssSUFFN0NsTixPQUFRZ0QsUUFLWCxJQUFJd0ssTUFBT0EsUUFFWEEsTUFBS2hQLE1BQU0sY0FBZSxrQkFDMUJnUCxLQUFLaFAsTUFBTSxtQkFFWCxXQUNFLEdBQUlpUCxHQUFLclEsU0FBU0MsY0FBYyxTQUFXb1EsR0FBR25QLEtBQU8sa0JBQW1CbVAsRUFBR0MsT0FBUSxFQUNuRkQsRUFBRzlOLEtBQU8sVUFBWXZDLFNBQVM2QyxTQUFTK0ssU0FBVyxjQUFnQixjQUFnQiw2QkFDbkYsSUFBSTJDLEdBQUl2USxTQUFTd1EscUJBQXFCLFVBQVUsRUFBSUQsR0FBRUUsV0FBV0MsYUFBYUwsRUFBSUUiLCJmaWxlIjoianMvd2lkZ2V0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGV4cG9ydGVkIFdJREdFVF9DT01NT05fQ09ORklHICovXG52YXIgV0lER0VUX0NPTU1PTl9DT05GSUcgPSB7XG4gIEFVVEhfUEFUSF9VUkw6IFwidjEvd2lkZ2V0L2F1dGhcIixcbiAgTE9HR0VSX0NMSUVOVF9JRDogXCIxMDg4NTI3MTQ3MTA5LTZxMW8ydnRpaG4zNDI5MnBqdDRja2htaGNrMHJrMG83LmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tXCIsXG4gIExPR0dFUl9DTElFTlRfU0VDUkVUOiBcIm5sWnlyY1BMZzZvRXdPOWY5V2ZuMjlXaFwiLFxuICBMT0dHRVJfUkVGUkVTSF9UT0tFTjogXCIxL3h6dDRrd3pFMUg3VzlWbktCOGNBYUN4NnpiNEVzNG5LRW9xYVlIZFREMTVJZ09ySkR0ZHVuNnpLNlhpQVRDS1RcIixcbiAgU1RPUkFHRV9FTlY6IFwicHJvZFwiLFxuICBTVE9SRV9VUkw6IFwiaHR0cHM6Ly9zdG9yZS1kb3QtcnZhc2VydmVyMi5hcHBzcG90LmNvbS9cIlxufTtcbi8qIGdsb2JhbCBXSURHRVRfQ09NTU9OX0NPTkZJRyAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXJVdGlscyA9IChmdW5jdGlvbigpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgIHZhciBkaXNwbGF5SWQgPSBcIlwiLFxuICAgICBjb21wYW55SWQgPSBcIlwiLFxuICAgICB2ZXJzaW9uID0gbnVsbDtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuXG4gIC8qIFJldHJpZXZlIHBhcmFtZXRlcnMgdG8gcGFzcyB0byB0aGUgZXZlbnQgbG9nZ2VyLiAqL1xuICBmdW5jdGlvbiBnZXRFdmVudFBhcmFtcyhwYXJhbXMsIGNiKSB7XG4gICAgdmFyIGpzb24gPSBudWxsO1xuXG4gICAgLy8gZXZlbnQgaXMgcmVxdWlyZWQuXG4gICAgaWYgKHBhcmFtcy5ldmVudCkge1xuICAgICAganNvbiA9IHBhcmFtcztcblxuICAgICAgaWYgKGpzb24uZmlsZV91cmwpIHtcbiAgICAgICAganNvbi5maWxlX2Zvcm1hdCA9IGdldEZpbGVGb3JtYXQoanNvbi5maWxlX3VybCk7XG4gICAgICB9XG5cbiAgICAgIGpzb24uY29tcGFueV9pZCA9IGNvbXBhbnlJZDtcbiAgICAgIGpzb24uZGlzcGxheV9pZCA9IGRpc3BsYXlJZDtcblxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAganNvbi52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgY2IoanNvbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY2IoanNvbik7XG4gICAgfVxuICB9XG5cbiAgLy8gR2V0IHN1ZmZpeCBmb3IgQlEgdGFibGUgbmFtZS5cbiAgZnVuY3Rpb24gZ2V0U3VmZml4KCkge1xuICAgIHZhciBkYXRlID0gbmV3IERhdGUoKSxcbiAgICAgIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKSArIDEsXG4gICAgICBkYXkgPSBkYXRlLmdldFVUQ0RhdGUoKTtcblxuICAgIGlmIChtb250aCA8IDEwKSB7XG4gICAgICBtb250aCA9IFwiMFwiICsgbW9udGg7XG4gICAgfVxuXG4gICAgaWYgKGRheSA8IDEwKSB7XG4gICAgICBkYXkgPSBcIjBcIiArIGRheTtcbiAgICB9XG5cbiAgICByZXR1cm4geWVhciArIG1vbnRoICsgZGF5O1xuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBnZXRGaWxlRm9ybWF0KHVybCkge1xuICAgIHZhciBoYXNQYXJhbXMgPSAvWz8jJl0vLFxuICAgICAgc3RyO1xuXG4gICAgaWYgKCF1cmwgfHwgdHlwZW9mIHVybCAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3RyID0gdXJsLnN1YnN0cih1cmwubGFzdEluZGV4T2YoXCIuXCIpICsgMSk7XG5cbiAgICAvLyBkb24ndCBpbmNsdWRlIGFueSBwYXJhbXMgYWZ0ZXIgdGhlIGZpbGVuYW1lXG4gICAgaWYgKGhhc1BhcmFtcy50ZXN0KHN0cikpIHtcbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCAsKHN0ci5pbmRleE9mKFwiP1wiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCI/XCIpIDogc3RyLmxlbmd0aCk7XG5cbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgKHN0ci5pbmRleE9mKFwiI1wiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCIjXCIpIDogc3RyLmxlbmd0aCk7XG5cbiAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgKHN0ci5pbmRleE9mKFwiJlwiKSAhPT0gLTEpID8gc3RyLmluZGV4T2YoXCImXCIpIDogc3RyLmxlbmd0aCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5zZXJ0RGF0YShwYXJhbXMpIHtcbiAgICB2YXIgQkFTRV9JTlNFUlRfU0NIRU1BID0ge1xuICAgICAgXCJraW5kXCI6IFwiYmlncXVlcnkjdGFibGVEYXRhSW5zZXJ0QWxsUmVxdWVzdFwiLFxuICAgICAgXCJza2lwSW52YWxpZFJvd3NcIjogZmFsc2UsXG4gICAgICBcImlnbm9yZVVua25vd25WYWx1ZXNcIjogZmFsc2UsXG4gICAgICBcInRlbXBsYXRlU3VmZml4XCI6IGdldFN1ZmZpeCgpLFxuICAgICAgXCJyb3dzXCI6IFt7XG4gICAgICAgIFwiaW5zZXJ0SWRcIjogXCJcIlxuICAgICAgfV1cbiAgICB9LFxuICAgIGRhdGEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KEJBU0VfSU5TRVJUX1NDSEVNQSkpO1xuXG4gICAgZGF0YS5yb3dzWzBdLmluc2VydElkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIpLnRvVXBwZXJDYXNlKCk7XG4gICAgZGF0YS5yb3dzWzBdLmpzb24gPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHBhcmFtcykpO1xuICAgIGRhdGEucm93c1swXS5qc29uLnRzID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICBmdW5jdGlvbiBsb2dFdmVudCh0YWJsZSwgcGFyYW1zKSB7XG4gICAgZ2V0RXZlbnRQYXJhbXMocGFyYW1zLCBmdW5jdGlvbihqc29uKSB7XG4gICAgICBpZiAoanNvbiAhPT0gbnVsbCkge1xuICAgICAgICBSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXIubG9nKHRhYmxlLCBqc29uKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qIFNldCB0aGUgQ29tcGFueSBhbmQgRGlzcGxheSBJRHMuICovXG4gIGZ1bmN0aW9uIHNldElkcyhjb21wYW55LCBkaXNwbGF5KSB7XG4gICAgY29tcGFueUlkID0gY29tcGFueTtcbiAgICBkaXNwbGF5SWQgPSBkaXNwbGF5O1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0VmVyc2lvbih2YWx1ZSkge1xuICAgIHZlcnNpb24gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJnZXRJbnNlcnREYXRhXCI6IGdldEluc2VydERhdGEsXG4gICAgXCJnZXRGaWxlRm9ybWF0XCI6IGdldEZpbGVGb3JtYXQsXG4gICAgXCJsb2dFdmVudFwiOiBsb2dFdmVudCxcbiAgICBcInNldElkc1wiOiBzZXRJZHMsXG4gICAgXCJzZXRWZXJzaW9uXCI6IHNldFZlcnNpb25cbiAgfTtcbn0pKCk7XG5cblJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlciA9IChmdW5jdGlvbih1dGlscykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgUkVGUkVTSF9VUkwgPSBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL29hdXRoMi92My90b2tlbj9jbGllbnRfaWQ9XCIgKyBXSURHRVRfQ09NTU9OX0NPTkZJRy5MT0dHRVJfQ0xJRU5UX0lEICtcbiAgICAgIFwiJmNsaWVudF9zZWNyZXQ9XCIgKyBXSURHRVRfQ09NTU9OX0NPTkZJRy5MT0dHRVJfQ0xJRU5UX1NFQ1JFVCArXG4gICAgICBcIiZyZWZyZXNoX3Rva2VuPVwiICsgV0lER0VUX0NPTU1PTl9DT05GSUcuTE9HR0VSX1JFRlJFU0hfVE9LRU4gK1xuICAgICAgXCImZ3JhbnRfdHlwZT1yZWZyZXNoX3Rva2VuXCI7XG5cbiAgdmFyIHNlcnZpY2VVcmwgPSBcImh0dHBzOi8vd3d3Lmdvb2dsZWFwaXMuY29tL2JpZ3F1ZXJ5L3YyL3Byb2plY3RzL2NsaWVudC1zaWRlLWV2ZW50cy9kYXRhc2V0cy9XaWRnZXRfRXZlbnRzL3RhYmxlcy9UQUJMRV9JRC9pbnNlcnRBbGxcIixcbiAgICB0aHJvdHRsZSA9IGZhbHNlLFxuICAgIHRocm90dGxlRGVsYXkgPSAxMDAwLFxuICAgIGxhc3RFdmVudCA9IFwiXCIsXG4gICAgcmVmcmVzaERhdGUgPSAwLFxuICAgIHRva2VuID0gXCJcIjtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiByZWZyZXNoVG9rZW4oY2IpIHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICBpZiAobmV3IERhdGUoKSAtIHJlZnJlc2hEYXRlIDwgMzU4MDAwMCkge1xuICAgICAgcmV0dXJuIGNiKHt9KTtcbiAgICB9XG5cbiAgICB4aHIub3BlbihcIlBPU1RcIiwgUkVGUkVTSF9VUkwsIHRydWUpO1xuICAgIHhoci5vbmxvYWRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciByZXNwID0gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpO1xuXG4gICAgICBjYih7IHRva2VuOiByZXNwLmFjY2Vzc190b2tlbiwgcmVmcmVzaGVkQXQ6IG5ldyBEYXRlKCkgfSk7XG4gICAgfTtcblxuICAgIHhoci5zZW5kKCk7XG4gIH1cblxuICBmdW5jdGlvbiBpc1Rocm90dGxlZChldmVudCkge1xuICAgIHJldHVybiB0aHJvdHRsZSAmJiAobGFzdEV2ZW50ID09PSBldmVudCk7XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGxvZyh0YWJsZU5hbWUsIHBhcmFtcykge1xuICAgIGlmICghdGFibGVOYW1lIHx8ICFwYXJhbXMgfHwgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcImV2ZW50XCIpICYmICFwYXJhbXMuZXZlbnQpIHx8XG4gICAgICAocGFyYW1zLmhhc093blByb3BlcnR5KFwiZXZlbnRcIikgJiYgaXNUaHJvdHRsZWQocGFyYW1zLmV2ZW50KSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aHJvdHRsZSA9IHRydWU7XG4gICAgbGFzdEV2ZW50ID0gcGFyYW1zLmV2ZW50O1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICB0aHJvdHRsZSA9IGZhbHNlO1xuICAgIH0sIHRocm90dGxlRGVsYXkpO1xuXG4gICAgZnVuY3Rpb24gaW5zZXJ0V2l0aFRva2VuKHJlZnJlc2hEYXRhKSB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgIGluc2VydERhdGEsIHVybDtcblxuICAgICAgdXJsID0gc2VydmljZVVybC5yZXBsYWNlKFwiVEFCTEVfSURcIiwgdGFibGVOYW1lKTtcbiAgICAgIHJlZnJlc2hEYXRlID0gcmVmcmVzaERhdGEucmVmcmVzaGVkQXQgfHwgcmVmcmVzaERhdGU7XG4gICAgICB0b2tlbiA9IHJlZnJlc2hEYXRhLnRva2VuIHx8IHRva2VuO1xuICAgICAgaW5zZXJ0RGF0YSA9IHV0aWxzLmdldEluc2VydERhdGEocGFyYW1zKTtcblxuICAgICAgLy8gSW5zZXJ0IHRoZSBkYXRhLlxuICAgICAgeGhyLm9wZW4oXCJQT1NUXCIsIHVybCwgdHJ1ZSk7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL2pzb25cIik7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkF1dGhvcml6YXRpb25cIiwgXCJCZWFyZXIgXCIgKyB0b2tlbik7XG5cbiAgICAgIGlmIChwYXJhbXMuY2IgJiYgdHlwZW9mIHBhcmFtcy5jYiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHhoci5vbmxvYWRlbmQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICBwYXJhbXMuY2IoeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQoSlNPTi5zdHJpbmdpZnkoaW5zZXJ0RGF0YSkpO1xuICAgIH1cblxuICAgIHJldHVybiByZWZyZXNoVG9rZW4oaW5zZXJ0V2l0aFRva2VuKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJsb2dcIjogbG9nXG4gIH07XG59KShSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXJVdGlscyk7XG4vKiBnbG9iYWwgV2ViRm9udCAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uID0gUmlzZVZpc2lvbi5Db21tb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcyA9IChmdW5jdGlvbigpIHtcblxuICBmdW5jdGlvbiBnZXRGb250Q3NzU3R5bGUoY2xhc3NOYW1lLCBmb250T2JqKSB7XG4gICAgdmFyIGZhbWlseSA9IFwiZm9udC1mYW1pbHk6IFwiICsgZGVjb2RlVVJJQ29tcG9uZW50KGZvbnRPYmouZm9udC5mYW1pbHkpLnJlcGxhY2UoLycvZywgXCJcIikgKyBcIjsgXCI7XG4gICAgdmFyIGNvbG9yID0gXCJjb2xvcjogXCIgKyAoZm9udE9iai5jb2xvciA/IGZvbnRPYmouY29sb3IgOiBmb250T2JqLmZvcmVjb2xvcikgKyBcIjsgXCI7XG4gICAgdmFyIHNpemUgPSBcImZvbnQtc2l6ZTogXCIgKyAoZm9udE9iai5zaXplLmluZGV4T2YoXCJweFwiKSA9PT0gLTEgPyBmb250T2JqLnNpemUgKyBcInB4OyBcIiA6IGZvbnRPYmouc2l6ZSArIFwiOyBcIik7XG4gICAgdmFyIHdlaWdodCA9IFwiZm9udC13ZWlnaHQ6IFwiICsgKGZvbnRPYmouYm9sZCA/IFwiYm9sZFwiIDogXCJub3JtYWxcIikgKyBcIjsgXCI7XG4gICAgdmFyIGl0YWxpYyA9IFwiZm9udC1zdHlsZTogXCIgKyAoZm9udE9iai5pdGFsaWMgPyBcIml0YWxpY1wiIDogXCJub3JtYWxcIikgKyBcIjsgXCI7XG4gICAgdmFyIHVuZGVybGluZSA9IFwidGV4dC1kZWNvcmF0aW9uOiBcIiArIChmb250T2JqLnVuZGVybGluZSA/IFwidW5kZXJsaW5lXCIgOiBcIm5vbmVcIikgKyBcIjsgXCI7XG4gICAgdmFyIGhpZ2hsaWdodCA9IFwiYmFja2dyb3VuZC1jb2xvcjogXCIgKyAoZm9udE9iai5oaWdobGlnaHRDb2xvciA/IGZvbnRPYmouaGlnaGxpZ2h0Q29sb3IgOiBmb250T2JqLmJhY2tjb2xvcikgKyBcIjtcIjtcblxuICAgIHJldHVybiBcIi5cIiArIGNsYXNzTmFtZSArIFwiIHtcIiArIGZhbWlseSArIGNvbG9yICsgc2l6ZSArIHdlaWdodCArIGl0YWxpYyArIHVuZGVybGluZSArIGhpZ2hsaWdodCArIFwifVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQ1NTUnVsZXMocnVsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcnVsZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGVzW2ldKSk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICAvKlxuICAgKiBMb2FkcyBHb29nbGUgb3IgY3VzdG9tIGZvbnRzLCBpZiBhcHBsaWNhYmxlLCBhbmQgaW5qZWN0cyBDU1Mgc3R5bGVzXG4gICAqIGludG8gdGhlIGhlYWQgb2YgdGhlIGRvY3VtZW50LlxuICAgKlxuICAgKiBAcGFyYW0gICAgYXJyYXkgICAgc2V0dGluZ3MgICAgQXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbe1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcImRhdGVcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9udFNldHRpbmdcIjoge1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbGQ6IHRydWUsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiB7XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYW1pbHk6IFwiQWtyb25pbVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDogXCJBa3JvbmltXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlZlcmRhbmFcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ29vZ2xlXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL2N1c3RvbS1mb250LXVybFwiXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0YWxpYzogZmFsc2UsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCIyMFwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybGluZTogZmFsc2VcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgKlxuICAgKiAgICAgICAgICAgb2JqZWN0ICAgY29udGVudERvYyAgICBEb2N1bWVudCBvYmplY3QgaW50byB3aGljaCB0byBpbmplY3Qgc3R5bGVzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBsb2FkIGZvbnRzIChvcHRpb25hbCkuXG4gICAqL1xuICBmdW5jdGlvbiBsb2FkRm9udHMoc2V0dGluZ3MsIGNiKSB7XG4gICAgdmFyIGZhbWlsaWVzID0gbnVsbCxcbiAgICAgIGdvb2dsZUZhbWlsaWVzID0gW10sXG4gICAgICBjdXN0b21GYW1pbGllcyA9IFtdLFxuICAgICAgY3VzdG9tVXJscyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2IoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkdvb2dsZUZvbnRzTG9hZGVkKCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICBpZiAoIXNldHRpbmdzIHx8IHNldHRpbmdzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgY3VzdG9tIGNzcyBjbGFzcyBuYW1lcyBhbmQgYWRkIHJ1bGVzIGlmIHNvXG4gICAgc2V0dGluZ3MuZm9yRWFjaChmdW5jdGlvbihpdGVtKSB7XG4gICAgICBpZiAoaXRlbS5jbGFzcyAmJiBpdGVtLmZvbnRTdHlsZSkge1xuICAgICAgICBhZGRDU1NSdWxlcyhbIGdldEZvbnRDc3NTdHlsZShpdGVtLmNsYXNzLCBpdGVtLmZvbnRTdHlsZSkgXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBHb29nbGUgZm9udHNcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNldHRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc2V0dGluZ3NbaV0uZm9udFN0eWxlICYmIHNldHRpbmdzW2ldLmZvbnRTdHlsZS5mb250LnR5cGUgJiZcbiAgICAgICAgKHNldHRpbmdzW2ldLmZvbnRTdHlsZS5mb250LnR5cGUgPT09IFwiZ29vZ2xlXCIpKSB7XG4gICAgICAgIC8vIFJlbW92ZSBmYWxsYmFjayBmb250LlxuICAgICAgICBmYW1pbGllcyA9IHNldHRpbmdzW2ldLmZvbnRTdHlsZS5mb250LmZhbWlseS5zcGxpdChcIixcIilbMF07XG5cbiAgICAgICAgLy8gc3RyaXAgcG9zc2libGUgc2luZ2xlIHF1b3Rlc1xuICAgICAgICBmYW1pbGllcyA9IGZhbWlsaWVzLnJlcGxhY2UoLycvZywgXCJcIik7XG5cbiAgICAgICAgZ29vZ2xlRmFtaWxpZXMucHVzaChmYW1pbGllcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3VzdG9tIGZvbnRzXG4gICAgZm9yIChpID0gMDsgaSA8IHNldHRpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc2V0dGluZ3NbaV0uZm9udFN0eWxlICYmIHNldHRpbmdzW2ldLmZvbnRTdHlsZS5mb250LnR5cGUgJiZcbiAgICAgICAgKHNldHRpbmdzW2ldLmZvbnRTdHlsZS5mb250LnR5cGUgPT09IFwiY3VzdG9tXCIpKSB7XG4gICAgICAgIC8vIGRlY29kZSB2YWx1ZSBhbmQgc3RyaXAgc2luZ2xlIHF1b3Rlc1xuICAgICAgICBjdXN0b21GYW1pbGllcy5wdXNoKGRlY29kZVVSSUNvbXBvbmVudChzZXR0aW5nc1tpXS5mb250U3R5bGUuZm9udC5mYW1pbHkpLnJlcGxhY2UoLycvZywgXCJcIikpO1xuICAgICAgICAvLyBzdHJpcCBzaW5nbGUgcXVvdGVzXG4gICAgICAgIGN1c3RvbVVybHMucHVzaChzZXR0aW5nc1tpXS5mb250U3R5bGUuZm9udC51cmwucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZ29vZ2xlRmFtaWxpZXMubGVuZ3RoID09PSAwICYmIGN1c3RvbUZhbWlsaWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAvLyBMb2FkIHRoZSBmb250c1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjdXN0b21GYW1pbGllcy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBsb2FkQ3VzdG9tRm9udChjdXN0b21GYW1pbGllc1tqXSwgY3VzdG9tVXJsc1tqXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChnb29nbGVGYW1pbGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxvYWRHb29nbGVGb250cyhnb29nbGVGYW1pbGllcywgb25Hb29nbGVGb250c0xvYWRlZCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ3VzdG9tRm9udChmYW1pbHksIHVybCwgY29udGVudERvYykge1xuICAgIHZhciBzaGVldCA9IG51bGw7XG4gICAgdmFyIHJ1bGUgPSBcImZvbnQtZmFtaWx5OiBcIiArIGZhbWlseSArIFwiOyBcIiArIFwic3JjOiB1cmwoJ1wiICsgdXJsICsgXCInKTtcIjtcblxuICAgIGNvbnRlbnREb2MgPSBjb250ZW50RG9jIHx8IGRvY3VtZW50O1xuXG4gICAgc2hlZXQgPSBjb250ZW50RG9jLnN0eWxlU2hlZXRzWzBdO1xuXG4gICAgaWYgKHNoZWV0ICE9PSBudWxsKSB7XG4gICAgICBzaGVldC5hZGRSdWxlKFwiQGZvbnQtZmFjZVwiLCBydWxlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkR29vZ2xlRm9udHMoZmFtaWxpZXMsIGNiKSB7XG4gICAgV2ViRm9udC5sb2FkKHtcbiAgICAgIGdvb2dsZToge1xuICAgICAgICBmYW1pbGllczogZmFtaWxpZXNcbiAgICAgIH0sXG4gICAgICBhY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgaW5hY3RpdmU6IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY2IgJiYgdHlwZW9mIGNiID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBjYigpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdGltZW91dDogMjAwMFxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlbG9hZEltYWdlcyh1cmxzKSB7XG4gICAgdmFyIGxlbmd0aCA9IHVybHMubGVuZ3RoLFxuICAgICAgaW1hZ2VzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpbWFnZXNbaV0gPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlc1tpXS5zcmMgPSB1cmxzW2ldO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFF1ZXJ5UGFyYW1ldGVyKHBhcmFtKSB7XG4gICAgdmFyIHF1ZXJ5ID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSksXG4gICAgICB2YXJzID0gcXVlcnkuc3BsaXQoXCImXCIpLFxuICAgICAgcGFpcjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFpciA9IHZhcnNbaV0uc3BsaXQoXCI9XCIpO1xuXG4gICAgICBpZiAocGFpclswXSA9PSBwYXJhbSkgeyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJpc2VDYWNoZUVycm9yTWVzc2FnZShzdGF0dXNDb2RlKSB7XG4gICAgdmFyIGVycm9yTWVzc2FnZSA9IFwiXCI7XG4gICAgc3dpdGNoIChzdGF0dXNDb2RlKSB7XG4gICAgICBjYXNlIDQwNDpcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUaGUgZmlsZSBkb2VzIG5vdCBleGlzdCBvciBjYW5ub3QgYmUgYWNjZXNzZWQuXCI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA1MDc6XG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiVGhlcmUgaXMgbm90IGVub3VnaCBkaXNrIHNwYWNlIHRvIHNhdmUgdGhlIGZpbGUgb24gUmlzZSBDYWNoZS5cIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRoZXJlIHdhcyBhIHByb2JsZW0gcmV0cmlldmluZyB0aGUgZmlsZSBmcm9tIFJpc2UgQ2FjaGUuXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVycm9yTWVzc2FnZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuZXNjYXBlSFRNTChodG1sKSB7XG4gICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG5cbiAgICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcblxuICAgIHJldHVybiBkaXYudGV4dENvbnRlbnQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYXNJbnRlcm5ldENvbm5lY3Rpb24oZmlsZVBhdGgsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgaWYgKCFmaWxlUGF0aCB8fCAhY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB4aHIub3BlbihcIkhFQURcIiwgZmlsZVBhdGggKyBcIj9jYj1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBmYWxzZSk7XG5cbiAgICB0cnkge1xuICAgICAgeGhyLnNlbmQoKTtcblxuICAgICAgY2FsbGJhY2soKHhoci5zdGF0dXMgPj0gMjAwICYmIHhoci5zdGF0dXMgPCAzMDQpKTtcblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNhbGxiYWNrKGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldFF1ZXJ5UGFyYW1ldGVyOiBnZXRRdWVyeVBhcmFtZXRlcixcbiAgICBnZXRGb250Q3NzU3R5bGU6ICBnZXRGb250Q3NzU3R5bGUsXG4gICAgYWRkQ1NTUnVsZXM6ICAgICAgYWRkQ1NTUnVsZXMsXG4gICAgbG9hZEZvbnRzOiAgICAgICAgbG9hZEZvbnRzLFxuICAgIGxvYWRDdXN0b21Gb250OiAgIGxvYWRDdXN0b21Gb250LFxuICAgIGxvYWRHb29nbGVGb250czogICBsb2FkR29vZ2xlRm9udHMsXG4gICAgcHJlbG9hZEltYWdlczogICAgcHJlbG9hZEltYWdlcyxcbiAgICBnZXRSaXNlQ2FjaGVFcnJvck1lc3NhZ2U6IGdldFJpc2VDYWNoZUVycm9yTWVzc2FnZSxcbiAgICB1bmVzY2FwZUhUTUw6IHVuZXNjYXBlSFRNTCxcbiAgICBoYXNJbnRlcm5ldENvbm5lY3Rpb246IGhhc0ludGVybmV0Q29ubmVjdGlvblxuICB9O1xufSkoKTtcblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uUmlzZUNhY2hlID0gKGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIEJBU0VfQ0FDSEVfVVJMID0gXCIvL2xvY2FsaG9zdDo5NDk0L1wiO1xuXG4gIHZhciBfcGluZ1JlY2VpdmVkID0gZmFsc2UsXG4gICAgX2lzQ2FjaGVSdW5uaW5nID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gcGluZyhjYWxsYmFjaykge1xuICAgIHZhciByID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICBpZiAoIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgci5vcGVuKFwiR0VUXCIsIEJBU0VfQ0FDSEVfVVJMICsgXCJwaW5nP2NhbGxiYWNrPV9cIiwgdHJ1ZSk7XG4gICAgci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoci5yZWFkeVN0YXRlID09PSA0ICkge1xuICAgICAgICAgIC8vIHNhdmUgdGhpcyByZXN1bHQgZm9yIHVzZSBpbiBnZXRGaWxlKClcbiAgICAgICAgICBfcGluZ1JlY2VpdmVkID0gdHJ1ZTtcblxuICAgICAgICAgIGlmKHIuc3RhdHVzID09PSAyMDApe1xuICAgICAgICAgICAgX2lzQ2FjaGVSdW5uaW5nID0gdHJ1ZTtcblxuICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSwgci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKFwiUmlzZSBDYWNoZSBpcyBub3QgcnVubmluZ1wiKTtcbiAgICAgICAgICAgIF9pc0NhY2hlUnVubmluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgICBjYWxsYmFjayhmYWxzZSwgbnVsbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICBjb25zb2xlLmRlYnVnKFwiQ2F1Z2h0IGV4Y2VwdGlvbjogXCIsIGUuZGVzY3JpcHRpb24pO1xuICAgICAgfVxuXG4gICAgfTtcbiAgICByLnNlbmQoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEZpbGUoZmlsZVVybCwgY2FsbGJhY2ssIG5vY2FjaGVidXN0ZXIpIHtcbiAgICBpZiAoIWZpbGVVcmwgfHwgIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsZVJlcXVlc3QoKSB7XG4gICAgICB2YXIgdXJsLCBzdHIsIHNlcGFyYXRvcjtcblxuICAgICAgaWYgKF9pc0NhY2hlUnVubmluZykge1xuICAgICAgICAvLyBjb25maWd1cmUgdXJsIHdpdGggY2FjaGVidXN0ZXIgb3Igbm90XG4gICAgICAgIHVybCA9IChub2NhY2hlYnVzdGVyKSA/IEJBU0VfQ0FDSEVfVVJMICsgXCI/dXJsPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KGZpbGVVcmwpIDpcbiAgICAgICAgQkFTRV9DQUNIRV9VUkwgKyBcImNiPVwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCkgKyBcIj91cmw9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlsZVVybCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobm9jYWNoZWJ1c3Rlcikge1xuICAgICAgICAgIHVybCA9IGZpbGVVcmw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RyID0gZmlsZVVybC5zcGxpdChcIj9cIik7XG4gICAgICAgICAgc2VwYXJhdG9yID0gKHN0ci5sZW5ndGggPT09IDEpID8gXCI/XCIgOiBcIiZcIjtcbiAgICAgICAgICB1cmwgPSBmaWxlVXJsICsgc2VwYXJhdG9yICsgXCJjYj1cIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1ha2VSZXF1ZXN0KFwiSEVBRFwiLCB1cmwpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1ha2VSZXF1ZXN0KG1ldGhvZCwgdXJsKSB7XG4gICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCksXG4gICAgICAgIHJlcXVlc3QgPSB7XG4gICAgICAgICAgeGhyOiB4aHIsXG4gICAgICAgICAgdXJsOiB1cmxcbiAgICAgICAgfTtcblxuICAgICAgaWYgKF9pc0NhY2hlUnVubmluZykge1xuICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG5cbiAgICAgICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkZW5kXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgc3RhdHVzID0geGhyLnN0YXR1cyB8fCAwO1xuXG4gICAgICAgICAgaWYgKHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwKSB7XG4gICAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gU2VydmVyIG1heSBub3Qgc3VwcG9ydCBIRUFEIHJlcXVlc3QuIEZhbGxiYWNrIHRvIGEgR0VUIHJlcXVlc3QuXG4gICAgICAgICAgICBpZiAobWV0aG9kID09PSBcIkhFQURcIikge1xuICAgICAgICAgICAgICBtYWtlUmVxdWVzdChcIkdFVFwiLCB1cmwpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2FsbGJhY2socmVxdWVzdCwgbmV3IEVycm9yKFwiVGhlIHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGU6IFwiICsgc3RhdHVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB4aHIuc2VuZCgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIC8vIFJpc2UgQ2FjaGUgaXMgbm90IHJ1bm5pbmcgKHByZXZpZXcpLCBza2lwIEhFQUQgcmVxdWVzdCBhbmQgZXhlY3V0ZSBjYWxsYmFjayBpbW1lZGlhdGVseVxuICAgICAgICBjYWxsYmFjayhyZXF1ZXN0KTtcbiAgICAgIH1cblxuICAgIH1cblxuICAgIGlmICghX3BpbmdSZWNlaXZlZCkge1xuICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgcmV0dXJuIHRoaXMucGluZyhmaWxlUmVxdWVzdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmaWxlUmVxdWVzdCgpO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gaXNSaXNlQ2FjaGVSdW5uaW5nKGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjayB8fCB0eXBlb2YgY2FsbGJhY2sgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghX3BpbmdSZWNlaXZlZCkge1xuICAgICAgLyoganNoaW50IHZhbGlkdGhpczogdHJ1ZSAqL1xuICAgICAgcmV0dXJuIHRoaXMucGluZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNhbGxiYWNrKF9pc0NhY2hlUnVubmluZyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soX2lzQ2FjaGVSdW5uaW5nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldEZpbGU6IGdldEZpbGUsXG4gICAgaXNSaXNlQ2FjaGVSdW5uaW5nOiBpc1Jpc2VDYWNoZVJ1bm5pbmcsXG4gICAgcGluZzogcGluZ1xuICB9O1xuXG59KSgpO1xuXG4vKiBleHBvcnRlZCB2ZXJzaW9uICovXG52YXIgdmVyc2lvbiA9IFwiMS4xLjBcIjtcbi8qIGV4cG9ydGVkIGNvbmZpZyAqL1xuaWYgKHR5cGVvZiBhbmd1bGFyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi5jb21tb24uaTE4bi5jb25maWdcIiwgW10pXG4gICAgLmNvbnN0YW50KFwiTE9DQUxFU19QUkVGSVhcIiwgXCJsb2NhbGVzL3RyYW5zbGF0aW9uX1wiKVxuICAgIC5jb25zdGFudChcIkxPQ0FMRVNfU1VGSVhcIiwgXCIuanNvblwiKTtcbn1cblxudmFyICBjb25maWcgPSB7XG4gIFNUT1JBR0VfRU5WOiBcInByb2RcIlxufTtcblxuLyogZ2xvYmFsIGdhZGdldHMsIF8gKi9cblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5WaWRlbyA9IHt9O1xuXG5SaXNlVmlzaW9uLlZpZGVvID0gKGZ1bmN0aW9uICh3aW5kb3csIGdhZGdldHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9hZGRpdGlvbmFsUGFyYW1zLCBfbW9kZTtcblxuICB2YXIgX2lzTG9hZGluZyA9IHRydWUsXG4gICAgX2NvbmZpZ0RldGFpbHMgPSBudWxsO1xuXG4gIHZhciBfcHJlZnMgPSBudWxsLFxuICAgIF9zdG9yYWdlID0gbnVsbCxcbiAgICBfbm9uU3RvcmFnZSA9IG51bGwsXG4gICAgX21lc3NhZ2UgPSBudWxsLFxuICAgIF9mcmFtZUNvbnRyb2xsZXIgPSBudWxsLFxuICAgIF93aW5kb3dDb250cm9sbGVyID0gbnVsbDtcblxuICB2YXIgX3ZpZXdlclBhdXNlZCA9IHRydWU7XG5cbiAgdmFyIF9yZXN1bWUgPSB0cnVlO1xuXG4gIHZhciBfY3VycmVudEZyYW1lID0gMDtcblxuICB2YXIgX2N1cnJlbnRGaWxlcyA9IFtdO1xuXG4gIHZhciBfY3VycmVudFBsYXlsaXN0SW5kZXggPSBudWxsO1xuXG4gIHZhciBfZXJyb3JMb2cgPSBudWxsLFxuICAgIF9lcnJvclRpbWVyID0gbnVsbCxcbiAgICBfZXJyb3JGbGFnID0gZmFsc2U7XG5cbiAgdmFyIF9zdG9yYWdlRXJyb3JGbGFnID0gZmFsc2UsXG4gICAgX3BsYXllckVycm9yRmxhZyA9IGZhbHNlO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIF9kb25lKCkge1xuICAgIGdhZGdldHMucnBjLmNhbGwoXCJcIiwgXCJyc2V2ZW50X2RvbmVcIiwgbnVsbCwgX3ByZWZzLmdldFN0cmluZyhcImlkXCIpKTtcblxuICAgIC8vIEFueSBlcnJvcnMgbmVlZCB0byBiZSBsb2dnZWQgYmVmb3JlIHRoZSBkb25lIGV2ZW50LlxuICAgIGlmIChfZXJyb3JMb2cgIT09IG51bGwpIHtcbiAgICAgIGxvZ0V2ZW50KF9lcnJvckxvZywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgbG9nRXZlbnQoeyBcImV2ZW50XCI6IFwiZG9uZVwiIH0sIGZhbHNlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9yZWFkeSgpIHtcbiAgICBnYWRnZXRzLnJwYy5jYWxsKFwiXCIsIFwicnNldmVudF9yZWFkeVwiLCBudWxsLCBfcHJlZnMuZ2V0U3RyaW5nKFwiaWRcIiksXG4gICAgICB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9jbGVhckVycm9yVGltZXIoKSB7XG4gICAgY2xlYXJUaW1lb3V0KF9lcnJvclRpbWVyKTtcbiAgICBfZXJyb3JUaW1lciA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBfc3RhcnRFcnJvclRpbWVyKCkge1xuICAgIF9jbGVhckVycm9yVGltZXIoKTtcblxuICAgIF9lcnJvclRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBub3RpZnkgVmlld2VyIHdpZGdldCBpcyBkb25lXG4gICAgICBfZG9uZSgpO1xuICAgIH0sIDUwMDApO1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldEN1cnJlbnRGaWxlKCkge1xuICAgIGlmIChfY3VycmVudEZpbGVzICYmIF9jdXJyZW50RmlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKF9tb2RlID09PSBcImZpbGVcIikge1xuICAgICAgICByZXR1cm4gX2N1cnJlbnRGaWxlc1swXTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKF9tb2RlID09PSBcImZvbGRlclwiKSB7XG4gICAgICAgIC8vIHJldHJpZXZlIHRoZSBjdXJyZW50bHkgcGxheWVkIGZpbGVcbiAgICAgICAgaWYgKF9jdXJyZW50UGxheWxpc3RJbmRleCkge1xuICAgICAgICAgIHJldHVybiBfY3VycmVudEZpbGVzW19jdXJyZW50UGxheWxpc3RJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaGFzU3RvcmFnZUVycm9yKCkge1xuICAgIHJldHVybiBfc3RvcmFnZUVycm9yRmxhZztcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc1BsYXllckVycm9yKCkge1xuICAgIHJldHVybiBfcGxheWVyRXJyb3JGbGFnO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvd0Vycm9yKG1lc3NhZ2UsIGlzU3RvcmFnZUVycm9yKSB7XG4gICAgX2Vycm9yRmxhZyA9IHRydWU7XG4gICAgX3N0b3JhZ2VFcnJvckZsYWcgPSB0eXBlb2YgaXNTdG9yYWdlRXJyb3IgIT09IFwidW5kZWZpbmVkXCI7XG5cbiAgICBfbWVzc2FnZS5zaG93KG1lc3NhZ2UpO1xuXG4gICAgX2N1cnJlbnRQbGF5bGlzdEluZGV4ID0gbnVsbDtcbiAgICBfZnJhbWVDb250cm9sbGVyLnJlbW92ZShfY3VycmVudEZyYW1lLCBfd2luZG93Q29udHJvbGxlci5nZXRGcmFtZU9yaWdpbigpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBpZiBXaWRnZXQgaXMgcGxheWluZyByaWdodCBub3csIHJ1biB0aGUgdGltZXJcbiAgICAgIGlmICghX3ZpZXdlclBhdXNlZCkge1xuICAgICAgICBfc3RhcnRFcnJvclRpbWVyKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2dFdmVudChwYXJhbXMsIGlzRXJyb3IpIHtcbiAgICBpZiAoaXNFcnJvcikge1xuICAgICAgX2Vycm9yTG9nID0gcGFyYW1zO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLmZpbGVfdXJsKSB7XG4gICAgICBwYXJhbXMuZmlsZV91cmwgPSBfZ2V0Q3VycmVudEZpbGUoKTtcbiAgICB9XG5cbiAgICBSaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXJVdGlscy5sb2dFdmVudChnZXRUYWJsZU5hbWUoKSwgcGFyYW1zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRmlsZUluaXQodXJscykge1xuICAgIGlmIChfbW9kZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgIC8vIHVybHMgdmFsdWUgd2lsbCBiZSBhIHN0cmluZ1xuICAgICAgX2N1cnJlbnRGaWxlc1swXSA9IHVybHM7XG4gICAgfSBlbHNlIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIikge1xuICAgICAgLy8gdXJscyB2YWx1ZSB3aWxsIGJlIGFuIGFycmF5XG4gICAgICBfY3VycmVudEZpbGVzID0gdXJscztcbiAgICB9XG5cbiAgICBfbWVzc2FnZS5oaWRlKCk7XG5cbiAgICBpZiAoIV92aWV3ZXJQYXVzZWQpIHtcbiAgICAgIHBsYXkoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBvbkZpbGVSZWZyZXNoKHVybHMpIHtcbiAgICBpZiAoX21vZGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYSBzdHJpbmcgb2Ygb25lIHVybFxuICAgICAgX2N1cnJlbnRGaWxlc1swXSA9IHVybHM7XG4gICAgfSBlbHNlIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIikge1xuICAgICAgLy8gdXJscyB2YWx1ZSB3aWxsIGJlIGFuIGFycmF5IG9mIHVybHNcbiAgICAgIF9jdXJyZW50RmlsZXMgPSB1cmxzO1xuICAgIH1cblxuICAgIC8vIGluIGNhc2UgcmVmcmVzaGVkIGZpbGUgZml4ZXMgYW4gZXJyb3Igd2l0aCBwcmV2aW91cyBmaWxlLCBlbnN1cmUgZmxhZyBpcyByZW1vdmVkIHNvIHBsYXliYWNrIGlzIGF0dGVtcHRlZCBhZ2FpblxuICAgIF9lcnJvckZsYWcgPSBmYWxzZTtcbiAgICBfcGxheWVyRXJyb3JGbGFnID0gZmFsc2U7XG4gICAgX3N0b3JhZ2VFcnJvckZsYWcgPSBmYWxzZTtcbiAgICBfZXJyb3JMb2cgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgdmFyIGZyYW1lT2JqID0gX2ZyYW1lQ29udHJvbGxlci5nZXRGcmFtZU9iamVjdChfY3VycmVudEZyYW1lKTtcblxuICAgIF92aWV3ZXJQYXVzZWQgPSB0cnVlO1xuXG4gICAgLy8gaW4gY2FzZSBlcnJvciB0aW1lciBzdGlsbCBydW5uaW5nIChubyBjb25kaXRpb25hbCBjaGVjayBvbiBlcnJvckZsYWcsIGl0IG1heSBoYXZlIGJlZW4gcmVzZXQgaW4gb25GaWxlUmVmcmVzaClcbiAgICBfY2xlYXJFcnJvclRpbWVyKCk7XG5cbiAgICBpZiAoZnJhbWVPYmopIHtcbiAgICAgIC8vIERlc3Ryb3kgcGxheWVyIGlmcmFtZS5cbiAgICAgIGlmICghX3Jlc3VtZSkge1xuICAgICAgICBfY3VycmVudFBsYXlsaXN0SW5kZXggPSBudWxsO1xuICAgICAgICBfZnJhbWVDb250cm9sbGVyLnJlbW92ZShfY3VycmVudEZyYW1lLCBfd2luZG93Q29udHJvbGxlci5nZXRGcmFtZU9yaWdpbigpKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBmcmFtZU9iai5wb3N0TWVzc2FnZSh7ZXZlbnQ6IFwicGF1c2VcIn0sIF93aW5kb3dDb250cm9sbGVyLmdldEZyYW1lT3JpZ2luKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgdmFyIGxvZ1BhcmFtcyA9IHt9LFxuICAgICAgZnJhbWVPYmogPSBfZnJhbWVDb250cm9sbGVyLmdldEZyYW1lT2JqZWN0KF9jdXJyZW50RnJhbWUpLFxuICAgICAgaHRtbDtcblxuICAgIGlmIChfaXNMb2FkaW5nKSB7XG4gICAgICBfaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgIC8vIExvZyBjb25maWd1cmF0aW9uIGV2ZW50LlxuICAgICAgbG9nUGFyYW1zLmV2ZW50ID0gXCJjb25maWd1cmF0aW9uXCI7XG4gICAgICBsb2dQYXJhbXMuZXZlbnRfZGV0YWlscyA9IF9jb25maWdEZXRhaWxzO1xuICAgICAgbG9nRXZlbnQobG9nUGFyYW1zLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgX3ZpZXdlclBhdXNlZCA9IGZhbHNlO1xuXG4gICAgbG9nRXZlbnQoeyBcImV2ZW50XCI6IFwicGxheVwiIH0sIGZhbHNlKTtcblxuICAgIGlmIChfZXJyb3JGbGFnKSB7XG4gICAgICBfc3RhcnRFcnJvclRpbWVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZyYW1lT2JqKSB7XG4gICAgICBmcmFtZU9iai5wb3N0TWVzc2FnZSh7ZXZlbnQ6IFwicGxheVwifSwgX3dpbmRvd0NvbnRyb2xsZXIuZ2V0RnJhbWVPcmlnaW4oKSk7XG4gICAgfSBlbHNlIHtcblxuICAgICAgaWYgKF9jdXJyZW50RmlsZXMgJiYgX2N1cnJlbnRGaWxlcy5sZW5ndGggPiAwKSB7XG5cbiAgICAgICAgUmlzZVZpc2lvbi5Db21tb24uUmlzZUNhY2hlLmlzUmlzZUNhY2hlUnVubmluZyhmdW5jdGlvbiAoaXNSdW5uaW5nKSB7XG4gICAgICAgICAgaWYgKF9tb2RlID09PSBcImZpbGVcIikge1xuICAgICAgICAgICAgaHRtbCA9IChpc1J1bm5pbmcpID8gXCIvL2xvY2FsaG9zdDo5NDk0Lz91cmw9XCIgK1xuICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KF93aW5kb3dDb250cm9sbGVyLmdldEJ1Y2tldFBhdGgoKSkgKyBcInBsYXllci1maWxlLWNhY2hlLmh0bWxcIiA6IFwicGxheWVyLWZpbGUuaHRtbFwiO1xuXG4gICAgICAgICAgICAvLyBhZGQgZnJhbWUgYW5kIGNyZWF0ZSB0aGUgcGxheWVyXG4gICAgICAgICAgICBfZnJhbWVDb250cm9sbGVyLmFkZCgwKTtcbiAgICAgICAgICAgIF9mcmFtZUNvbnRyb2xsZXIuY3JlYXRlRnJhbWVQbGF5ZXIoMCwgX2FkZGl0aW9uYWxQYXJhbXMsIF9jdXJyZW50RmlsZXNbMF0sIGh0bWwsIF93aW5kb3dDb250cm9sbGVyLmdldEZyYW1lT3JpZ2luKCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIikge1xuICAgICAgICAgICAgaHRtbCA9IChpc1J1bm5pbmcpID8gXCIvL2xvY2FsaG9zdDo5NDk0Lz91cmw9XCIgK1xuICAgICAgICAgICAgZW5jb2RlVVJJQ29tcG9uZW50KF93aW5kb3dDb250cm9sbGVyLmdldEJ1Y2tldFBhdGgoKSkgKyBcInBsYXllci1mb2xkZXItY2FjaGUuaHRtbFwiIDogXCJwbGF5ZXItZm9sZGVyLmh0bWxcIjtcblxuICAgICAgICAgICAgX2ZyYW1lQ29udHJvbGxlci5hZGQoMCk7XG4gICAgICAgICAgICBfZnJhbWVDb250cm9sbGVyLmNyZWF0ZUZyYW1lUGxheWVyKDAsIF9hZGRpdGlvbmFsUGFyYW1zLCBfY3VycmVudEZpbGVzLCBodG1sLCBfd2luZG93Q29udHJvbGxlci5nZXRGcmFtZU9yaWdpbigpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFibGVOYW1lKCkge1xuICAgIHJldHVybiBcInZpZGVvX3YyX2V2ZW50c1wiO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheWVyRW5kZWQoKSB7XG4gICAgX2N1cnJlbnRQbGF5bGlzdEluZGV4ID0gbnVsbDtcbiAgICBfZnJhbWVDb250cm9sbGVyLnJlbW92ZShfY3VycmVudEZyYW1lLCBfd2luZG93Q29udHJvbGxlci5nZXRGcmFtZU9yaWdpbigpLCBmdW5jdGlvbiAoKSB7XG4gICAgICBfZG9uZSgpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGxheWVyUmVhZHkoKSB7XG4gICAgdmFyIGZyYW1lT2JqO1xuXG4gICAgLy8gRW5zdXJlcyBtZXNzYWdpbmcgaXMgaGlkZGVuIGZvciBub24tc3RvcmFnZSB2aWRlbyBmaWxlXG4gICAgX21lc3NhZ2UuaGlkZSgpO1xuXG4gICAgaWYgKCFfdmlld2VyUGF1c2VkKSB7XG4gICAgICBmcmFtZU9iaiA9IF9mcmFtZUNvbnRyb2xsZXIuZ2V0RnJhbWVPYmplY3QoX2N1cnJlbnRGcmFtZSk7XG5cbiAgICAgIGlmIChmcmFtZU9iaikge1xuICAgICAgICBmcmFtZU9iai5wb3N0TWVzc2FnZSh7ZXZlbnQ6IFwicGxheVwifSwgX3dpbmRvd0NvbnRyb2xsZXIuZ2V0RnJhbWVPcmlnaW4oKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGxheWVySXRlbUNoYW5nZShpbmRleCkge1xuICAgIF9jdXJyZW50UGxheWxpc3RJbmRleCA9IGluZGV4O1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0QWRkaXRpb25hbFBhcmFtcyhwYXJhbXMsIG1vZGUpIHtcbiAgICB2YXIgaXNTdG9yYWdlRmlsZTtcblxuICAgIF9hZGRpdGlvbmFsUGFyYW1zID0gXy5jbG9uZShwYXJhbXMpO1xuICAgIF9tb2RlID0gbW9kZTtcbiAgICBfcHJlZnMgPSBuZXcgZ2FkZ2V0cy5QcmVmcygpO1xuXG4gICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWRlb0NvbnRhaW5lclwiKS5zdHlsZS5oZWlnaHQgPSBfcHJlZnMuZ2V0SW50KFwicnNIXCIpICsgXCJweFwiO1xuXG4gICAgX2FkZGl0aW9uYWxQYXJhbXMud2lkdGggPSBfcHJlZnMuZ2V0SW50KFwicnNXXCIpO1xuICAgIF9hZGRpdGlvbmFsUGFyYW1zLmhlaWdodCA9IF9wcmVmcy5nZXRJbnQoXCJyc0hcIik7XG5cbiAgICBpZiAoX2FkZGl0aW9uYWxQYXJhbXMudmlkZW8uaGFzT3duUHJvcGVydHkoXCJyZXN1bWVcIikpIHtcbiAgICAgIF9yZXN1bWUgPSBfYWRkaXRpb25hbFBhcmFtcy52aWRlby5yZXN1bWU7XG4gICAgfVxuXG4gICAgX21lc3NhZ2UgPSBuZXcgUmlzZVZpc2lvbi5Db21tb24uTWVzc2FnZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZGVvQ29udGFpbmVyXCIpLFxuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtZXNzYWdlQ29udGFpbmVyXCIpKTtcblxuICAgIC8vIHNob3cgd2FpdCBtZXNzYWdlIHdoaWxlIFN0b3JhZ2UgaW5pdGlhbGl6ZXNcbiAgICBfbWVzc2FnZS5zaG93KFwiUGxlYXNlIHdhaXQgd2hpbGUgeW91ciB2aWRlbyBpcyBkb3dubG9hZGVkLlwiKTtcblxuICAgIF93aW5kb3dDb250cm9sbGVyID0gbmV3IFJpc2VWaXNpb24uVmlkZW8uV2luZG93Q29udHJvbGxlcigpO1xuICAgIF93aW5kb3dDb250cm9sbGVyLmluaXQoKTtcblxuICAgIF9mcmFtZUNvbnRyb2xsZXIgPSBuZXcgUmlzZVZpc2lvbi5WaWRlby5GcmFtZUNvbnRyb2xsZXIoKTtcblxuICAgIGlmIChfbW9kZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgIGlzU3RvcmFnZUZpbGUgPSAoT2JqZWN0LmtleXMoX2FkZGl0aW9uYWxQYXJhbXMuc3RvcmFnZSkubGVuZ3RoICE9PSAwKTtcblxuICAgICAgaWYgKCFpc1N0b3JhZ2VGaWxlKSB7XG4gICAgICAgIF9jb25maWdEZXRhaWxzID0gXCJjdXN0b21cIjtcblxuICAgICAgICBfbm9uU3RvcmFnZSA9IG5ldyBSaXNlVmlzaW9uLlZpZGVvLk5vblN0b3JhZ2UoX2FkZGl0aW9uYWxQYXJhbXMpO1xuICAgICAgICBfbm9uU3RvcmFnZS5pbml0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfY29uZmlnRGV0YWlscyA9IFwic3RvcmFnZSBmaWxlXCI7XG5cbiAgICAgICAgLy8gY3JlYXRlIGFuZCBpbml0aWFsaXplIHRoZSBTdG9yYWdlIGZpbGUgaW5zdGFuY2VcbiAgICAgICAgX3N0b3JhZ2UgPSBuZXcgUmlzZVZpc2lvbi5WaWRlby5TdG9yYWdlRmlsZShfYWRkaXRpb25hbFBhcmFtcyk7XG4gICAgICAgIF9zdG9yYWdlLmluaXQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSBpZiAoX21vZGUgPT09IFwiZm9sZGVyXCIpIHtcbiAgICAgIF9jb25maWdEZXRhaWxzID0gXCJzdG9yYWdlIGZvbGRlclwiO1xuXG4gICAgICAvLyBjcmVhdGUgYW5kIGluaXRpYWxpemUgdGhlIFN0b3JhZ2UgZm9sZGVyIGluc3RhbmNlXG4gICAgICBfc3RvcmFnZSA9IG5ldyBSaXNlVmlzaW9uLlZpZGVvLlN0b3JhZ2VGb2xkZXIoX2FkZGl0aW9uYWxQYXJhbXMpO1xuICAgICAgX3N0b3JhZ2UuaW5pdCgpO1xuICAgIH1cblxuICAgIF9yZWFkeSgpO1xuICB9XG5cbiAgLy8gQW4gZXJyb3Igb2NjdXJyZWQgd2l0aCBKVyBQbGF5ZXIuXG4gIGZ1bmN0aW9uIHBsYXllckVycm9yKGVycm9yKSB7XG4gICAgdmFyIGRldGFpbHMgPSBudWxsLFxuICAgICAgcGFyYW1zID0ge30sXG4gICAgICBtZXNzYWdlID0gXCJTb3JyeSwgdGhlcmUgd2FzIGEgcHJvYmxlbSBwbGF5aW5nIHRoZSB2aWRlby5cIixcbiAgICAgIE1FRElBX0VSUk9SID0gXCJFcnJvciBsb2FkaW5nIG1lZGlhOiBGaWxlIGNvdWxkIG5vdCBiZSBwbGF5ZWRcIixcbiAgICAgIFlPVVRVQkVfRVJST1IgPSBcIkVycm9yIGxvYWRpbmcgWW91VHViZTogVmlkZW8gY291bGQgbm90IGJlIHBsYXllZFwiLFxuICAgICAgUExBWUVSX0VSUk9SID0gXCJFcnJvciBsb2FkaW5nIHBsYXllcjogTm8gcGxheWFibGUgc291cmNlcyBmb3VuZFwiLFxuICAgICAgRU5DT0RJTkdfTUVTU0FHRSA9IFwiVGhlcmUgd2FzIGEgcHJvYmxlbSBwbGF5aW5nIHRoYXQgdmlkZW8uIEl0IGNvdWxkIGJlIHRoYXQgd2UgZG9uJ3QgXCIgK1xuICAgICAgICBcInN1cHBvcnQgdGhhdCBmb3JtYXQgb3IgaXQgaXMgbm90IGVuY29kZWQgY29ycmVjdGx5LlwiLFxuICAgICAgRk9STUFUX01FU1NBR0UgPSBcIlRoZSBmb3JtYXQgb2YgdGhhdCB2aWRlbyBpcyBub3Qgc3VwcG9ydGVkXCI7XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIGlmIChlcnJvci50eXBlICYmIGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgZGV0YWlscyA9IGVycm9yLnR5cGUgKyBcIiAtIFwiICsgZXJyb3IubWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGVycm9yLnR5cGUpIHtcbiAgICAgICAgZGV0YWlscyA9IGVycm9yLnR5cGU7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgIGRldGFpbHMgPSBlcnJvci5tZXNzYWdlO1xuICAgICAgfVxuXG4gICAgICAvLyBEaXNwbGF5IGFwcHJvcHJpYXRlIG9uLXNjcmVlbiBlcnJvciBtZXNzYWdlLlxuICAgICAgaWYgKGVycm9yLm1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKChlcnJvci5tZXNzYWdlID09PSBNRURJQV9FUlJPUikgfHwgKGVycm9yLm1lc3NhZ2UgPT09IFlPVVRVQkVfRVJST1IpKSB7XG4gICAgICAgICAgbWVzc2FnZSA9IEVOQ09ESU5HX01FU1NBR0U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZXJyb3IubWVzc2FnZSA9PT0gUExBWUVSX0VSUk9SKSB7XG4gICAgICAgICAgbWVzc2FnZSA9IEZPUk1BVF9NRVNTQUdFO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFyYW1zLmV2ZW50ID0gXCJwbGF5ZXIgZXJyb3JcIjtcbiAgICBwYXJhbXMuZXZlbnRfZGV0YWlscyA9IGRldGFpbHM7XG4gICAgX3BsYXllckVycm9yRmxhZyA9IHRydWU7XG5cbiAgICBsb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgIHNob3dFcnJvcihtZXNzYWdlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgcGF1c2UoKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJnZXRUYWJsZU5hbWVcIjogZ2V0VGFibGVOYW1lLFxuICAgIFwiaGFzUGxheWVyRXJyb3JcIjogaGFzUGxheWVyRXJyb3IsXG4gICAgXCJoYXNTdG9yYWdlRXJyb3JcIjogaGFzU3RvcmFnZUVycm9yLFxuICAgIFwibG9nRXZlbnRcIjogbG9nRXZlbnQsXG4gICAgXCJvbkZpbGVJbml0XCI6IG9uRmlsZUluaXQsXG4gICAgXCJvbkZpbGVSZWZyZXNoXCI6IG9uRmlsZVJlZnJlc2gsXG4gICAgXCJwYXVzZVwiOiBwYXVzZSxcbiAgICBcInBsYXlcIjogcGxheSxcbiAgICBcInNldEFkZGl0aW9uYWxQYXJhbXNcIjogc2V0QWRkaXRpb25hbFBhcmFtcyxcbiAgICBcInNob3dFcnJvclwiOiBzaG93RXJyb3IsXG4gICAgXCJwbGF5ZXJFbmRlZFwiOiBwbGF5ZXJFbmRlZCxcbiAgICBcInBsYXllclJlYWR5XCI6IHBsYXllclJlYWR5LFxuICAgIFwicGxheWVyRXJyb3JcIjogcGxheWVyRXJyb3IsXG4gICAgXCJwbGF5ZXJJdGVtQ2hhbmdlXCI6IHBsYXllckl0ZW1DaGFuZ2UsXG4gICAgXCJzdG9wXCI6IHN0b3BcbiAgfTtcblxufSkod2luZG93LCBnYWRnZXRzKTtcblxuLyogZ2xvYmFsIGNvbmZpZyAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLlZpZGVvID0gUmlzZVZpc2lvbi5WaWRlbyB8fCB7fTtcblxuUmlzZVZpc2lvbi5WaWRlby5TdG9yYWdlRmlsZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfaW5pdGlhbExvYWQgPSB0cnVlO1xuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICB2YXIgc3RvcmFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlkZW9TdG9yYWdlXCIpO1xuXG4gICAgaWYgKCFzdG9yYWdlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLXJlc3BvbnNlXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGlmIChlLmRldGFpbCAmJiBlLmRldGFpbC51cmwpIHtcblxuICAgICAgICBpZiAoX2luaXRpYWxMb2FkKSB7XG4gICAgICAgICAgX2luaXRpYWxMb2FkID0gZmFsc2U7XG5cbiAgICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLm9uRmlsZUluaXQoZS5kZXRhaWwudXJsKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAvLyBjaGVjayBmb3IgXCJjaGFuZ2VkXCIgcHJvcGVydHlcbiAgICAgICAgICBpZiAoZS5kZXRhaWwuaGFzT3duUHJvcGVydHkoXCJjaGFuZ2VkXCIpKSB7XG4gICAgICAgICAgICBpZiAoZS5kZXRhaWwuY2hhbmdlZCkge1xuICAgICAgICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLm9uRmlsZVJlZnJlc2goZS5kZXRhaWwudXJsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAvLyBpbiB0aGUgZXZlbnQgb2YgYSBuZXR3b3JrIGZhaWx1cmUgYW5kIHJlY292ZXJ5LCBjaGVjayBpZiB0aGUgV2lkZ2V0IGlzIGluIGEgc3RhdGUgb2Ygc3RvcmFnZSBlcnJvclxuICAgICAgICAgICAgICBpZiAoUmlzZVZpc2lvbi5WaWRlby5oYXNTdG9yYWdlRXJyb3IoKSB8fCBSaXNlVmlzaW9uLlZpZGVvLmhhc1BsYXllckVycm9yKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBwcm9jZWVkIHdpdGggcmVmcmVzaCBsb2dpYyBzbyB0aGUgV2lkZ2V0IGNhbiBldmVudHVhbGx5IHBsYXkgdmlkZW8gYWdhaW4gZnJvbSBhIG5ldHdvcmsgcmVjb3ZlcnlcbiAgICAgICAgICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLm9uRmlsZVJlZnJlc2goZS5kZXRhaWwudXJsKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWFwaS1lcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwic3RvcmFnZSBhcGkgZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IFwiUmVzcG9uc2UgY29kZTogXCIgKyBlLmRldGFpbC5jb2RlICsgXCIsIG1lc3NhZ2U6IFwiICsgZS5kZXRhaWwubWVzc2FnZVxuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5WaWRlby5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5WaWRlby5zaG93RXJyb3IoXCJTb3JyeSwgdGhlcmUgd2FzIGEgcHJvYmxlbSBjb21tdW5pY2F0aW5nIHdpdGggUmlzZSBTdG9yYWdlLlwiKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1uby1maWxlXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7IFwiZXZlbnRcIjogXCJzdG9yYWdlIGZpbGUgbm90IGZvdW5kXCIsIFwiZXZlbnRfZGV0YWlsc1wiOiBlLmRldGFpbCB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCB2aWRlbyBkb2VzIG5vdCBleGlzdCBvciBoYXMgYmVlbiBtb3ZlZCB0byBUcmFzaC5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtZmlsZS10aHJvdHRsZWRcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHsgXCJldmVudFwiOiBcInN0b3JhZ2UgZmlsZSB0aHJvdHRsZWRcIiwgXCJmaWxlX3VybFwiOiBlLmRldGFpbCB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCB2aWRlbyBpcyB0ZW1wb3JhcmlseSB1bmF2YWlsYWJsZS5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2Utc3Vic2NyaXB0aW9uLWV4cGlyZWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFyYW1zID0geyBcImV2ZW50XCI6IFwic3RvcmFnZSBzdWJzY3JpcHRpb24gZXhwaXJlZFwiIH07XG5cbiAgICAgIFJpc2VWaXNpb24uVmlkZW8ubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uVmlkZW8uc2hvd0Vycm9yKFwiUmlzZSBTdG9yYWdlIHN1YnNjcmlwdGlvbiBpcyBub3QgYWN0aXZlLlwiKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1lcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwicmlzZSBzdG9yYWdlIGVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcIlRoZSByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIGUuZGV0YWlsLmVycm9yLmN1cnJlbnRUYXJnZXQuc3RhdHVzXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlNvcnJ5LCB0aGVyZSB3YXMgYSBwcm9ibGVtIGNvbW11bmljYXRpbmcgd2l0aCBSaXNlIFN0b3JhZ2UuXCIsIHRydWUpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1jYWNoZS1lcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwicmlzZSBjYWNoZSBlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogZS5kZXRhaWwuZXJyb3IubWVzc2FnZVxuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5WaWRlby5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuXG4gICAgICB2YXIgc3RhdHVzQ29kZSA9IDA7XG4gICAgICAvLyBTaG93IGEgZGlmZmVyZW50IG1lc3NhZ2UgaWYgdGhlcmUgaXMgYSA0MDQgY29taW5nIGZyb20gcmlzZSBjYWNoZVxuICAgICAgaWYoZS5kZXRhaWwuZXJyb3IubWVzc2FnZSl7XG4gICAgICAgIHN0YXR1c0NvZGUgPSArZS5kZXRhaWwuZXJyb3IubWVzc2FnZS5zdWJzdHJpbmcoZS5kZXRhaWwuZXJyb3IubWVzc2FnZS5pbmRleE9mKFwiOlwiKSsyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IFJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcy5nZXRSaXNlQ2FjaGVFcnJvck1lc3NhZ2Uoc3RhdHVzQ29kZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1jYWNoZS1ub3QtcnVubmluZ1wiLCBmdW5jdGlvbihlKSB7XG5cbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFwiZXZlbnRcIjogXCJyaXNlIGNhY2hlIG5vdCBydW5uaW5nXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiAoZS5kZXRhaWwgJiYgZS5kZXRhaWwuZXJyb3IpPyBlLmRldGFpbC5lcnJvci5tZXNzYWdlOiBcIlwiXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgfSk7XG5cblxuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiZm9sZGVyXCIsIGRhdGEuc3RvcmFnZS5mb2xkZXIpO1xuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiZmlsZU5hbWVcIiwgZGF0YS5zdG9yYWdlLmZpbGVOYW1lKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImNvbXBhbnlJZFwiLCBkYXRhLnN0b3JhZ2UuY29tcGFueUlkKTtcbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImVudlwiLCBjb25maWcuU1RPUkFHRV9FTlYpO1xuICAgIHN0b3JhZ2UuZ28oKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJpbml0XCI6IGluaXRcbiAgfTtcbn07XG5cbi8qIGdsb2JhbCBjb25maWcsIF8gKi9cblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5WaWRlbyA9IFJpc2VWaXNpb24uVmlkZW8gfHwge307XG5cblJpc2VWaXNpb24uVmlkZW8uU3RvcmFnZUZvbGRlciA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBfaW5pdGlhbExvYWQgPSB0cnVlO1xuXG4gIHZhciBfZmlsZXMgPSBbXTtcblxuICBmdW5jdGlvbiBfZ2V0VXJscygpIHtcbiAgICByZXR1cm4gXy5wbHVjayhfZmlsZXMsIFwidXJsXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gX2dldEV4aXN0aW5nRmlsZShmaWxlKSB7XG4gICAgcmV0dXJuIF8uZmluZChfZmlsZXMsIGZ1bmN0aW9uIChmKSB7XG4gICAgICByZXR1cm4gZmlsZS5uYW1lID09PSBmLm5hbWU7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBfZGVsZXRlRmlsZShmaWxlKSB7XG4gICAgdmFyIGV4aXN0aW5nID0gX2dldEV4aXN0aW5nRmlsZShmaWxlKTtcblxuICAgIGlmIChleGlzdGluZykge1xuICAgICAgX2ZpbGVzLnNwbGljZShfZmlsZXMuaW5kZXhPZihleGlzdGluZyksIDEpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9jaGFuZ2VGaWxlKGZpbGUpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBfZ2V0RXhpc3RpbmdGaWxlKGZpbGUpO1xuXG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICBleGlzdGluZy51cmwgPSBmaWxlLnVybDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfYWRkRmlsZShmaWxlKSB7XG4gICAgdmFyIGV4aXN0aW5nID0gX2dldEV4aXN0aW5nRmlsZShmaWxlKTtcblxuICAgIGlmICghZXhpc3RpbmcpIHtcbiAgICAgIC8vIGV4dHJhY3QgdGhlIGFjdHVhbCBmaWxlIG5hbWUgYW5kIHN0b3JlIGluIG5ldyBwcm9wZXJ0eSBvbiBmaWxlIG9iamVjdFxuICAgICAgZmlsZS5maWxlTmFtZSA9IGZpbGUubmFtZS5zbGljZShmaWxlLm5hbWUubGFzdEluZGV4T2YoXCIvXCIpICsgMSwgZmlsZS5uYW1lLmxhc3RJbmRleE9mKFwiLlwiKSkudG9Mb3dlckNhc2UoKTtcblxuICAgICAgLy8gaW5zZXJ0IGZpbGUgdG8gX2ZpbGVzIGxpc3QgYXQgc3BlY2lmaWMgaW5kZXggYmFzZWQgb24gYWxwaGFiZXRpY2FsIG9yZGVyIG9mIGZpbGUgbmFtZVxuICAgICAgX2ZpbGVzLnNwbGljZShfLnNvcnRlZEluZGV4KF9maWxlcywgZmlsZSwgXCJmaWxlTmFtZVwiKSwgMCwgZmlsZSk7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzdG9yYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWRlb1N0b3JhZ2VcIik7XG5cbiAgICBpZiAoIXN0b3JhZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtcmVzcG9uc2VcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIGZpbGUgPSBlLmRldGFpbDtcblxuICAgICAgLy8gQWRkZWRcbiAgICAgIGlmKGZpbGUuYWRkZWQpIHtcbiAgICAgICAgX2FkZEZpbGUoZmlsZSk7XG5cbiAgICAgICAgaWYgKF9pbml0aWFsTG9hZCkge1xuICAgICAgICAgIF9pbml0aWFsTG9hZCA9IGZhbHNlO1xuICAgICAgICAgIFJpc2VWaXNpb24uVmlkZW8ub25GaWxlSW5pdChfZ2V0VXJscygpKTtcblxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBDaGFuZ2VkIG9yIHVuY2hhbmdlZFxuICAgICAgaWYgKGZpbGUuaGFzT3duUHJvcGVydHkoXCJjaGFuZ2VkXCIpKSB7XG4gICAgICAgIGlmKGZpbGUuY2hhbmdlZCkge1xuICAgICAgICAgIF9jaGFuZ2VGaWxlKGZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vIGluIHRoZSBldmVudCBvZiBhIG5ldHdvcmsgZmFpbHVyZSBhbmQgcmVjb3ZlcnksIGNoZWNrIGlmIHRoZSBXaWRnZXQgaXMgaW4gYSBzdGF0ZSBvZiBzdG9yYWdlIGVycm9yXG4gICAgICAgICAgaWYgKCFSaXNlVmlzaW9uLlZpZGVvLmhhc1N0b3JhZ2VFcnJvcigpICYmICFSaXNlVmlzaW9uLlZpZGVvLmhhc1BsYXllckVycm9yKCkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgcHJvY2VlZCB3aXRoIHJlZnJlc2ggbG9naWMgYmVsb3cgaWYgdGhlcmUncyBiZWVuIGEgc3RvcmFnZSBlcnJvciwgb3RoZXJ3aXNlIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgc28gdGhlIFdpZGdldCBjYW4gZXZlbnR1YWxseSBwbGF5IHZpZGVvIGFnYWluIGZyb20gYSBuZXR3b3JrIHJlY292ZXJ5XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERlbGV0ZWRcbiAgICAgIGlmKGZpbGUuZGVsZXRlZCkge1xuICAgICAgICBfZGVsZXRlRmlsZShmaWxlKTtcbiAgICAgIH1cblxuICAgICAgUmlzZVZpc2lvbi5WaWRlby5vbkZpbGVSZWZyZXNoKF9nZXRVcmxzKCkpO1xuXG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtYXBpLWVycm9yXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFwiZXZlbnRcIjogXCJzdG9yYWdlIGFwaSBlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJSZXNwb25zZSBjb2RlOiBcIiArIGUuZGV0YWlsLmNvZGUgKyBcIiwgbWVzc2FnZTogXCIgKyBlLmRldGFpbC5tZXNzYWdlXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlNvcnJ5LCB0aGVyZSB3YXMgYSBwcm9ibGVtIGNvbW11bmljYXRpbmcgd2l0aCBSaXNlIFN0b3JhZ2UuXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWVtcHR5LWZvbGRlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0geyBcImV2ZW50XCI6IFwic3RvcmFnZSBmb2xkZXIgZW1wdHlcIiB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCBmb2xkZXIgZG9lcyBub3QgY29udGFpbiBhbnkgdmlkZW9zLlwiKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1uby1mb2xkZXJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7IFwiZXZlbnRcIjogXCJzdG9yYWdlIGZvbGRlciBkb2Vzbid0IGV4aXN0XCIsIFwiZXZlbnRfZGV0YWlsc1wiOiBlLmRldGFpbCB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCBmb2xkZXIgZG9lcyBub3QgZXhpc3Qgb3IgaGFzIGJlZW4gbW92ZWQgdG8gVHJhc2guXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWZvbGRlci1pbnZhbGlkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7IFwiZXZlbnRcIjogXCJzdG9yYWdlIGZvbGRlciBmb3JtYXQocykgaW52YWxpZFwiIH07XG5cbiAgICAgIFJpc2VWaXNpb24uVmlkZW8ubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uVmlkZW8uc2hvd0Vycm9yKFwiVGhlIHNlbGVjdGVkIGZvbGRlciBkb2VzIG5vdCBjb250YWluIGFueSBzdXBwb3J0ZWQgdmlkZW8gZm9ybWF0cy5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2Utc3Vic2NyaXB0aW9uLWV4cGlyZWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFyYW1zID0geyBcImV2ZW50XCI6IFwic3RvcmFnZSBzdWJzY3JpcHRpb24gZXhwaXJlZFwiIH07XG5cbiAgICAgIFJpc2VWaXNpb24uVmlkZW8ubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uVmlkZW8uc2hvd0Vycm9yKFwiUmlzZSBTdG9yYWdlIHN1YnNjcmlwdGlvbiBpcyBub3QgYWN0aXZlLlwiKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1lcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwicmlzZSBzdG9yYWdlIGVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcIlRoZSByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIGUuZGV0YWlsLmVycm9yLmN1cnJlbnRUYXJnZXQuc3RhdHVzXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlNvcnJ5LCB0aGVyZSB3YXMgYSBwcm9ibGVtIGNvbW11bmljYXRpbmcgd2l0aCBSaXNlIFN0b3JhZ2UuXCIsIHRydWUpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1jYWNoZS1lcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwicmlzZSBjYWNoZSBlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogZS5kZXRhaWwuZXJyb3IubWVzc2FnZVxuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5WaWRlby5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuXG4gICAgICB2YXIgc3RhdHVzQ29kZSA9IDA7XG4gICAgICAvLyBTaG93IGEgZGlmZmVyZW50IG1lc3NhZ2UgaWYgdGhlcmUgaXMgYSA0MDQgY29taW5nIGZyb20gcmlzZSBjYWNoZVxuICAgICAgaWYoZS5kZXRhaWwuZXJyb3IubWVzc2FnZSl7XG4gICAgICAgIHN0YXR1c0NvZGUgPSArZS5kZXRhaWwuZXJyb3IubWVzc2FnZS5zdWJzdHJpbmcoZS5kZXRhaWwuZXJyb3IubWVzc2FnZS5pbmRleE9mKFwiOlwiKSsyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IFJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcy5nZXRSaXNlQ2FjaGVFcnJvck1lc3NhZ2Uoc3RhdHVzQ29kZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1jYWNoZS1ub3QtcnVubmluZ1wiLCBmdW5jdGlvbihlKSB7XG5cbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFwiZXZlbnRcIjogXCJyaXNlIGNhY2hlIG5vdCBydW5uaW5nXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiAoZS5kZXRhaWwgJiYgZS5kZXRhaWwuZXJyb3IpPyBlLmRldGFpbC5lcnJvci5tZXNzYWdlOiBcIlwiXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLnNldEF0dHJpYnV0ZShcImZpbGVUeXBlXCIsIFwidmlkZW9cIik7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJjb21wYW55SWRcIiwgZGF0YS5zdG9yYWdlLmNvbXBhbnlJZCk7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJmb2xkZXJcIiwgZGF0YS5zdG9yYWdlLmZvbGRlcik7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJlbnZcIiwgY29uZmlnLlNUT1JBR0VfRU5WKTtcblxuICAgIHN0b3JhZ2UuZ28oKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgXCJpbml0XCI6IGluaXRcbiAgfTtcbn07XG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uVmlkZW8gPSBSaXNlVmlzaW9uLlZpZGVvIHx8IHt9O1xuXG5SaXNlVmlzaW9uLlZpZGVvLk5vblN0b3JhZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgcmlzZUNhY2hlID0gUmlzZVZpc2lvbi5Db21tb24uUmlzZUNhY2hlO1xuXG4gIHZhciBfcmVmcmVzaER1cmF0aW9uID0gOTAwMDAwLCAgLy8gMTUgbWludXRlc1xuICAgIF9yZWZyZXNoSW50ZXJ2YWxJZCA9IG51bGw7XG5cbiAgdmFyIF9pc0xvYWRpbmcgPSB0cnVlO1xuXG4gIHZhciBfdXJsID0gXCJcIjtcblxuICBmdW5jdGlvbiBfZ2V0RmlsZShvbWl0Q2FjaGVCdXN0ZXIpIHtcbiAgICByaXNlQ2FjaGUuZ2V0RmlsZShfdXJsLCBmdW5jdGlvbiAocmVzcG9uc2UsIGVycm9yKSB7XG4gICAgICBpZiAoIWVycm9yKSB7XG5cbiAgICAgICAgaWYgKF9pc0xvYWRpbmcpIHtcbiAgICAgICAgICBfaXNMb2FkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLm9uRmlsZUluaXQocmVzcG9uc2UudXJsKTtcblxuICAgICAgICAgIC8vIHN0YXJ0IHRoZSByZWZyZXNoIGludGVydmFsXG4gICAgICAgICAgX3N0YXJ0UmVmcmVzaEludGVydmFsKCk7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLm9uRmlsZVJlZnJlc2gocmVzcG9uc2UudXJsKTtcbiAgICAgICAgfVxuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlcnJvciBvY2N1cnJlZFxuICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHtcbiAgICAgICAgICBcImV2ZW50XCI6IFwibm9uLXN0b3JhZ2UgZXJyb3JcIixcbiAgICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgICBcImZpbGVfdXJsXCI6IHJlc3BvbnNlLnVybFxuICAgICAgICB9LCB0cnVlKTtcblxuICAgICAgICB2YXIgc3RhdHVzQ29kZSA9IDA7XG4gICAgICAgIC8vIFNob3cgYSBkaWZmZXJlbnQgbWVzc2FnZSBpZiB0aGVyZSBpcyBhIDQwNCBjb21pbmcgZnJvbSByaXNlIGNhY2hlXG4gICAgICAgIGlmKGVycm9yLm1lc3NhZ2Upe1xuICAgICAgICAgIHN0YXR1c0NvZGUgPSArZXJyb3IubWVzc2FnZS5zdWJzdHJpbmcoZXJyb3IubWVzc2FnZS5pbmRleE9mKFwiOlwiKSsyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBSaXNlVmlzaW9uLkNvbW1vbi5VdGlsaXRpZXMuZ2V0UmlzZUNhY2hlRXJyb3JNZXNzYWdlKHN0YXR1c0NvZGUpO1xuICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH0sIG9taXRDYWNoZUJ1c3Rlcik7XG4gIH1cblxuICBmdW5jdGlvbiBfc3RhcnRSZWZyZXNoSW50ZXJ2YWwoKSB7XG4gICAgaWYgKF9yZWZyZXNoSW50ZXJ2YWxJZCA9PT0gbnVsbCkge1xuICAgICAgX3JlZnJlc2hJbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBfZ2V0RmlsZShmYWxzZSk7XG4gICAgICB9LCBfcmVmcmVzaER1cmF0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgLy8gSGFuZGxlIHByZS1tZXJnZSB1c2Ugb2YgXCJ1cmxcIiBzZXR0aW5nIHByb3BlcnR5XG4gICAgX3VybCA9IChkYXRhLnVybCAmJiBkYXRhLnVybCAhPT0gXCJcIikgPyBkYXRhLnVybCA6IGRhdGEuc2VsZWN0b3IudXJsO1xuXG4gICAgX2dldEZpbGUodHJ1ZSk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiaW5pdFwiOiBpbml0XG4gIH07XG59O1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLlZpZGVvID0gUmlzZVZpc2lvbi5WaWRlbyB8fCB7fTtcblxuUmlzZVZpc2lvbi5WaWRlby5XaW5kb3dDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2J1Y2tldFBhdGggPSBcIlwiLFxuICAgIF9mcmFtZU9yaWdpbiA9IFwiXCI7XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gX3NldEJ1Y2tldFBhdGgoKSB7XG4gICAgdmFyIHBhdGhBcnJheSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCggXCIvXCIpLFxuICAgICAgaG9zdCA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0LFxuICAgICAgcHJvdG9jb2wgPSB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2w7XG5cbiAgICBfYnVja2V0UGF0aCA9IHByb3RvY29sICsgXCIvL1wiICsgaG9zdCArIFwiL1wiO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoQXJyYXkubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChwYXRoQXJyYXlbaV0gIT09IFwiXCIpIHtcbiAgICAgICAgX2J1Y2tldFBhdGggKz0gcGF0aEFycmF5W2ldICsgXCIvXCI7XG5cbiAgICAgICAgaWYgKHBhdGhBcnJheVtpXSA9PT0gXCJkaXN0XCIpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9zZXRGcmFtZU9yaWdpbigpIHtcbiAgICAvLyB3aWRnZXQtcHJldmlldyBhcHAgKGxvY2FsKVxuICAgIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdCA9PT0gXCJsb2NhbGhvc3Q6ODAwMFwiKSB7XG4gICAgICBfZnJhbWVPcmlnaW4gPSBcImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMFwiO1xuICAgIH1cbiAgICBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdCA9PT0gXCJzMy5hbWF6b25hd3MuY29tXCIpIHtcbiAgICAgIFJpc2VWaXNpb24uQ29tbW9uLlJpc2VDYWNoZS5pc1Jpc2VDYWNoZVJ1bm5pbmcoZnVuY3Rpb24gKGlzUnVubmluZykge1xuXG4gICAgICAgIGlmIChpc1J1bm5pbmcpIHtcbiAgICAgICAgICAvLyBydW5uaW5nIGluIHBsYXllciwgb3JpZ2luIHNob3VsZCBiZSBSaXNlIENhY2hlXG4gICAgICAgICAgX2ZyYW1lT3JpZ2luID0gXCJodHRwOi8vbG9jYWxob3N0Ojk0OTRcIjtcblxuICAgICAgICAgIC8vIHNldCB0aGUgYnVja2V0IHBhdGggYXMgVmlkZW8gbW9kdWxlIHdpbGwgbmVlZCBpdCB3aGVuIFJpc2UgQ2FjaGUgaXMgcnVubmluZ1xuICAgICAgICAgIF9zZXRCdWNrZXRQYXRoKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8gcnVubmluZyBpbiBwcmV2aWV3IChicm93c2VyKVxuICAgICAgICAgIF9mcmFtZU9yaWdpbiA9IFwiaHR0cDovL3MzLmFtYXpvbmF3cy5jb21cIjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX3NldE1lc3NhZ2VSZWNlaXZlcigpIHtcblxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciBvcmlnaW4gPSBldmVudC5vcmlnaW4gfHwgZXZlbnQub3JpZ2luYWxFdmVudC5vcmlnaW47XG5cbiAgICAgIC8vIGVuc3VyZSB0aGlzIG1lc3NhZ2UgaXMgY29taW5nIGZyb20gZWl0aGVyIFJpc2UgQ2FjaGUsIEFtYXpvbiBTMyAocHJldmlldyksIG9yIHByZXZpZXcgYXBwIChsb2NhbClcbiAgICAgIGlmIChvcmlnaW4gIT09IFwiaHR0cDovL2xvY2FsaG9zdDo5NDk0XCIgJiYgb3JpZ2luICE9PSBcImh0dHA6Ly9zMy5hbWF6b25hd3MuY29tXCIgJiYgb3JpZ2luICE9PSBcImh0dHA6Ly9sb2NhbGhvc3Q6ODAwMFwiKSB7XG4gICAgICAgIG9yaWdpbiA9IG51bGw7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV2ZW50LmRhdGEgJiYgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwib2JqZWN0XCIgJiYgZXZlbnQuZGF0YS5ldmVudCkge1xuICAgICAgICBzd2l0Y2ggKGV2ZW50LmRhdGEuZXZlbnQpIHtcbiAgICAgICAgICBjYXNlIFwicGxheWVyRW5kZWRcIjpcbiAgICAgICAgICAgIFJpc2VWaXNpb24uVmlkZW8ucGxheWVyRW5kZWQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJwbGF5ZXJFcnJvclwiOlxuICAgICAgICAgICAgUmlzZVZpc2lvbi5WaWRlby5wbGF5ZXJFcnJvcihldmVudC5kYXRhLmVycm9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgXCJwbGF5ZXJJdGVtQ2hhbmdlXCI6XG4gICAgICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLnBsYXllckl0ZW1DaGFuZ2UoZXZlbnQuZGF0YS5pbmRleCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwicGxheWVyUmVhZHlcIjpcbiAgICAgICAgICAgIFJpc2VWaXNpb24uVmlkZW8ucGxheWVyUmVhZHkoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gZ2V0QnVja2V0UGF0aCgpIHtcbiAgICByZXR1cm4gX2J1Y2tldFBhdGg7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGcmFtZU9yaWdpbigpIHtcbiAgICByZXR1cm4gX2ZyYW1lT3JpZ2luO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBfc2V0RnJhbWVPcmlnaW4oKTtcbiAgICBfc2V0TWVzc2FnZVJlY2VpdmVyKCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGdldEJ1Y2tldFBhdGg6IGdldEJ1Y2tldFBhdGgsXG4gICAgZ2V0RnJhbWVPcmlnaW46IGdldEZyYW1lT3JpZ2luLFxuICAgIGluaXQ6IGluaXRcbiAgfTtcblxufTtcblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5WaWRlbyA9IFJpc2VWaXNpb24uVmlkZW8gfHwge307XG5cblJpc2VWaXNpb24uVmlkZW8uRnJhbWVDb250cm9sbGVyID0gZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgUFJFRklYID0gXCJpZl9cIjtcblxuICBmdW5jdGlvbiBnZXRGcmFtZUNvbnRhaW5lcihpbmRleCkge1xuICAgIHJldHVybiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChQUkVGSVggKyBpbmRleCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGcmFtZU9iamVjdChpbmRleCkge1xuICAgIHZhciBmcmFtZUNvbnRhaW5lciA9IGdldEZyYW1lQ29udGFpbmVyKGluZGV4KSxcbiAgICAgIGlmcmFtZTtcblxuICAgIGlmcmFtZSA9IGZyYW1lQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCJpZnJhbWVcIik7XG5cbiAgICBpZiAoaWZyYW1lKSB7XG4gICAgICByZXR1cm4gKGlmcmFtZS5jb250ZW50V2luZG93KSA/IGlmcmFtZS5jb250ZW50V2luZG93IDpcbiAgICAgICAgKGlmcmFtZS5jb250ZW50RG9jdW1lbnQuZG9jdW1lbnQpID8gaWZyYW1lLmNvbnRlbnREb2N1bWVudC5kb2N1bWVudCA6IGlmcmFtZS5jb250ZW50RG9jdW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xlYXIoaW5kZXgsIG9yaWdpbikge1xuICAgIHZhciBmcmFtZUNvbnRhaW5lciA9IGdldEZyYW1lQ29udGFpbmVyKGluZGV4KSxcbiAgICAgIGZyYW1lT2JqID0gZ2V0RnJhbWVPYmplY3QoaW5kZXgpLFxuICAgICAgaWZyYW1lO1xuXG4gICAgaWYgKGZyYW1lT2JqKSB7XG4gICAgICBpZnJhbWUgPSBmcmFtZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiaWZyYW1lXCIpO1xuICAgICAgZnJhbWVPYmoucG9zdE1lc3NhZ2Uoe2V2ZW50OiBcInJlbW92ZVwifSwgb3JpZ2luKTtcbiAgICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwgXCJhYm91dDpibGFua1wiKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGQoaW5kZXgpIHtcbiAgICB2YXIgZnJhbWVDb250YWluZXIgPSBnZXRGcmFtZUNvbnRhaW5lcihpbmRleCksXG4gICAgICBpZnJhbWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaWZyYW1lXCIpO1xuXG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZShcImFsbG93VHJhbnNwYXJlbmN5XCIsIHRydWUpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJmcmFtZWJvcmRlclwiLCBcIjBcIik7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZShcInNjcm9sbGluZ1wiLCBcIm5vXCIpO1xuXG4gICAgZnJhbWVDb250YWluZXIuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZyYW1lUGxheWVyKGluZGV4LCBwYXJhbXMsIGZpbGVzLCBzcmMsIG9yaWdpbikge1xuICAgIHZhciBmcmFtZUNvbnRhaW5lciA9IGdldEZyYW1lQ29udGFpbmVyKGluZGV4KSxcbiAgICAgIGZyYW1lT2JqID0gZ2V0RnJhbWVPYmplY3QoaW5kZXgpLFxuICAgICAgaWZyYW1lO1xuXG4gICAgaWYgKGZyYW1lT2JqKSB7XG4gICAgICBpZnJhbWUgPSBmcmFtZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiaWZyYW1lXCIpO1xuXG4gICAgICBpZnJhbWUub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZnJhbWUub25sb2FkID0gbnVsbDtcblxuICAgICAgICAvLyBpbml0aWFsaXplIGFuZCBsb2FkIHRoZSBwbGF5ZXIgaW5zaWRlIHRoZSBpZnJhbWVcbiAgICAgICAgZnJhbWVPYmoucG9zdE1lc3NhZ2Uoe2V2ZW50OiBcImluaXRcIiwgcGFyYW1zOiBwYXJhbXMsIGZpbGVzOiBmaWxlc30sIG9yaWdpbik7XG4gICAgICB9O1xuXG4gICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKFwic3JjXCIsIHNyYyk7XG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiBoaWRlKGluZGV4KSB7XG4gICAgdmFyIGZyYW1lQ29udGFpbmVyID0gZ2V0RnJhbWVDb250YWluZXIoaW5kZXgpO1xuXG4gICAgZnJhbWVDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmUoaW5kZXgsIG9yaWdpbiwgY2FsbGJhY2spIHtcbiAgICB2YXIgZnJhbWVDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChQUkVGSVggKyBpbmRleCk7XG5cbiAgICBfY2xlYXIoaW5kZXgsIG9yaWdpbik7XG5cbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHJlbW92ZSB0aGUgaWZyYW1lIGJ5IGNsZWFyaW5nIGFsbCBlbGVtZW50cyBpbnNpZGUgZGl2IGNvbnRhaW5lclxuICAgICAgd2hpbGUgKGZyYW1lQ29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgZnJhbWVDb250YWluZXIucmVtb3ZlQ2hpbGQoZnJhbWVDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjYWxsYmFjayAmJiB0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgfVxuICAgIH0sIDIwMCk7XG4gIH1cblxuICBmdW5jdGlvbiBzaG93KGluZGV4KSB7XG4gICAgdmFyIGZyYW1lQ29udGFpbmVyID0gZ2V0RnJhbWVDb250YWluZXIoaW5kZXgpO1xuXG4gICAgZnJhbWVDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwidmlzaWJsZVwiO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhZGQ6IGFkZCxcbiAgICBjcmVhdGVGcmFtZVBsYXllcjogY3JlYXRlRnJhbWVQbGF5ZXIsXG4gICAgZ2V0RnJhbWVDb250YWluZXI6IGdldEZyYW1lQ29udGFpbmVyLFxuICAgIGdldEZyYW1lT2JqZWN0OiBnZXRGcmFtZU9iamVjdCxcbiAgICBoaWRlOiBoaWRlLFxuICAgIHJlbW92ZTogcmVtb3ZlLFxuICAgIHNob3c6IHNob3dcbiAgfTtcbn07XG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uQ29tbW9uID0gUmlzZVZpc2lvbi5Db21tb24gfHwge307XG5cblJpc2VWaXNpb24uQ29tbW9uLk1lc3NhZ2UgPSBmdW5jdGlvbiAobWFpbkNvbnRhaW5lciwgbWVzc2FnZUNvbnRhaW5lcikge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2FjdGl2ZSA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIF9pbml0KCkge1xuICAgIHRyeSB7XG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmhlaWdodCA9IG1haW5Db250YWluZXIuc3R5bGUuaGVpZ2h0O1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybihcIkNhbid0IGluaXRpYWxpemUgTWVzc2FnZSAtIFwiLCBlLm1lc3NhZ2UpO1xuICAgIH1cbiAgfVxuXG4gIC8qXG4gICAqICBQdWJsaWMgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gaGlkZSgpIHtcbiAgICBpZiAoX2FjdGl2ZSkge1xuICAgICAgLy8gY2xlYXIgY29udGVudCBvZiBtZXNzYWdlIGNvbnRhaW5lclxuICAgICAgd2hpbGUgKG1lc3NhZ2VDb250YWluZXIuZmlyc3RDaGlsZCkge1xuICAgICAgICBtZXNzYWdlQ29udGFpbmVyLnJlbW92ZUNoaWxkKG1lc3NhZ2VDb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGhpZGUgbWVzc2FnZSBjb250YWluZXJcbiAgICAgIG1lc3NhZ2VDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuXG4gICAgICAvLyBzaG93IG1haW4gY29udGFpbmVyXG4gICAgICBtYWluQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcblxuICAgICAgX2FjdGl2ZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3cobWVzc2FnZSkge1xuICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcbiAgICAgIHA7XG5cbiAgICBpZiAoIV9hY3RpdmUpIHtcbiAgICAgIC8vIGhpZGUgbWFpbiBjb250YWluZXJcbiAgICAgIG1haW5Db250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG5cbiAgICAgIG1lc3NhZ2VDb250YWluZXIuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcblxuICAgICAgLy8gY3JlYXRlIG1lc3NhZ2UgZWxlbWVudFxuICAgICAgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgcC5pbm5lckhUTUwgPSBtZXNzYWdlO1xuICAgICAgcC5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcIm1lc3NhZ2VcIik7XG5cbiAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHApO1xuICAgICAgbWVzc2FnZUNvbnRhaW5lci5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG5cbiAgICAgIF9hY3RpdmUgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBtZXNzYWdlIGFscmVhZHkgYmVpbmcgc2hvd24sIHVwZGF0ZSBtZXNzYWdlIHRleHRcbiAgICAgIHAgPSBtZXNzYWdlQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXCIubWVzc2FnZVwiKTtcbiAgICAgIHAuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICB9XG4gIH1cblxuICBfaW5pdCgpO1xuXG4gIHJldHVybiB7XG4gICAgXCJoaWRlXCI6IGhpZGUsXG4gICAgXCJzaG93XCI6IHNob3dcbiAgfTtcbn07XG5cbi8qIGdsb2JhbCBnYWRnZXRzLCBSaXNlVmlzaW9uICovXG5cbihmdW5jdGlvbiAod2luZG93LCBnYWRnZXRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBwcmVmcyA9IG5ldyBnYWRnZXRzLlByZWZzKCksXG4gICAgaWQgPSBwcmVmcy5nZXRTdHJpbmcoXCJpZFwiKTtcblxuICAvLyBEaXNhYmxlIGNvbnRleHQgbWVudSAocmlnaHQgY2xpY2sgbWVudSlcbiAgd2luZG93Lm9uY29udGV4dG1lbnUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZShuYW1lcywgdmFsdWVzKSB7XG4gICAgdmFyIGFkZGl0aW9uYWxQYXJhbXMgPSBudWxsLFxuICAgICAgbW9kZSA9IFwiXCIsXG4gICAgICBjb21wYW55SWQgPSBcIlwiLFxuICAgICAgZGlzcGxheUlkID0gXCJcIjtcblxuICAgIGlmIChBcnJheS5pc0FycmF5KG5hbWVzKSAmJiBuYW1lcy5sZW5ndGggPiAwICYmIEFycmF5LmlzQXJyYXkodmFsdWVzKSAmJiB2YWx1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKG5hbWVzWzBdID09PSBcImNvbXBhbnlJZFwiKSB7XG4gICAgICAgIGNvbXBhbnlJZCA9IHZhbHVlc1swXTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5hbWVzWzFdID09PSBcImRpc3BsYXlJZFwiKSB7XG4gICAgICAgIGlmICh2YWx1ZXNbMV0pIHtcbiAgICAgICAgICBkaXNwbGF5SWQgPSB2YWx1ZXNbMV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgZGlzcGxheUlkID0gXCJwcmV2aWV3XCI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMuc2V0SWRzKGNvbXBhbnlJZCwgZGlzcGxheUlkKTtcbiAgICAgIFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlclV0aWxzLnNldFZlcnNpb24odmVyc2lvbik7XG5cbiAgICAgIGlmIChuYW1lc1syXSA9PT0gXCJhZGRpdGlvbmFsUGFyYW1zXCIpIHtcbiAgICAgICAgYWRkaXRpb25hbFBhcmFtcyA9IEpTT04ucGFyc2UodmFsdWVzWzJdKTtcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoYWRkaXRpb25hbFBhcmFtcy5zdG9yYWdlKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAvLyBzdG9yYWdlIGZpbGUgb3IgZm9sZGVyIHNlbGVjdGVkXG4gICAgICAgICAgaWYgKCFhZGRpdGlvbmFsUGFyYW1zLnN0b3JhZ2UuZmlsZU5hbWUpIHtcbiAgICAgICAgICAgIC8vIGZvbGRlciB3YXMgc2VsZWN0ZWRcbiAgICAgICAgICAgIG1vZGUgPSBcImZvbGRlclwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmaWxlIHdhcyBzZWxlY3RlZFxuICAgICAgICAgICAgbW9kZSA9IFwiZmlsZVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBub24tc3RvcmFnZSBmaWxlIHdhcyBzZWxlY3RlZFxuICAgICAgICAgIG1vZGUgPSBcImZpbGVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIFJpc2VWaXNpb24uVmlkZW8uc2V0QWRkaXRpb25hbFBhcmFtcyhhZGRpdGlvbmFsUGFyYW1zLCBtb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIFJpc2VWaXNpb24uVmlkZW8ucGxheSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgUmlzZVZpc2lvbi5WaWRlby5wYXVzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBSaXNlVmlzaW9uLlZpZGVvLnN0b3AoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbHltZXJSZWFkeSgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIldlYkNvbXBvbmVudHNSZWFkeVwiLCBwb2x5bWVyUmVhZHkpO1xuXG4gICAgaWYgKGlkICYmIGlkICE9PSBcIlwiKSB7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BsYXlfXCIgKyBpZCwgcGxheSk7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BhdXNlX1wiICsgaWQsIHBhdXNlKTtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNjbWRfc3RvcF9cIiArIGlkLCBzdG9wKTtcblxuICAgICAgZ2FkZ2V0cy5ycGMucmVnaXN0ZXIoXCJyc3BhcmFtX3NldF9cIiArIGlkLCBjb25maWd1cmUpO1xuICAgICAgZ2FkZ2V0cy5ycGMuY2FsbChcIlwiLCBcInJzcGFyYW1fZ2V0XCIsIG51bGwsIGlkLCBbXCJjb21wYW55SWRcIiwgXCJkaXNwbGF5SWRcIiwgXCJhZGRpdGlvbmFsUGFyYW1zXCJdKTtcbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIldlYkNvbXBvbmVudHNSZWFkeVwiLCBwb2x5bWVyUmVhZHkpO1xuXG59KSh3aW5kb3csIGdhZGdldHMpO1xuXG5cblxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xudmFyIF9nYXEgPSBfZ2FxIHx8IFtdO1xuXG5fZ2FxLnB1c2goWydfc2V0QWNjb3VudCcsICdVQS01NzA5MjE1OS0yJ10pO1xuX2dhcS5wdXNoKFsnX3RyYWNrUGFnZXZpZXcnXSk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGdhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7IGdhLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsgZ2EuYXN5bmMgPSB0cnVlO1xuICBnYS5zcmMgPSAoJ2h0dHBzOicgPT0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgPyAnaHR0cHM6Ly9zc2wnIDogJ2h0dHA6Ly93d3cnKSArICcuZ29vZ2xlLWFuYWx5dGljcy5jb20vZ2EuanMnO1xuICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYSwgcyk7XG59KSgpO1xuLyoganNoaW50IGlnbm9yZTplbmQgKi9cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
