var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(e){"use strict";function n(e,n){Array.isArray(e)&&e.length>0&&Array.isArray(n)&&n.length>0&&("companyId"===e[0]&&(l=n[0]),"displayId"===e[1]&&(a=n[1]?n[1]:"preview"),d(l,a))}function i(i){i&&"function"==typeof i&&(d=i,l&&a?d(l,a):s&&""!==s&&(e.rpc.register("rsparam_set_"+s,n),e.rpc.call("","rsparam_get",null,s,["companyId","displayId"])))}function t(e){var n,i=/[?#&]/;return e&&"string"==typeof e?(n=e.substr(e.lastIndexOf(".")+1),i.test(n)&&(n=n.substr(0,-1!==n.indexOf("?")?n.indexOf("?"):n.length),n=n.substr(0,-1!==n.indexOf("#")?n.indexOf("#"):n.length),n=n.substr(0,-1!==n.indexOf("&")?n.indexOf("&"):n.length)),n.toLowerCase()):null}function o(e){var n=JSON.parse(JSON.stringify(c));return n.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),n.rows[0].json=JSON.parse(JSON.stringify(e)),n.rows[0].json.ts=(new Date).toISOString(),n}function r(e){var n=new Date,i=n.getUTCFullYear(),t=n.getUTCMonth()+1,o=n.getUTCDate();return 10>t&&(t="0"+t),10>o&&(o="0"+o),e+i+t+o}var s=(new e.Prefs).getString("id"),a="",l="",d=null,c={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,rows:[{insertId:""}]};return{getIds:i,getInsertData:o,getFileFormat:t,getTable:r}}(gadgets),RiseVision.Common.Logger=function(e){"use strict";function n(e){var n=new XMLHttpRequest;return new Date-d<358e4?e({}):(n.open("POST",o,!0),n.onloadend=function(){var i=JSON.parse(n.response);e({token:i.access_token,refreshedAt:new Date})},n.send(),void 0)}function i(e){return s&&l===e}function t(t,o){function u(n){var i,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",e.getTable(t)),d=n.refreshedAt||d,c=n.token||c,i=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+c),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(i))}if(t&&o&&o.event&&!i(o.event))return s=!0,l=o.event,setTimeout(function(){s=!1},a),n(u)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,c="";return{log:t}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};if(RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var n=new XMLHttpRequest;e&&"function"==typeof e&&(n.open("GET",i+"ping?callback=_",!0),n.onreadystatechange=function(){try{4===n.readyState&&(t=!0,200===n.status?(o=!0,e(!0,n.responseText)):(console.debug("Rise Cache is not running"),o=!1,e(!1,null)))}catch(i){console.debug("Caught exception: ",i.description)}},n.send())}function n(e,n,r){function s(n){var t,o,s;n?t=r?i+"?url="+encodeURIComponent(e):i+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):r?t=e:(o=e.split("?"),s=1===o.length?"?":"&",t=e+s+"cb="+(new Date).getTime()),a("HEAD",t)}function a(e,i){var t=new XMLHttpRequest,o={xhr:t,url:i};t.open(e,i,!0),t.addEventListener("loadend",function(){var r=t.status||0;r>=200&&300>r?n(o):"HEAD"===e?a("GET",i):n(o,new Error("The request failed with status code: "+r))}),t.send()}if(e&&n&&"function"==typeof n)return t?s(o):this.ping(s)}var i="http://localhost:9494/",t=!1,o=!1;return{getFile:n,ping:e}}(),"undefined"==typeof config){var config={SKIN:"skin/RVSkin.xml",STORAGE_ENV:"prod"};"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json")}var RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e){"use strict";function n(){e.rpc.call("","rsevent_done",null,E.getString("id")),null!==L&&d(L,!0),d({event:"done"},!1)}function i(){e.rpc.call("","rsevent_ready",null,E.getString("id"),!0,!0,!0,!0,!0)}function t(){clearTimeout(F),F=null}function o(){t(),F=setTimeout(function(){n()},5e3)}function r(){var e=I.getFrameObject(S);return e?e.getPlaybackData():null}function s(){var e=null;if(A&&A.length>0){if("file"===y)return A[0];if("folder"===y&&(e=r()))return A[e.index]}return null}function a(e,n){var i={},t=RiseVision.Common.LoggerUtils,o=null;e.event&&(i.event=e.event),e.event_details&&(i.event_details=e.event_details),o=e.url?e.url:s(),i.file_url=o,i.file_format=t.getFileFormat(o),t.getIds(function(e,t){i.company_id=e,i.display_id=t,n(i)})}function l(e){N=!0,b.show(e),I.remove(S,function(){T||o()})}function d(e,n){n&&(L=e),a(e,function(e){D.log("video_events",e)})}function c(e){"file"===y?A[0]=e:"folder"===y&&(A=e),b.hide(),T||g()}function u(e){"file"===y?A[0]=e:"folder"===y&&(A=e),O=!1,L=null}function f(){var e=I.getFrameObject(S);return T=!0,N?(t(),void 0):(e&&e.pause(),void 0)}function g(){var e=I.getFrameObject(S);return T=!1,d({event:"play"},!1),N?(o(),void 0):(O||(e?e.play():A&&A.length>0&&("file"===y?(I.add(0),I.createFramePlayer(0,R,A[0],config.SKIN,"player-file.html")):"folder"===y&&(I.add(0),I.createFramePlayer(0,R,A,config.SKIN,"player-folder.html")))),void 0)}function m(){I.remove(S,function(){n()})}function v(){var e;b.hide(),T||(e=I.getFrameObject(S),e&&e.play())}function p(n,t){var o;R=_.clone(n),y=t,E=new e.Prefs,document.getElementById("videoContainer").style.height=E.getInt("rsH")+"px",R.width=E.getInt("rsW"),R.height=E.getInt("rsH"),b=new RiseVision.Common.Message(document.getElementById("videoContainer"),document.getElementById("messageContainer")),b.show("Please wait while your video is downloaded."),I=new RiseVision.Common.Video.FrameController,"file"===y?(o=0!==Object.keys(R.storage).length,o?(w=new RiseVision.Video.StorageFile(R),w.init()):(C=new RiseVision.Video.NonStorage(R),C.init())):"folder"===y&&(w=new RiseVision.Video.StorageFolder(R),w.init()),i()}function V(e){var n=null,i={},t="",o="Sorry, there was a problem playing the video.",r="Error loading media: File could not be played",a="Error loading YouTube: Video could not be played",c="Error loading player: No playable sources found",u="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.";O=!0,e&&(e.type&&e.message?n=e.type+" - "+e.message:e.type?n=e.type:e.message&&(n=e.message),e.message&&(e.message===r||e.message===a?o=u:e.message===c&&(t=s(),t&&t.indexOf("www.youtube.com")>-1&&(o=u)))),i.event="player error",i.event_details=n,d(i,!0),l(o)}function h(){f()}var R,y,E=null,w=null,C=null,b=null,I=null,O=!1,T=!0,S=0,A=[],L=null,F=null,N=!1,D=RiseVision.Common.Logger;return{logEvent:d,onFileInit:c,onFileRefresh:u,pause:f,play:g,setAdditionalParams:p,showError:l,playerEnded:m,playerReady:v,playerError:V,stop:h}}(gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function n(){var n=document.getElementById("videoStorage");n&&(n.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(i?(i=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&e.detail.changed&&RiseVision.Video.onFileRefresh(e.detail.url))}),n.addEventListener("rise-storage-no-file",function(e){var n={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),n.addEventListener("rise-storage-file-throttled",function(e){var n={event:"storage file throttled",url:e.detail};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),n.addEventListener("rise-storage-error",function(){var e={event:"storage error"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Storage.")}),n.addEventListener("rise-cache-error",function(){var e={event:"cache error"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Cache.")}),n.setAttribute("folder",e.storage.folder),n.setAttribute("fileName",e.storage.fileName),n.setAttribute("companyId",e.storage.companyId),n.setAttribute("env",config.STORAGE_ENV),n.go())}var i=!0;return{init:n}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function n(){return _.pluck(l,"url")}function i(e){return _.find(l,function(n){return e.name===n.name})}function t(e){var n=i(e);n&&l.splice(l.indexOf(n),1)}function o(e){var n=i(e);n&&(n.url=e.url)}function r(e){var n=i(e);n||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function s(){var i=document.getElementById("videoStorage");i&&(i.addEventListener("rise-storage-response",function(e){var i=e.detail;return i.added&&(r(i),a)?(a=!1,RiseVision.Video.onFileInit(n()),void 0):(i.changed&&o(i),i.deleted&&t(i),RiseVision.Video.onFileRefresh(n()),void 0)}),i.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),i.addEventListener("rise-storage-no-folder",function(e){var n={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("The selected folder does not exist.")}),i.addEventListener("rise-storage-error",function(){var e={event:"storage error"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Storage.")}),i.addEventListener("rise-cache-error",function(){var e={event:"cache error"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Sorry, there was a problem playing the video from Cache.")}),i.setAttribute("fileType","video"),i.setAttribute("companyId",e.storage.companyId),i.setAttribute("folder",e.storage.folder),i.setAttribute("env",config.STORAGE_ENV),i.go())}var a=!0,l=[];return{init:s}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function n(n){o.getFile(e.url,function(e,n){n?(RiseVision.Video.logEvent({event:"non-storage error",event_details:n.message,url:e.url},!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")):a?(a=!1,RiseVision.Video.onFileInit(e.url),i()):RiseVision.Video.onFileRefresh(e.url)},n)}function i(){null===s&&(s=setInterval(function(){n(!1)},r))}function t(){n(!0)}var o=RiseVision.Common.RiseCache,r=9e5,s=null,a=!0;return{init:t}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Video=RiseVision.Common.Video||{},RiseVision.Common.Video.FrameController=function(){"use strict";function e(e){return document.getElementById(l+e)}function n(n){var i,t=e(n);return i=t.querySelector("iframe"),i?i.contentWindow?i.contentWindow:i.contentDocument.document?i.contentDocument.document:i.contentDocument:null}function i(i){var t,o=e(i),r=n(i);r&&(t=o.querySelector("iframe"),r.remove(),t.setAttribute("src","about:blank"))}function t(n){var i=e(n),t=document.createElement("iframe");t.setAttribute("allowTransparency",!0),t.setAttribute("frameborder","0"),t.setAttribute("scrolling","no"),i.appendChild(t)}function o(i,t,o,r,s){var a,l=e(i),d=n(i);d&&(a=l.querySelector("iframe"),a.onload=function(){a.onload=null,d.init(t,o,r),d.load()},a.setAttribute("src",s))}function r(n){var i=e(n);i.style.visibility="hidden"}function s(e,n){var t=document.getElementById(l+e);i(e),setTimeout(function(){for(;t.firstChild;)t.removeChild(t.firstChild);n&&"function"==typeof n&&n()},200)}function a(n){var i=e(n);i.style.visibility="visible"}var l="if_";return{add:t,createFramePlayer:o,getFrameContainer:e,getFrameObject:n,hide:r,remove:s,show:a}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,n){"use strict";function i(){try{n.style.height=e.style.height}catch(i){console.warn("Can't initialize Message - ",i.message)}}function t(){if(r){for(;n.firstChild;)n.removeChild(n.firstChild);n.style.display="none",e.style.visibility="visible",r=!1}}function o(i){var t,o=document.createDocumentFragment();r?(t=n.querySelector(".message"),t.innerHTML=i):(e.style.visibility="hidden",n.style.display="block",t=document.createElement("p"),t.innerHTML=i,t.setAttribute("class","message"),o.appendChild(t),n.appendChild(o),r=!0)}var r=!1;return i(),{hide:t,show:o}},function(e,n){"use strict";function i(e,n){var i,t;Array.isArray(e)&&e.length>0&&"additionalParams"===e[0]&&Array.isArray(n)&&n.length>0&&(i=JSON.parse(n[0]),t=0!==Object.keys(i.storage).length?i.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(i,t))}function t(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function r(){RiseVision.Video.stop()}function s(){e.removeEventListener("WebComponentsReady",s),l&&""!==l&&(n.rpc.register("rscmd_play_"+l,t),n.rpc.register("rscmd_pause_"+l,o),n.rpc.register("rscmd_stop_"+l,r),n.rpc.register("rsparam_set_"+l,i),n.rpc.call("","rsparam_get",null,l,["additionalParams"]))}var a=new n.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",s)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)}();
//# sourceMappingURL=data:application/json;base64,
