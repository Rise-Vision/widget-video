(function(){function e(e){function n(n,t,i,r,o,s){for(;o>=0&&s>o;o+=e){var a=r?r[o]:o;i=t(i,n[a],a,n)}return i}return function(t,i,r,o){i=V(i,o,4);var s=!T(t)&&y.keys(t),a=(s||t).length,u=e>0?0:a-1;return arguments.length<3&&(r=t[s?s[u]:u],u+=e),n(t,i,r,s,u,a)}}function n(e){return function(n,t,i){t=R(t,i);for(var r=C(n),o=e>0?0:r-1;o>=0&&r>o;o+=e)if(t(n[o],o,n))return o;return-1}}function t(e,n,t){return function(i,r,o){var s=0,a=C(i);if("number"==typeof o)e>0?s=o>=0?o:Math.max(o+a,s):a=o>=0?Math.min(o+1,a):o+a+1;else if(t&&o&&a)return o=t(i,r),i[o]===r?o:-1;if(r!==r)return o=n(c.call(i,s,a),y.isNaN),o>=0?o+s:-1;for(o=e>0?s:a-1;o>=0&&a>o;o+=e)if(i[o]===r)return o;return-1}}function i(e,n){var t=A.length,i=e.constructor,r=y.isFunction(i)&&i.prototype||a,o="constructor";for(y.has(e,o)&&!y.contains(n,o)&&n.push(o);t--;)o=A[t],o in e&&e[o]!==r[o]&&!y.contains(n,o)&&n.push(o)}var r=this,o=r._,s=Array.prototype,a=Object.prototype,u=Function.prototype,l=s.push,c=s.slice,f=a.toString,d=a.hasOwnProperty,p=Array.isArray,g=Object.keys,v=u.bind,h=Object.create,m=function(){},y=function(e){return e instanceof y?e:this instanceof y?(this._wrapped=e,void 0):new y(e)};"undefined"!=typeof exports?("undefined"!=typeof module&&module.exports&&(exports=module.exports=y),exports._=y):r._=y,y.VERSION="1.8.3";var V=function(e,n,t){if(void 0===n)return e;switch(null==t?3:t){case 1:return function(t){return e.call(n,t)};case 2:return function(t,i){return e.call(n,t,i)};case 3:return function(t,i,r){return e.call(n,t,i,r)};case 4:return function(t,i,r,o){return e.call(n,t,i,r,o)}}return function(){return e.apply(n,arguments)}},R=function(e,n,t){return null==e?y.identity:y.isFunction(e)?V(e,n,t):y.isObject(e)?y.matcher(e):y.property(e)};y.iteratee=function(e,n){return R(e,n,1/0)};var E=function(e,n){return function(t){var i=arguments.length;if(2>i||null==t)return t;for(var r=1;i>r;r++)for(var o=arguments[r],s=e(o),a=s.length,u=0;a>u;u++){var l=s[u];n&&void 0!==t[l]||(t[l]=o[l])}return t}},b=function(e){if(!y.isObject(e))return{};if(h)return h(e);m.prototype=e;var n=new m;return m.prototype=null,n},w=function(e){return function(n){return null==n?void 0:n[e]}},_=Math.pow(2,53)-1,C=w("length"),T=function(e){var n=C(e);return"number"==typeof n&&n>=0&&_>=n};y.each=y.forEach=function(e,n,t){n=V(n,t);var i,r;if(T(e))for(i=0,r=e.length;r>i;i++)n(e[i],i,e);else{var o=y.keys(e);for(i=0,r=o.length;r>i;i++)n(e[o[i]],o[i],e)}return e},y.map=y.collect=function(e,n,t){n=R(n,t);for(var i=!T(e)&&y.keys(e),r=(i||e).length,o=Array(r),s=0;r>s;s++){var a=i?i[s]:s;o[s]=n(e[a],a,e)}return o},y.reduce=y.foldl=y.inject=e(1),y.reduceRight=y.foldr=e(-1),y.find=y.detect=function(e,n,t){var i;return i=T(e)?y.findIndex(e,n,t):y.findKey(e,n,t),void 0!==i&&-1!==i?e[i]:void 0},y.filter=y.select=function(e,n,t){var i=[];return n=R(n,t),y.each(e,function(e,t,r){n(e,t,r)&&i.push(e)}),i},y.reject=function(e,n,t){return y.filter(e,y.negate(R(n)),t)},y.every=y.all=function(e,n,t){n=R(n,t);for(var i=!T(e)&&y.keys(e),r=(i||e).length,o=0;r>o;o++){var s=i?i[o]:o;if(!n(e[s],s,e))return!1}return!0},y.some=y.any=function(e,n,t){n=R(n,t);for(var i=!T(e)&&y.keys(e),r=(i||e).length,o=0;r>o;o++){var s=i?i[o]:o;if(n(e[s],s,e))return!0}return!1},y.contains=y.includes=y.include=function(e,n,t,i){return T(e)||(e=y.values(e)),("number"!=typeof t||i)&&(t=0),y.indexOf(e,n,t)>=0},y.invoke=function(e,n){var t=c.call(arguments,2),i=y.isFunction(n);return y.map(e,function(e){var r=i?n:e[n];return null==r?r:r.apply(e,t)})},y.pluck=function(e,n){return y.map(e,y.property(n))},y.where=function(e,n){return y.filter(e,y.matcher(n))},y.findWhere=function(e,n){return y.find(e,y.matcher(n))},y.max=function(e,n,t){var i,r,o=-1/0,s=-1/0;if(null==n&&null!=e){e=T(e)?e:y.values(e);for(var a=0,u=e.length;u>a;a++)i=e[a],i>o&&(o=i)}else n=R(n,t),y.each(e,function(e,t,i){r=n(e,t,i),(r>s||r===-1/0&&o===-1/0)&&(o=e,s=r)});return o},y.min=function(e,n,t){var i,r,o=1/0,s=1/0;if(null==n&&null!=e){e=T(e)?e:y.values(e);for(var a=0,u=e.length;u>a;a++)i=e[a],o>i&&(o=i)}else n=R(n,t),y.each(e,function(e,t,i){r=n(e,t,i),(s>r||1/0===r&&1/0===o)&&(o=e,s=r)});return o},y.shuffle=function(e){for(var n,t=T(e)?e:y.values(e),i=t.length,r=Array(i),o=0;i>o;o++)n=y.random(0,o),n!==o&&(r[o]=r[n]),r[n]=t[o];return r},y.sample=function(e,n,t){return null==n||t?(T(e)||(e=y.values(e)),e[y.random(e.length-1)]):y.shuffle(e).slice(0,Math.max(0,n))},y.sortBy=function(e,n,t){return n=R(n,t),y.pluck(y.map(e,function(e,t,i){return{value:e,index:t,criteria:n(e,t,i)}}).sort(function(e,n){var t=e.criteria,i=n.criteria;if(t!==i){if(t>i||void 0===t)return 1;if(i>t||void 0===i)return-1}return e.index-n.index}),"value")};var O=function(e){return function(n,t,i){var r={};return t=R(t,i),y.each(n,function(i,o){var s=t(i,o,n);e(r,i,s)}),r}};y.groupBy=O(function(e,n,t){y.has(e,t)?e[t].push(n):e[t]=[n]}),y.indexBy=O(function(e,n,t){e[t]=n}),y.countBy=O(function(e,n,t){y.has(e,t)?e[t]++:e[t]=1}),y.toArray=function(e){return e?y.isArray(e)?c.call(e):T(e)?y.map(e,y.identity):y.values(e):[]},y.size=function(e){return null==e?0:T(e)?e.length:y.keys(e).length},y.partition=function(e,n,t){n=R(n,t);var i=[],r=[];return y.each(e,function(e,t,o){(n(e,t,o)?i:r).push(e)}),[i,r]},y.first=y.head=y.take=function(e,n,t){return null==e?void 0:null==n||t?e[0]:y.initial(e,e.length-n)},y.initial=function(e,n,t){return c.call(e,0,Math.max(0,e.length-(null==n||t?1:n)))},y.last=function(e,n,t){return null==e?void 0:null==n||t?e[e.length-1]:y.rest(e,Math.max(0,e.length-n))},y.rest=y.tail=y.drop=function(e,n,t){return c.call(e,null==n||t?1:n)},y.compact=function(e){return y.filter(e,y.identity)};var S=function(e,n,t,i){for(var r=[],o=0,s=i||0,a=C(e);a>s;s++){var u=e[s];if(T(u)&&(y.isArray(u)||y.isArguments(u))){n||(u=S(u,n,t));var l=0,c=u.length;for(r.length+=c;c>l;)r[o++]=u[l++]}else t||(r[o++]=u)}return r};y.flatten=function(e,n){return S(e,n,!1)},y.without=function(e){return y.difference(e,c.call(arguments,1))},y.uniq=y.unique=function(e,n,t,i){y.isBoolean(n)||(i=t,t=n,n=!1),null!=t&&(t=R(t,i));for(var r=[],o=[],s=0,a=C(e);a>s;s++){var u=e[s],l=t?t(u,s,e):u;n?(s&&o===l||r.push(u),o=l):t?y.contains(o,l)||(o.push(l),r.push(u)):y.contains(r,u)||r.push(u)}return r},y.union=function(){return y.uniq(S(arguments,!0,!0))},y.intersection=function(e){for(var n=[],t=arguments.length,i=0,r=C(e);r>i;i++){var o=e[i];if(!y.contains(n,o)){for(var s=1;t>s&&y.contains(arguments[s],o);s++);s===t&&n.push(o)}}return n},y.difference=function(e){var n=S(arguments,!0,!0,1);return y.filter(e,function(e){return!y.contains(n,e)})},y.zip=function(){return y.unzip(arguments)},y.unzip=function(e){for(var n=e&&y.max(e,C).length||0,t=Array(n),i=0;n>i;i++)t[i]=y.pluck(e,i);return t},y.object=function(e,n){for(var t={},i=0,r=C(e);r>i;i++)n?t[e[i]]=n[i]:t[e[i][0]]=e[i][1];return t},y.findIndex=n(1),y.findLastIndex=n(-1),y.sortedIndex=function(e,n,t,i){t=R(t,i,1);for(var r=t(n),o=0,s=C(e);s>o;){var a=Math.floor((o+s)/2);t(e[a])<r?o=a+1:s=a}return o},y.indexOf=t(1,y.findIndex,y.sortedIndex),y.lastIndexOf=t(-1,y.findLastIndex),y.range=function(e,n,t){null==n&&(n=e||0,e=0),t=t||1;for(var i=Math.max(Math.ceil((n-e)/t),0),r=Array(i),o=0;i>o;o++,e+=t)r[o]=e;return r};var I=function(e,n,t,i,r){if(!(i instanceof n))return e.apply(t,r);var o=b(e.prototype),s=e.apply(o,r);return y.isObject(s)?s:o};y.bind=function(e,n){if(v&&e.bind===v)return v.apply(e,c.call(arguments,1));if(!y.isFunction(e))throw new TypeError("Bind must be called on a function");var t=c.call(arguments,2),i=function(){return I(e,i,n,this,t.concat(c.call(arguments)))};return i},y.partial=function(e){var n=c.call(arguments,1),t=function(){for(var i=0,r=n.length,o=Array(r),s=0;r>s;s++)o[s]=n[s]===y?arguments[i++]:n[s];for(;i<arguments.length;)o.push(arguments[i++]);return I(e,t,this,this,o)};return t},y.bindAll=function(e){var n,t,i=arguments.length;if(1>=i)throw new Error("bindAll must be passed function names");for(n=1;i>n;n++)t=arguments[n],e[t]=y.bind(e[t],e);return e},y.memoize=function(e,n){var t=function(i){var r=t.cache,o=""+(n?n.apply(this,arguments):i);return y.has(r,o)||(r[o]=e.apply(this,arguments)),r[o]};return t.cache={},t},y.delay=function(e,n){var t=c.call(arguments,2);return setTimeout(function(){return e.apply(null,t)},n)},y.defer=y.partial(y.delay,y,1),y.throttle=function(e,n,t){var i,r,o,s=null,a=0;t||(t={});var u=function(){a=t.leading===!1?0:y.now(),s=null,o=e.apply(i,r),s||(i=r=null)};return function(){var l=y.now();a||t.leading!==!1||(a=l);var c=n-(l-a);return i=this,r=arguments,0>=c||c>n?(s&&(clearTimeout(s),s=null),a=l,o=e.apply(i,r),s||(i=r=null)):s||t.trailing===!1||(s=setTimeout(u,c)),o}},y.debounce=function(e,n,t){var i,r,o,s,a,u=function(){var l=y.now()-s;n>l&&l>=0?i=setTimeout(u,n-l):(i=null,t||(a=e.apply(o,r),i||(o=r=null)))};return function(){o=this,r=arguments,s=y.now();var l=t&&!i;return i||(i=setTimeout(u,n)),l&&(a=e.apply(o,r),o=r=null),a}},y.wrap=function(e,n){return y.partial(n,e)},y.negate=function(e){return function(){return!e.apply(this,arguments)}},y.compose=function(){var e=arguments,n=e.length-1;return function(){for(var t=n,i=e[n].apply(this,arguments);t--;)i=e[t].call(this,i);return i}},y.after=function(e,n){return function(){return--e<1?n.apply(this,arguments):void 0}},y.before=function(e,n){var t;return function(){return--e>0&&(t=n.apply(this,arguments)),1>=e&&(n=null),t}},y.once=y.partial(y.before,2);var x=!{toString:null}.propertyIsEnumerable("toString"),A=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];y.keys=function(e){if(!y.isObject(e))return[];if(g)return g(e);var n=[];for(var t in e)y.has(e,t)&&n.push(t);return x&&i(e,n),n},y.allKeys=function(e){if(!y.isObject(e))return[];var n=[];for(var t in e)n.push(t);return x&&i(e,n),n},y.values=function(e){for(var n=y.keys(e),t=n.length,i=Array(t),r=0;t>r;r++)i[r]=e[n[r]];return i},y.mapObject=function(e,n,t){n=R(n,t);for(var i,r=y.keys(e),o=r.length,s={},a=0;o>a;a++)i=r[a],s[i]=n(e[i],i,e);return s},y.pairs=function(e){for(var n=y.keys(e),t=n.length,i=Array(t),r=0;t>r;r++)i[r]=[n[r],e[n[r]]];return i},y.invert=function(e){for(var n={},t=y.keys(e),i=0,r=t.length;r>i;i++)n[e[t[i]]]=t[i];return n},y.functions=y.methods=function(e){var n=[];for(var t in e)y.isFunction(e[t])&&n.push(t);return n.sort()},y.extend=E(y.allKeys),y.extendOwn=y.assign=E(y.keys),y.findKey=function(e,n,t){n=R(n,t);for(var i,r=y.keys(e),o=0,s=r.length;s>o;o++)if(i=r[o],n(e[i],i,e))return i},y.pick=function(e,n,t){var i,r,o={},s=e;if(null==s)return o;y.isFunction(n)?(r=y.allKeys(s),i=V(n,t)):(r=S(arguments,!1,!1,1),i=function(e,n,t){return n in t},s=Object(s));for(var a=0,u=r.length;u>a;a++){var l=r[a],c=s[l];i(c,l,s)&&(o[l]=c)}return o},y.omit=function(e,n,t){if(y.isFunction(n))n=y.negate(n);else{var i=y.map(S(arguments,!1,!1,1),String);n=function(e,n){return!y.contains(i,n)}}return y.pick(e,n,t)},y.defaults=E(y.allKeys,!0),y.create=function(e,n){var t=b(e);return n&&y.extendOwn(t,n),t},y.clone=function(e){return y.isObject(e)?y.isArray(e)?e.slice():y.extend({},e):e},y.tap=function(e,n){return n(e),e},y.isMatch=function(e,n){var t=y.keys(n),i=t.length;if(null==e)return!i;for(var r=Object(e),o=0;i>o;o++){var s=t[o];if(n[s]!==r[s]||!(s in r))return!1}return!0};var L=function(e,n,t,i){if(e===n)return 0!==e||1/e===1/n;if(null==e||null==n)return e===n;e instanceof y&&(e=e._wrapped),n instanceof y&&(n=n._wrapped);var r=f.call(e);if(r!==f.call(n))return!1;switch(r){case"[object RegExp]":case"[object String]":return""+e==""+n;case"[object Number]":return+e!==+e?+n!==+n:0===+e?1/+e===1/n:+e===+n;case"[object Date]":case"[object Boolean]":return+e===+n}var o="[object Array]"===r;if(!o){if("object"!=typeof e||"object"!=typeof n)return!1;var s=e.constructor,a=n.constructor;if(s!==a&&!(y.isFunction(s)&&s instanceof s&&y.isFunction(a)&&a instanceof a)&&"constructor"in e&&"constructor"in n)return!1}t=t||[],i=i||[];for(var u=t.length;u--;)if(t[u]===e)return i[u]===n;if(t.push(e),i.push(n),o){if(u=e.length,u!==n.length)return!1;for(;u--;)if(!L(e[u],n[u],t,i))return!1}else{var l,c=y.keys(e);if(u=c.length,y.keys(n).length!==u)return!1;for(;u--;)if(l=c[u],!y.has(n,l)||!L(e[l],n[l],t,i))return!1}return t.pop(),i.pop(),!0};y.isEqual=function(e,n){return L(e,n)},y.isEmpty=function(e){return null==e?!0:T(e)&&(y.isArray(e)||y.isString(e)||y.isArguments(e))?0===e.length:0===y.keys(e).length},y.isElement=function(e){return!(!e||1!==e.nodeType)},y.isArray=p||function(e){return"[object Array]"===f.call(e)},y.isObject=function(e){var n=typeof e;return"function"===n||"object"===n&&!!e},y.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(e){y["is"+e]=function(n){return f.call(n)==="[object "+e+"]"}}),y.isArguments(arguments)||(y.isArguments=function(e){return y.has(e,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(y.isFunction=function(e){return"function"==typeof e||!1}),y.isFinite=function(e){return isFinite(e)&&!isNaN(parseFloat(e))},y.isNaN=function(e){return y.isNumber(e)&&e!==+e},y.isBoolean=function(e){return e===!0||e===!1||"[object Boolean]"===f.call(e)},y.isNull=function(e){return null===e},y.isUndefined=function(e){return void 0===e},y.has=function(e,n){return null!=e&&d.call(e,n)},y.noConflict=function(){return r._=o,this},y.identity=function(e){return e},y.constant=function(e){return function(){return e}},y.noop=function(){},y.property=w,y.propertyOf=function(e){return null==e?function(){}:function(n){return e[n]}},y.matcher=y.matches=function(e){return e=y.extendOwn({},e),function(n){return y.isMatch(n,e)}},y.times=function(e,n,t){var i=Array(Math.max(0,e));n=V(n,t,1);for(var r=0;e>r;r++)i[r]=n(r);return i},y.random=function(e,n){return null==n&&(n=e,e=0),e+Math.floor(Math.random()*(n-e+1))},y.now=Date.now||function(){return(new Date).getTime()};var k={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},N=y.invert(k),F=function(e){var n=function(n){return e[n]},t="(?:"+y.keys(e).join("|")+")",i=RegExp(t),r=RegExp(t,"g");return function(e){return e=null==e?"":""+e,i.test(e)?e.replace(r,n):e}};y.escape=F(k),y.unescape=F(N),y.result=function(e,n,t){var i=null==e?void 0:e[n];return void 0===i&&(i=t),y.isFunction(i)?i.call(e):i};var j=0;y.uniqueId=function(e){var n=++j+"";return e?e+n:n},y.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var M=/(.)^/,P={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},U=/\\|'|\r|\n|\u2028|\u2029/g,D=function(e){return"\\"+P[e]};y.template=function(e,n,t){!n&&t&&(n=t),n=y.defaults({},n,y.templateSettings);var i=RegExp([(n.escape||M).source,(n.interpolate||M).source,(n.evaluate||M).source].join("|")+"|$","g"),r=0,o="__p+='";e.replace(i,function(n,t,i,s,a){return o+=e.slice(r,a).replace(U,D),r=a+n.length,t?o+="'+\n((__t=("+t+"))==null?'':_.escape(__t))+\n'":i?o+="'+\n((__t=("+i+"))==null?'':__t)+\n'":s&&(o+="';\n"+s+"\n__p+='"),n}),o+="';\n",n.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var s=new Function(n.variable||"obj","_",o)}catch(a){throw a.source=o,a}var u=function(e){return s.call(this,e,y)},l=n.variable||"obj";return u.source="function("+l+"){\n"+o+"}",u},y.chain=function(e){var n=y(e);return n._chain=!0,n};var G=function(e,n){return e._chain?y(n).chain():n};y.mixin=function(e){y.each(y.functions(e),function(n){var t=y[n]=e[n];y.prototype[n]=function(){var e=[this._wrapped];return l.apply(e,arguments),G(this,t.apply(y,e))}})},y.mixin(y),y.each(["pop","push","reverse","shift","sort","splice","unshift"],function(e){var n=s[e];y.prototype[e]=function(){var t=this._wrapped;return n.apply(t,arguments),"shift"!==e&&"splice"!==e||0!==t.length||delete t[0],G(this,t)}}),y.each(["concat","join","slice"],function(e){var n=s[e];y.prototype[e]=function(){return G(this,n.apply(this._wrapped,arguments))}}),y.prototype.value=function(){return this._wrapped},y.prototype.valueOf=y.prototype.toJSON=y.prototype.value,y.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return y})}).call(this);var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,n){var i=null;e.event?(i=e,i.file_url&&(i.file_format=t(i.file_url)),i.company_id=u,i.display_id=a,l&&(i.version=l),n(i)):n(i)}function n(){var e=new Date,n=e.getUTCFullYear(),t=e.getUTCMonth()+1,i=e.getUTCDate();return 10>t&&(t="0"+t),10>i&&(i="0"+i),n+t+i}function t(e){var n,t=/[?#&]/;return e&&"string"==typeof e?(n=e.substr(e.lastIndexOf(".")+1),t.test(n)&&(n=n.substr(0,-1!==n.indexOf("?")?n.indexOf("?"):n.length),n=n.substr(0,-1!==n.indexOf("#")?n.indexOf("#"):n.length),n=n.substr(0,-1!==n.indexOf("&")?n.indexOf("&"):n.length)),n.toLowerCase()):null}function i(e){var t={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:n(),rows:[{insertId:""}]},i=JSON.parse(JSON.stringify(t));return i.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),i.rows[0].json=JSON.parse(JSON.stringify(e)),i.rows[0].json.ts=(new Date).toISOString(),i}function r(n,t){e(t,function(e){null!==e&&RiseVision.Common.Logger.log(n,e)})}function o(e,n){u=e,a=n}function s(e){l=e}var a="",u="",l=null;return{getInsertData:i,getFileFormat:t,logEvent:r,setIds:o,setVersion:s}}(),RiseVision.Common.Logger=function(e){"use strict";function n(e){var n=new XMLHttpRequest;return new Date-l<358e4?e({}):(n.open("POST",r,!0),n.onloadend=function(){var t=JSON.parse(n.response);e({token:t.access_token,refreshedAt:new Date})},n.send(),void 0)}function t(e){return s&&u===e}function i(i,r){function f(n){var t,s,a=new XMLHttpRequest;s=o.replace("TABLE_ID",i),l=n.refreshedAt||l,c=n.token||c,t=e.getInsertData(r),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+c),r.cb&&"function"==typeof r.cb&&(a.onloadend=function(){r.cb(a.response)}),a.send(JSON.stringify(t))}if(!(!i||!r||r.hasOwnProperty("event")&&!r.event||r.hasOwnProperty("event")&&t(r.event)))return s=!0,u=r.event,setTimeout(function(){s=!1},a),n(f)}var r="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",o="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,u="",l=0,c="";return{log:i}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,n){var t="font-family: "+decodeURIComponent(n.font.family).replace(/'/g,"")+"; ",i="color: "+(n.color?n.color:n.forecolor)+"; ",r="font-size: "+(-1===n.size.indexOf("px")?n.size+"px; ":n.size+"; "),o="font-weight: "+(n.bold?"bold":"normal")+"; ",s="font-style: "+(n.italic?"italic":"normal")+"; ",a="text-decoration: "+(n.underline?"underline":"none")+"; ",u="background-color: "+(n.highlightColor?n.highlightColor:n.backcolor)+";";return"."+e+" {"+t+i+r+o+s+a+u+"}"}function n(e){for(var n=document.createElement("style"),t=0,i=e.length;i>t;t++)n.appendChild(document.createTextNode(e[t]));document.head.appendChild(n)}function t(t,o){function s(){o&&"function"==typeof o&&o()}function a(){s()}var u=null,l=[],c=[],f=[];if(!t||0===t.length)return s(),void 0;t.forEach(function(t){t.class&&t.fontStyle&&n([e(t.class,t.fontStyle)])});for(var d=0;d<t.length;d++)t[d].fontStyle&&t[d].fontStyle.font.type&&"google"===t[d].fontStyle.font.type&&(u=t[d].fontStyle.font.family.split(",")[0],u=u.replace(/'/g,""),l.push(u));for(d=0;d<t.length;d++)t[d].fontStyle&&t[d].fontStyle.font.type&&"custom"===t[d].fontStyle.font.type&&(c.push(decodeURIComponent(t[d].fontStyle.font.family).replace(/'/g,"")),f.push(t[d].fontStyle.font.url.replace(/'/g,"\\'")));if(0===l.length&&0===c.length)s();else{for(var p=0;p<c.length;p+=1)i(c[p],f[p]);l.length>0?r(l,a):s()}}function i(e,n,t){var i=null,r="font-family: "+e+"; src: url('"+n+"');";t=t||document,i=t.styleSheets[0],null!==i&&i.addRule("@font-face",r)}function r(e,n){WebFont.load({google:{families:e},active:function(){n&&"function"==typeof n&&n()},inactive:function(){n&&"function"==typeof n&&n()},timeout:2e3})}function o(e){for(var n=e.length,t=[],i=0;n>i;i++)t[i]=new Image,t[i].src=e[i]}function s(e){for(var n,t=window.location.search.substring(1),i=t.split("&"),r=0;r<i.length;r++)if(n=i[r].split("="),n[0]==e)return decodeURIComponent(n[1]);return""}function a(e){var n="";switch(e){case 404:n="The file does not exist or cannot be accessed.";break;case 507:n="There is not enough disk space to save the file on Rise Cache.";break;default:n="There was a problem retrieving the file from Rise Cache."}return n}function u(e){var n=document.createElement("div");return n.innerHTML=e,n.textContent}function l(e,n){var t=new XMLHttpRequest;if(e&&n&&"function"==typeof n){t.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{t.send(),n(t.status>=200&&t.status<304)}catch(i){n(!1)}}}function c(){var e=25,n=navigator.userAgent.match(/Chrome\/(\S+)/),t=n?n[1]:0;return t&&(t=parseInt(t.substring(0,t.indexOf("."))),e>=t)?!0:!1}function f(e,n){return/^(?:f|ht)tps?\:\/\//.test(e)||(e=(n?"https://":"http://")+e),e}return{addProtocol:f,getQueryParameter:s,getFontCssStyle:e,addCSSRules:n,loadFonts:t,loadCustomFont:i,loadGoogleFonts:r,preloadImages:o,getRiseCacheErrorMessage:a,unescapeHTML:u,hasInternetConnection:l,isLegacy:c}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var n=new XMLHttpRequest,t=this;e&&"function"==typeof e&&(u?n.open("GET",o,!0):n.open("GET",o+"ping?callback=_",!0),n.onreadystatechange=function(){try{if(4===n.readyState)if(s=!0,200===n.status)a=!0,e(!0,n.responseText);else{if(404===n.status)return u=!0,t.ping(e);console.debug("Rise Cache is not running"),a=!1,e(!1,null)}}catch(i){console.debug("Caught exception: ",i.description)}},n.send())}function n(e,n,t){function i(){var n,i,s;a?n=u?o+"files?url="+encodeURIComponent(e):t?o+"?url="+encodeURIComponent(e):o+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):t?n=e:(i=e.split("?"),s=1===i.length?"?":"&",n=e+s+"cb="+(new Date).getTime()),r("HEAD",n)}function r(e,t){var i=new XMLHttpRequest,o={xhr:i,url:t};a?(i.open(e,t,!0),i.addEventListener("loadend",function(){var s=i.status||0;s>=200&&300>s?n(o):"HEAD"===e?r("GET",t):n(o,new Error("The request failed with status code: "+s))}),i.send()):n(o)}if(e&&n&&"function"==typeof n)return s?i():this.ping(i)}function t(e){var n="";switch(e){case 502:n="There was a problem retrieving the file.";break;case 504:n="Unable to download the file. The server is not responding.";break;case 507:n="There is not enough disk space to save the file on Rise Cache.";break;case 534:n="The file does not exist or cannot be accessed.";break;default:n=""}return n}function i(e){return e&&"function"==typeof e?s?(e(a),void 0):this.ping(function(){e(a)}):void 0}function r(e){return e&&"function"==typeof e?s?(e(u),void 0):this.ping(function(){e(u)}):void 0}var o="//localhost:9494/",s=!1,a=!1,u=!1;return{getErrorMessage:t,getFile:n,isRiseCacheRunning:i,isV2Running:r,ping:e}}();var version="1.1.0";"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod",COMPONENTS_PATH:"components/"},RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e,n){"use strict";function t(){n.rpc.call("","rsevent_done",null,S.getString("id")),null!==M&&c(M,!0),c({event:"done"},!1)}function i(){n.rpc.call("","rsevent_ready",null,S.getString("id"),!0,!0,!0,!0,!0)}function r(){clearTimeout(P),P=null}function o(){r(),P=setTimeout(function(){t()},5e3)}function s(){if(F&&F.length>0){if("file"===C)return F[0];if("folder"===C&&j)return F[j]}return null}function a(){return D}function u(){return G}function l(e,n){U=!0,D="undefined"!=typeof n,A.show(e),j=null,k||o()}function c(e,n){n&&(M=e),e.file_url||(e.file_url=s()),RiseVision.Common.LoggerUtils.logEvent(h(),e)}function f(e){"file"===C?F[0]=e:"folder"===C&&(F=e),q=!1,A.hide(),k||v()}function d(e){"file"===C?F[0]=e:"folder"===C&&(F=e),L&&L.update(F),U=!1,G=!1,D=!1,q=!1,M=null}function p(e){q=!0,A.show(e),j=null,k||o()}function g(){k=!0,r(),L&&(N?L.pause():(j=null,L.reset()))}function v(){return T&&(T=!1,c({event:"configuration",event_details:O},!1)),k=!1,c({event:"play"},!1),U?(o(),void 0):q?("file"===C&&I&&I.retry(),void 0):(L?(A.hide(),L.play()):F&&F.length>0&&(L=new RiseVision.Video.Player(w,C),L.init(F)),void 0)}function h(){return"video_v2_events"}function m(){j=null,t()}function y(){A.hide(),!k&&L&&L.play()}function V(e){j=e}function R(e,t){var r;w=_.clone(e),C=t,S=new n.Prefs,document.getElementById("container").style.width=S.getInt("rsW")+"px",document.getElementById("container").style.height=S.getInt("rsH")+"px",w.width=S.getInt("rsW"),w.height=S.getInt("rsH"),w.video.hasOwnProperty("resume")&&(N=w.video.resume),A=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),RiseVision.Common.Utilities.isLegacy()?l("This version of Video Widget is not supported on this version of Rise Player. Please use the latest Rise Player version available at https://help.risevision.com/user/create-a-display"):(A.show("Please wait while your video is downloaded."),"file"===C?(r=0!==Object.keys(w.storage).length,r?(O="storage file",I=new RiseVision.Video.StorageFile(w),I.init()):(O="custom",x=new RiseVision.Video.NonStorage(w),x.init())):"folder"===C&&(O="storage folder",I=new RiseVision.Video.StorageFolder(w),I.init())),i()}function E(e){var n=null,t={},i="Sorry, there was a problem playing the video.",r="Error loading media: File could not be played",o="Error loading YouTube: Video could not be played",s="Error loading player: No media sources found",a="Error loading playlist: No playable sources found",u="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.",f="The format of that video is not supported";e&&(e.type&&e.message?n=e.type+" - "+e.message:e.type?n=e.type:e.message&&(n=e.message),e.message&&(e.message===r||e.message===o?i=u:(e.message===s||e.message===a)&&(i=f))),t.event="player error",t.event_details=n,G=!0,c(t,!0),l(i)}function b(){g()}var w,C,T=!0,O=null,S=null,I=null,x=null,A=null,L=null,k=!0,N=!0,F=[],j=null,M=null,P=null,U=!1,D=!1,G=!1,q=!1;return{getTableName:h,hasPlayerError:u,hasStorageError:a,logEvent:c,onFileInit:f,onFileRefresh:d,onFileUnavailable:p,pause:g,play:v,setAdditionalParams:R,showError:l,playerEnded:m,playerReady:y,playerError:E,playerItemChange:V,stop:b}}(window,gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.PlayerUtils=function(){"use strict";function e(e){for(var n=[],t=0;t<e.length;t+=1)n.push({file:e[t],type:this.getVideoFileType(e[t])});return n}function n(e){var n,t=[".mp4",".webm"],i=e.toLowerCase(),r=null;for(n=0;n<=t.length;n+=1)if(-1!==i.indexOf(t[n])){r=t[n].substr(t[n].lastIndexOf(".")+1);break}return r}return{getPlaylist:e,getVideoFileType:n}}();var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function n(){var n=document.getElementById("videoStorage");n&&(n.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(o?(o=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Video.onFileRefresh(e.detail.url):(RiseVision.Video.hasStorageError()||RiseVision.Video.hasPlayerError())&&RiseVision.Video.onFileRefresh(e.detail.url)))}),n.addEventListener("rise-storage-api-error",function(e){var n={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),n.addEventListener("rise-storage-no-file",function(e){var n={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),n.addEventListener("rise-storage-file-throttled",function(e){var n={event:"storage file throttled",file_url:e.detail};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),n.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),n.addEventListener("rise-storage-subscription-error",function(e){var n={event:"storage subscription error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(n,!0)}),n.addEventListener("rise-storage-error",function(e){var n={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),n.addEventListener("rise-cache-error",function(e){var n,t={event:"rise cache error",event_details:e.detail.error.message},o=0;RiseVision.Video.logEvent(t,!0),r.isV2Running()?n=r.getErrorMessage(o):(e.detail.error.message&&(o=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2)),n=i.getRiseCacheErrorMessage(o)),RiseVision.Video.showError(n)}),n.addEventListener("rise-cache-not-running",function(e){var n={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(n,!0)}),n.addEventListener("rise-cache-file-unavailable",function(){RiseVision.Video.onFileUnavailable("File is downloading")}),n.setAttribute("folder",e.storage.folder),n.setAttribute("fileName",e.storage.fileName),n.setAttribute("companyId",e.storage.companyId),n.setAttribute("env",config.STORAGE_ENV),n.go())}function t(){var e=document.getElementById("videoStorage");e&&e.go()}var i=RiseVision.Common.Utilities,r=RiseVision.Common.RiseCache,o=!0;return{init:n,retry:t}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function n(){return _.pluck(c,"url")}function t(e){return _.find(c,function(n){return e.name===n.name})}function i(e){var n=t(e);n&&c.splice(c.indexOf(n),1)}function r(e){var n=t(e);n&&(n.url=e.url)}function o(e){var n=t(e);n||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),c.splice(_.sortedIndex(c,e,"fileName"),0,e))}function s(){var t=document.getElementById("videoStorage");t&&(t.addEventListener("rise-storage-response",function(e){var t=e.detail;if(t.added&&(o(t),l))return l=!1,RiseVision.Video.onFileInit(n()),void 0;if(t.hasOwnProperty("changed"))if(t.changed)r(t);else if(!RiseVision.Video.hasStorageError()&&!RiseVision.Video.hasPlayerError())return;t.deleted&&i(t),RiseVision.Video.onFileRefresh(n())}),t.addEventListener("rise-storage-api-error",function(e){var n={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")
}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),t.addEventListener("rise-storage-no-folder",function(e){var n={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"storage folder format(s) invalid"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any supported video formats.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-subscription-error",function(e){var n={event:"storage subscription error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(n,!0)}),t.addEventListener("rise-storage-error",function(e){var n={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(n,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var n,t={event:"rise cache error",event_details:e.detail.error.message},i=0;RiseVision.Video.logEvent(t,!0),u.isV2Running()?n=u.getErrorMessage(i):(e.detail.error.message&&(i=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2)),n=a.getRiseCacheErrorMessage(i)),RiseVision.Video.showError(n)}),t.addEventListener("rise-cache-not-running",function(e){var n={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(n,!0)}),t.setAttribute("fileType","video"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go())}var a=RiseVision.Common.Utilities,u=RiseVision.Common.RiseCache,l=!0,c=[];return{init:s}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function n(e){r.getFile(l,function(e,n){var i,s=0;n?(RiseVision.Video.logEvent({event:"non-storage error",event_details:n.message,file_url:e.url},!0),r.isV2Running()?i=r.getErrorMessage(s):(n.message&&(s=+n.message.substring(n.message.indexOf(":")+2)),i=o.getRiseCacheErrorMessage(s)),RiseVision.Video.showError(i)):u?(u=!1,RiseVision.Video.onFileInit(e.url),t()):RiseVision.Video.onFileRefresh(e.url)},e)}function t(){null===a&&(a=setInterval(function(){n(!1)},s))}function i(){l=e.url&&""!==e.url?e.url:e.selector.url,l=o.addProtocol(l),n(!0)}var r=RiseVision.Common.RiseCache,o=RiseVision.Common.Utilities,s=9e5,a=null,u=!0,l="";return{init:i}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.Player=function(e){"use strict";function n(){RiseVision.Video.playerEnded()}function t(){y||(clearTimeout(V),V=setTimeout(function(){"PLAYING"!==h.getState().toUpperCase()&&h.play()},1e3*v))}function i(e){RiseVision.Video.playerItemChange(e)}function r(e){e&&RiseVision.Video.playerError({type:"video",message:e.message})}function o(e){e&&RiseVision.Video.playerError({type:"setup",message:e.message})}function s(){h.on("setupError",function(e){o(e)}),h.on("ready",function(){h.on("playlistComplete",function(){n()}),h.on("playlistItem",function(e){i(e.index)}),h.on("error",function(e){r(e)}),h.setVolume(e.video.volume),e.video.controls&&v>1&&h.on("pause",function(){t()}),RiseVision.Video.playerReady()})}function a(n){return{controls:e.video.controls,height:e.height,playlist:m.getPlaylist(n),skin:{name:"rise"},stretching:g,width:e.width}}function u(n){h=jwplayer("player"),R=n,g=e.video.scaleToFit?"uniform":"none",p=e.video.controls?e.video.autoplay:!0,e.video.pause?(e.video.pause="string"==typeof e.video.pause?parseInt(e.video.pause,10):e.video.pause,v=isNaN(e.video.pause)?0:e.video.pause):v=0,h.setup(a(n)),s()}function l(){y=!1,E&&(E=!1,h.load(m.getPlaylist(R))),p&&h.play()}function c(){y=!0,clearTimeout(V),"PLAYING"===h.getState().toUpperCase()&&h.pause()}function f(){function e(){h.off("play",e),h.pause()}function n(){h.off("seeked",n),h.pause()}c(),"COMPLETE"!==h.getState().toUpperCase()&&setTimeout(function(){0!==h.getPlaylistIndex()?(h.on("play",e),h.playlistItem(0)):(h.on("seeked",n),h.seek(0))},100)}function d(e){R=e,E=!0}var p,g,v,h=null,m=RiseVision.Video.PlayerUtils,y=!1,V=null,R=null,E=!1;return{init:u,pause:c,play:l,reset:f,update:d}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,n){"use strict";function t(){try{n.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function i(){if(o){for(;n.firstChild;)n.removeChild(n.firstChild);n.style.display="none",e.style.display="block",o=!1}}function r(t){var i,r=document.createDocumentFragment();o?(i=n.querySelector(".message"),i.innerHTML=t):(e.style.display="none",n.style.display="block",i=document.createElement("p"),i.innerHTML=t,i.setAttribute("class","message"),r.appendChild(i),n.appendChild(r),o=!0)}var o=!1;return t(),{hide:i,show:r}},function(e,n){"use strict";function t(e,n){var t="",i="";Array.isArray(e)&&e.length>0&&Array.isArray(n)&&n.length>0&&("companyId"===e[0]&&(t=n[0]),"displayId"===e[1]&&(i=n[1]?n[1]:g),RiseVision.Common.RiseCache.isV2Running(function(e){c(e,i)}),RiseVision.Common.LoggerUtils.setIds(t,i),RiseVision.Common.LoggerUtils.setVersion(version),"additionalParams"===e[2]&&(m=JSON.parse(n[2]),f=0!==Object.keys(m.storage).length?m.storage.fileName?"file":"folder":"file"))}function i(){RiseVision.Video.play()}function r(){RiseVision.Video.pause()}function o(){RiseVision.Video.stop()}function s(){l(),p&&""!==p&&(n.rpc.register("rscmd_play_"+p,i),n.rpc.register("rscmd_pause_"+p,r),n.rpc.register("rscmd_stop_"+p,o),n.rpc.register("rsparam_set_"+p,t),n.rpc.call("","rsparam_get",null,p,["companyId","displayId","additionalParams"]))}function a(){e.removeEventListener("WebComponentsReady",a),h=!0,v&&h&&RiseVision.Video.setAdditionalParams(m,f)}function u(){var e=document.createElement("rise-storage");e.removeEventListener("rise-storage-ready",u),v=!0,v&&h&&RiseVision.Video.setAdditionalParams(m,f)}function l(){var n=document.createElement("script");n.src=config.COMPONENTS_PATH+"webcomponentsjs/webcomponents-lite.min.js",e.addEventListener("WebComponentsReady",a),document.getElementsByTagName("head")[0].appendChild(n)}function c(e,n){var t,i=document.createDocumentFragment(),r=document.createElement("link"),o=document.createElement("rise-storage"),s=n===g?0:5,a="rise-storage";(e||n===g)&&(a+="-v2"),t=config.COMPONENTS_PATH+a+"/rise-storage.html",r.setAttribute("rel","import"),r.setAttribute("href",t),document.getElementsByTagName("head")[0].appendChild(r),o.setAttribute("id","videoStorage"),o.setAttribute("refresh",s),o.addEventListener("rise-storage-ready",u),i.appendChild(o),document.body.appendChild(i)}var f,d=new n.Prefs,p=d.getString("id"),g="preview",v=!1,h=!1,m=null;e.oncontextmenu=function(){return!1},s()}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(e,n)}();
//# sourceMappingURL=data:application/json;base64,
