var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,i){var n=null;e.event?(n=e,n.file_url&&(n.file_format=t(n.file_url)),n.company_id=l,n.display_id=a,d&&(n.version=d),i(n)):i(n)}function i(){var e=new Date,i=e.getUTCFullYear(),t=e.getUTCMonth()+1,n=e.getUTCDate();return 10>t&&(t="0"+t),10>n&&(n="0"+n),i+t+n}function t(e){var i,t=/[?#&]/;return e&&"string"==typeof e?(i=e.substr(e.lastIndexOf(".")+1),t.test(i)&&(i=i.substr(0,-1!==i.indexOf("?")?i.indexOf("?"):i.length),i=i.substr(0,-1!==i.indexOf("#")?i.indexOf("#"):i.length),i=i.substr(0,-1!==i.indexOf("&")?i.indexOf("&"):i.length)),i.toLowerCase()):null}function n(e){var t={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:i(),rows:[{insertId:""}]},n=JSON.parse(JSON.stringify(t));return n.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),n.rows[0].json=JSON.parse(JSON.stringify(e)),n.rows[0].json.ts=(new Date).toISOString(),n}function o(i,t){e(t,function(e){null!==e&&RiseVision.Common.Logger.log(i,e)})}function s(e,i){l=e,a=i}function r(e){d=e}var a="",l="",d=null;return{getInsertData:n,getFileFormat:t,logEvent:o,setIds:s,setVersion:r}}(),RiseVision.Common.Logger=function(e){"use strict";function i(e){var i=new XMLHttpRequest;return new Date-d<358e4?e({}):(i.open("POST",o,!0),i.onloadend=function(){var t=JSON.parse(i.response);e({token:t.access_token,refreshedAt:new Date})},i.send(),void 0)}function t(e){return r&&l===e}function n(n,o){function c(i){var t,r,a=new XMLHttpRequest;r=s.replace("TABLE_ID",n),d=i.refreshedAt||d,u=i.token||u,t=e.getInsertData(o),a.open("POST",r,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+u),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(t))}if(!(!n||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&t(o.event)))return r=!0,l=o.event,setTimeout(function(){r=!1},a),i(c)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",s="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",r=!1,a=1e3,l="",d=0,u="";return{log:n}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,i){var t="font-family: "+decodeURIComponent(i.font.family).replace(/'/g,"")+"; ",n="color: "+(i.color?i.color:i.forecolor)+"; ",o="font-size: "+(-1===i.size.indexOf("px")?i.size+"px; ":i.size+"; "),s="font-weight: "+(i.bold?"bold":"normal")+"; ",r="font-style: "+(i.italic?"italic":"normal")+"; ",a="text-decoration: "+(i.underline?"underline":"none")+"; ",l="background-color: "+(i.highlightColor?i.highlightColor:i.backcolor)+";";return"."+e+" {"+t+n+o+s+r+a+l+"}"}function i(e){for(var i=document.createElement("style"),t=0,n=e.length;n>t;t++)i.appendChild(document.createTextNode(e[t]));document.head.appendChild(i)}function t(t,s){function r(){s&&"function"==typeof s&&s()}function a(){r()}var l=null,d=[],u=[],c=[];if(!t||0===t.length)return r(),void 0;t.forEach(function(t){t.class&&t.fontStyle&&i([e(t.class,t.fontStyle)])});for(var f=0;f<t.length;f++)t[f].fontStyle&&t[f].fontStyle.font.type&&"google"===t[f].fontStyle.font.type&&(l=t[f].fontStyle.font.family.split(",")[0],l=l.replace(/'/g,""),d.push(l));for(f=0;f<t.length;f++)t[f].fontStyle&&t[f].fontStyle.font.type&&"custom"===t[f].fontStyle.font.type&&(u.push(decodeURIComponent(t[f].fontStyle.font.family).replace(/'/g,"")),c.push(t[f].fontStyle.font.url.replace(/'/g,"\\'")));if(0===d.length&&0===u.length)r();else{for(var g=0;g<u.length;g+=1)n(u[g],c[g]);d.length>0?o(d,a):r()}}function n(e,i,t){var n=null,o="font-family: "+e+"; src: url('"+i+"');";t=t||document,n=t.styleSheets[0],null!==n&&n.addRule("@font-face",o)}function o(e,i){WebFont.load({google:{families:e},active:function(){i&&"function"==typeof i&&i()},inactive:function(){i&&"function"==typeof i&&i()},timeout:2e3})}function s(e){for(var i=e.length,t=[],n=0;i>n;n++)t[n]=new Image,t[n].src=e[n]}function r(e){for(var i,t=window.location.search.substring(1),n=t.split("&"),o=0;o<n.length;o++)if(i=n[o].split("="),i[0]==e)return decodeURIComponent(i[1]);return""}function a(e){var i="";switch(e){case 404:i="The file does not exist or cannot be accessed.";break;case 507:i="There is not enough disk space to save the file on Rise Cache.";break;default:i="There was a problem retrieving the file from Rise Cache."}return i}function l(e){var i=document.createElement("div");return i.innerHTML=e,i.textContent}function d(e,i){var t=new XMLHttpRequest;if(e&&i&&"function"==typeof i){t.open("HEAD",e+"?cb="+(new Date).getTime(),!1);try{t.send(),i(t.status>=200&&t.status<304)}catch(n){i(!1)}}}return{getQueryParameter:r,getFontCssStyle:e,addCSSRules:i,loadFonts:t,loadCustomFont:n,loadGoogleFonts:o,preloadImages:s,getRiseCacheErrorMessage:a,unescapeHTML:l,hasInternetConnection:d}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var i=new XMLHttpRequest;e&&"function"==typeof e&&(i.open("GET",n+"ping?callback=_",!0),i.onreadystatechange=function(){try{4===i.readyState&&(o=!0,200===i.status?(s=!0,e(!0,i.responseText)):(console.debug("Rise Cache is not running"),s=!1,e(!1,null)))}catch(t){console.debug("Caught exception: ",t.description)}},i.send())}function i(e,i,t){function r(){var i,o,r;s?i=t?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):t?i=e:(o=e.split("?"),r=1===o.length?"?":"&",i=e+r+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,t){var n=new XMLHttpRequest,o={xhr:n,url:t};s?(n.open(e,t,!0),n.addEventListener("loadend",function(){var s=n.status||0;s>=200&&300>s?i(o):"HEAD"===e?a("GET",t):i(o,new Error("The request failed with status code: "+s))}),n.send()):i(o)}if(e&&i&&"function"==typeof i)return o?r():this.ping(r)}function t(e){return e&&"function"==typeof e?o?(e(s),void 0):this.ping(function(){e(s)}):void 0}var n="//localhost:9494/",o=!1,s=!1;return{getFile:i,isRiseCacheRunning:t,ping:e}}();var version="1.1.0";"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e,i){"use strict";function t(){i.rpc.call("","rsevent_done",null,I.getString("id")),null!==k&&u(k,!0),u({event:"done"},!1)}function n(){i.rpc.call("","rsevent_ready",null,I.getString("id"),!0,!0,!0,!0,!0)}function o(){clearTimeout(G),G=null}function s(){o(),G=setTimeout(function(){t()},5e3)}function r(){if(F&&F.length>0){if("file"===C)return F[0];if("folder"===C&&P)return F[P]}return null}function a(){return M}function l(){return D}function d(e,i){U=!0,M="undefined"!=typeof i,O.show(e),P=null,N||s()}function u(e,i){i&&(k=e),e.file_url||(e.file_url=r()),RiseVision.Common.LoggerUtils.logEvent(v(),e)}function c(e){"file"===C?F[0]=e:"folder"===C&&(F=e),O.hide(),N||p()}function f(e){"file"===C?F[0]=e:"folder"===C&&(F=e),x&&x.update(F),U=!1,D=!1,M=!1,k=null}function g(){N=!0,o(),x&&(A?x.pause():(P=null,x.reset()))}function p(){return T&&(T=!1,u({event:"configuration",event_details:b},!1)),N=!1,u({event:"play"},!1),U?(s(),void 0):(x?(O.hide(),x.play()):F&&F.length>0&&(x=new RiseVision.Video.Player(w,C),x.init(F)),void 0)}function v(){return"video_v2_events"}function m(){P=null,t()}function V(){O.hide(),!N&&x&&x.play()}function h(e){P=e}function R(e,t){var o;w=_.clone(e),C=t,I=new i.Prefs,document.getElementById("container").style.width=I.getInt("rsW")+"px",document.getElementById("container").style.height=I.getInt("rsH")+"px",w.width=I.getInt("rsW"),w.height=I.getInt("rsH"),w.video.hasOwnProperty("resume")&&(A=w.video.resume),O=new RiseVision.Common.Message(document.getElementById("container"),document.getElementById("messageContainer")),O.show("Please wait while your video is downloaded."),"file"===C?(o=0!==Object.keys(w.storage).length,o?(b="storage file",S=new RiseVision.Video.StorageFile(w),S.init()):(b="custom",L=new RiseVision.Video.NonStorage(w),L.init())):"folder"===C&&(b="storage folder",S=new RiseVision.Video.StorageFolder(w),S.init()),n()}function y(e){var i=null,t={},n="Sorry, there was a problem playing the video.",o="Error loading media: File could not be played",s="Error loading YouTube: Video could not be played",r="Error loading player: No media sources found",a="Error loading playlist: No playable sources found",l="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.",c="The format of that video is not supported";e&&(e.type&&e.message?i=e.type+" - "+e.message:e.type?i=e.type:e.message&&(i=e.message),e.message&&(e.message===o||e.message===s?n=l:(e.message===r||e.message===a)&&(n=c))),t.event="player error",t.event_details=i,D=!0,u(t,!0),d(n)}function E(){g()}var w,C,T=!0,b=null,I=null,S=null,L=null,O=null,x=null,N=!0,A=!0,F=[],P=null,k=null,G=null,U=!1,M=!1,D=!1;return{getTableName:v,hasPlayerError:l,hasStorageError:a,logEvent:u,onFileInit:c,onFileRefresh:f,pause:g,play:p,setAdditionalParams:R,showError:d,playerEnded:m,playerReady:V,playerError:y,playerItemChange:h,stop:E}}(window,gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.PlayerUtils=function(){"use strict";function e(e){for(var i=[],t=0;t<e.length;t+=1)i.push({file:e[t],type:this.getVideoFileType(e[t])});return i}function i(e){var i,t=[".mp4",".webm"],n=e.toLowerCase(),o=null;for(i=0;i<=t.length;i+=1)if(-1!==n.indexOf(t[i])){o=t[i].substr(t[i].lastIndexOf(".")+1);break}return o}return{getPlaylist:e,getVideoFileType:i}}();var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function i(){var i=document.getElementById("videoStorage");i&&(i.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(t?(t=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Video.onFileRefresh(e.detail.url):(RiseVision.Video.hasStorageError()||RiseVision.Video.hasPlayerError())&&RiseVision.Video.onFileRefresh(e.detail.url)))}),i.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),i.addEventListener("rise-storage-no-file",function(e){var i={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),i.addEventListener("rise-storage-file-throttled",function(e){var i={event:"storage file throttled",file_url:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),i.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),i.addEventListener("rise-storage-subscription-error",function(e){var i={event:"storage subscription error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0)}),i.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),i.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),i.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),i.setAttribute("folder",e.storage.folder),i.setAttribute("fileName",e.storage.fileName),i.setAttribute("companyId",e.storage.companyId),i.setAttribute("env",config.STORAGE_ENV),i.go())}var t=!0;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function i(){return _.pluck(l,"url")}function t(e){return _.find(l,function(i){return e.name===i.name})}function n(e){var i=t(e);i&&l.splice(l.indexOf(i),1)}function o(e){var i=t(e);i&&(i.url=e.url)}function s(e){var i=t(e);i||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function r(){var t=document.getElementById("videoStorage");t&&(t.addEventListener("rise-storage-response",function(e){var t=e.detail;if(t.added&&(s(t),a))return a=!1,RiseVision.Video.onFileInit(i()),void 0;if(t.hasOwnProperty("changed"))if(t.changed)o(t);else if(!RiseVision.Video.hasStorageError()&&!RiseVision.Video.hasPlayerError())return;t.deleted&&n(t),RiseVision.Video.onFileRefresh(i())}),t.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),t.addEventListener("rise-storage-no-folder",function(e){var i={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"storage folder format(s) invalid"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any supported video formats.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-subscription-error",function(e){var i={event:"storage subscription error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0)}),t.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),t.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),t.setAttribute("fileType","video"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go())}var a=!0,l=[];return{init:r}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function i(e){o.getFile(l,function(e,i){if(i){RiseVision.Video.logEvent({event:"non-storage error",event_details:i.message,file_url:e.url},!0);var n=0;i.message&&(n=+i.message.substring(i.message.indexOf(":")+2));var o=RiseVision.Common.Utilities.getRiseCacheErrorMessage(n);RiseVision.Video.showError(o)}else a?(a=!1,RiseVision.Video.onFileInit(e.url),t()):RiseVision.Video.onFileRefresh(e.url)},e)}function t(){null===r&&(r=setInterval(function(){i(!1)},s))}function n(){l=e.url&&""!==e.url?e.url:e.selector.url,i(!0)}var o=RiseVision.Common.RiseCache,s=9e5,r=null,a=!0,l="";return{init:n}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.Player=function(e){"use strict";function i(){RiseVision.Video.playerEnded()}function t(){h||(clearTimeout(R),R=setTimeout(function(){"PLAYING"!==m.getState().toUpperCase()&&m.play()},1e3*v))}function n(e){RiseVision.Video.playerItemChange(e)}function o(e){e&&RiseVision.Video.playerError({type:"video",message:e.message})}function s(e){e&&RiseVision.Video.playerError({type:"setup",message:e.message})}function r(){m.on("setupError",function(e){s(e)}),m.on("ready",function(){m.on("playlistComplete",function(){i()}),m.on("playlistItem",function(e){n(e.index)}),m.on("error",function(e){o(e)}),m.setVolume(e.video.volume),e.video.controls&&v>1&&m.on("pause",function(){t()}),RiseVision.Video.playerReady()})}function a(i){return{controls:e.video.controls,height:e.height,playlist:V.getPlaylist(i),skin:{name:"rise"},stretching:p,width:e.width}}function l(i){m=jwplayer("player"),y=i,p=e.video.scaleToFit?"uniform":"none",g=e.video.controls?e.video.autoplay:!0,e.video.pause?(e.video.pause="string"==typeof e.video.pause?parseInt(e.video.pause,10):e.video.pause,v=isNaN(e.video.pause)?0:e.video.pause):v=0,m.setup(a(i)),r()}function d(){h=!1,E&&(E=!1,m.load(V.getPlaylist(y))),g&&m.play()}function u(){h=!0,clearTimeout(R),"PLAYING"===m.getState().toUpperCase()&&m.pause()}function c(){function e(){m.off("play",e),m.pause()}function i(){m.off("seeked",i),m.pause()}u(),"COMPLETE"!==m.getState().toUpperCase()&&setTimeout(function(){0!==m.getPlaylistIndex()?(m.on("play",e),m.playlistItem(0)):(m.on("seeked",i),m.seek(0))},100)}function f(e){y=e,E=!0}var g,p,v,m=null,V=RiseVision.Video.PlayerUtils,h=!1,R=null,y=null,E=!1;return{init:l,pause:u,play:d,reset:c,update:f}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,i){"use strict";function t(){try{i.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function n(){if(s){for(;i.firstChild;)i.removeChild(i.firstChild);i.style.display="none",e.style.display="block",s=!1}}function o(t){var n,o=document.createDocumentFragment();s?(n=i.querySelector(".message"),n.innerHTML=t):(e.style.display="none",i.style.display="block",n=document.createElement("p"),n.innerHTML=t,n.setAttribute("class","message"),o.appendChild(n),i.appendChild(o),s=!0)}var s=!1;return t(),{hide:n,show:o}},function(e,i){"use strict";function t(e,i){var t=null,n="",o="",s="";Array.isArray(e)&&e.length>0&&Array.isArray(i)&&i.length>0&&("companyId"===e[0]&&(o=i[0]),"displayId"===e[1]&&(s=i[1]?i[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,s),RiseVision.Common.LoggerUtils.setVersion(version),"additionalParams"===e[2]&&(t=JSON.parse(i[2]),n=0!==Object.keys(t.storage).length?t.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(t,n)))}function n(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function s(){RiseVision.Video.stop()}function r(){e.removeEventListener("WebComponentsReady",r),l&&""!==l&&(i.rpc.register("rscmd_play_"+l,n),i.rpc.register("rscmd_pause_"+l,o),i.rpc.register("rscmd_stop_"+l,s),i.rpc.register("rsparam_set_"+l,t),i.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var a=new i.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",r)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var i=document.getElementsByTagName("script")[0];i.parentNode.insertBefore(e,i)}();
//# sourceMappingURL=data:application/json;base64,
