var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,i){var n=null;e.event?(n=e,n.file_url&&(n.file_format=t(n.file_url)),n.company_id=a,n.display_id=s,i(n)):i(n)}function i(){var e=new Date,i=e.getUTCFullYear(),t=e.getUTCMonth()+1,n=e.getUTCDate();return 10>t&&(t="0"+t),10>n&&(n="0"+n),i+t+n}function t(e){var i,t=/[?#&]/;return e&&"string"==typeof e?(i=e.substr(e.lastIndexOf(".")+1),t.test(i)&&(i=i.substr(0,-1!==i.indexOf("?")?i.indexOf("?"):i.length),i=i.substr(0,-1!==i.indexOf("#")?i.indexOf("#"):i.length),i=i.substr(0,-1!==i.indexOf("&")?i.indexOf("&"):i.length)),i.toLowerCase()):null}function n(e){var t={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:i(),rows:[{insertId:""}]},n=JSON.parse(JSON.stringify(t));return n.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),n.rows[0].json=JSON.parse(JSON.stringify(e)),n.rows[0].json.ts=(new Date).toISOString(),n}function o(i,t){e(t,function(e){null!==e&&RiseVision.Common.Logger.log(i,e)})}function r(e,i){a=e,s=i}var s="",a="";return{getInsertData:n,getFileFormat:t,logEvent:o,setIds:r}}(),RiseVision.Common.Logger=function(e){"use strict";function i(e){var i=new XMLHttpRequest;return new Date-d<358e4?e({}):(i.open("POST",o,!0),i.onloadend=function(){var t=JSON.parse(i.response);e({token:t.access_token,refreshedAt:new Date})},i.send(),void 0)}function t(e){return s&&l===e}function n(n,o){function u(i){var t,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",n),d=i.refreshedAt||d,c=i.token||c,t=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+c),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(t))}if(!(!n||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&t(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),i(u)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,c="";return{log:n}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,i){var t="font-family:"+i.font.family+"; ",n="color: "+(i.color?i.color:i.forecolor)+"; ",o="font-size: "+(-1===i.size.indexOf("px")?i.size+"px; ":i.size+"; "),r="font-weight: "+(i.bold?"bold":"normal")+"; ",s="font-style: "+(i.italic?"italic":"normal")+"; ",a="text-decoration: "+(i.underline?"underline":"none")+"; ",l="background-color: "+(i.highlightColor?i.highlightColor:i.backcolor)+"; ";return"."+e+" {"+t+n+o+r+s+a+l+"}"}function i(e){for(var i=document.createElement("style"),t=0,n=e.length;n>t;t++)i.appendChild(document.createTextNode(e[t]));document.head.appendChild(i)}function t(t,r){t.forEach(function(t){t.class&&t.fontSetting&&i([e(t.class,t.fontSetting)]),t.fontSetting.font.type&&("custom"===t.fontSetting.font.type&&t.fontSetting.font.family&&t.fontSetting.font.url?n(t.fontSetting.font.family,t.fontSetting.font.url,r):"google"===t.fontSetting.font.type&&t.fontSetting.font.family&&o(t.fontSetting.font.family,r))})}function n(e,i,t){var n=null,o="font-family: "+e+"; src: url('"+i+"');";t=t||document,n=t.styleSheets[0],null!==n&&n.addRule("@font-face",o)}function o(e,i){var t,n=document.createElement("link");i=i||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),t=e.split(",")[0],t=t.replace(/'/g,""),n.setAttribute("href","https://fonts.googleapis.com/css?family="+t),null!==n&&i.getElementsByTagName("head")[0].appendChild(n)}function r(e){for(var i=e.length,t=[],n=0;i>n;n++)t[n]=new Image,t[n].src=e[n]}function s(e){for(var i,t=window.location.search.substring(1),n=t.split("&"),o=0;o<n.length;o++)if(i=n[o].split("="),i[0]==e)return decodeURIComponent(i[1]);return""}function a(e){var i="";switch(e){case 404:i="The file does not exist or cannot be accessed.";break;case 507:i="There is not enough disk space to save the file on Rise Cache.";break;default:i="There was a problem retrieving the file from Rise Cache."}return i}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:i,loadFonts:t,loadCustomFont:n,loadGoogleFont:o,preloadImages:r,getRiseCacheErrorMessage:a}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var i=new XMLHttpRequest;e&&"function"==typeof e&&(i.open("GET",n+"ping?callback=_",!0),i.onreadystatechange=function(){try{4===i.readyState&&(o=!0,200===i.status?(r=!0,e(!0,i.responseText)):(console.debug("Rise Cache is not running"),r=!1,e(!1,null)))}catch(t){console.debug("Caught exception: ",t.description)}},i.send())}function i(e,i,t){function s(){var i,o,s;r?i=t?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):t?i=e:(o=e.split("?"),s=1===o.length?"?":"&",i=e+s+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,t){var n=new XMLHttpRequest,o={xhr:n,url:t};r?(n.open(e,t,!0),n.addEventListener("loadend",function(){var r=n.status||0;r>=200&&300>r?i(o):"HEAD"===e?a("GET",t):i(o,new Error("The request failed with status code: "+r))}),n.send()):i(o)}if(e&&i&&"function"==typeof i)return o?s():this.ping(s)}function t(e){return e&&"function"==typeof e?o?(e(r),void 0):this.ping(function(){e(r)}):void 0}var n="//localhost:9494/",o=!1,r=!1;return{getFile:i,isRiseCacheRunning:t,ping:e}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={SKIN:"skin/RVSkin.xml",STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e,i){"use strict";function t(){i.rpc.call("","rsevent_done",null,S.getString("id")),null!==G&&d(G,!0),d({event:"done"},!1)}function n(){i.rpc.call("","rsevent_ready",null,S.getString("id"),!0,!0,!0,!0,!0)}function o(){clearTimeout(D),D=null}function r(){o(),D=setTimeout(function(){t()},5e3)}function s(){if(k&&k.length>0){if("file"===w)return k[0];if("folder"===w&&M)return k[M]}return null}function a(){return U}function l(e,i){P=!0,U="undefined"!=typeof i,T.show(e),M=null,L.remove(x,F.getFrameOrigin(),function(){A||r()})}function d(e,i){i&&(G=e),e.file_url||(e.file_url=s()),RiseVision.Common.LoggerUtils.logEvent(m(),e)}function c(e){"file"===w?k[0]=e:"folder"===w&&(k=e),T.hide(),A||f()}function u(e){"file"===w?k[0]=e:"folder"===w&&(k=e),P=!1,U=!1,G=null}function g(){var e=L.getFrameObject(x);A=!0,o(),e&&(N?e.postMessage({event:"pause"},F.getFrameOrigin()):(M=null,L.remove(x,F.getFrameOrigin())))}function f(){var e,i,t={},n=L.getFrameObject(x);return C&&(C=!1,t.event="configuration",t.event_details=b,d(t,!1)),A=!1,d({event:"play"},!1),P?(r(),void 0):(n?n.postMessage({event:"play"},F.getFrameOrigin()):k&&k.length>0&&RiseVision.Common.RiseCache.isRiseCacheRunning(function(t){e=t?"?url="+encodeURIComponent(F.getBucketPath())+config.SKIN:config.SKIN,"file"===w?(i=t?"//localhost:9494/?url="+encodeURIComponent(F.getBucketPath())+"player-file-cache.html":"player-file.html",L.add(0),L.createFramePlayer(0,E,k[0],e,i,F.getFrameOrigin())):"folder"===w&&(i=t?"//localhost:9494/?url="+encodeURIComponent(F.getBucketPath())+"player-folder-cache.html":"player-folder.html",L.add(0),L.createFramePlayer(0,E,k,e,i,F.getFrameOrigin()))}),void 0)}function m(){return"video_events"}function v(){M=null,L.remove(x,F.getFrameOrigin(),function(){t()})}function p(){var e;T.hide(),A||(e=L.getFrameObject(x),e&&e.postMessage({event:"play"},F.getFrameOrigin()))}function h(e){M=e}function V(e,t){var o;E=_.clone(e),w=t,S=new i.Prefs,document.getElementById("videoContainer").style.height=S.getInt("rsH")+"px",E.width=S.getInt("rsW"),E.height=S.getInt("rsH"),E.video.hasOwnProperty("resume")&&(N=E.video.resume),T=new RiseVision.Common.Message(document.getElementById("videoContainer"),document.getElementById("messageContainer")),T.show("Please wait while your video is downloaded."),F=new RiseVision.Video.WindowController,F.init(),L=new RiseVision.Video.FrameController,"file"===w?(o=0!==Object.keys(E.storage).length,o?(b="storage file",O=new RiseVision.Video.StorageFile(E),O.init()):(b="custom",I=new RiseVision.Video.NonStorage(E),I.init())):"folder"===w&&(b="storage folder",O=new RiseVision.Video.StorageFolder(E),O.init()),n()}function R(e){var i=null,t={},n="Sorry, there was a problem playing the video.",o="Error loading media: File could not be played",r="Error loading YouTube: Video could not be played",s="Error loading player: No playable sources found",a="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.",c="The format of that video is not supported";e&&(e.type&&e.message?i=e.type+" - "+e.message:e.type?i=e.type:e.message&&(i=e.message),e.message&&(e.message===o||e.message===r?n=a:e.message===s&&(n=c))),t.event="player error",t.event_details=i,d(t,!0),l(n)}function y(){g()}var E,w,C=!0,b=null,S=null,O=null,I=null,T=null,L=null,F=null,A=!0,N=!0,x=0,k=[],M=null,G=null,D=null,P=!1,U=!1;return{getTableName:m,hasStorageError:a,logEvent:d,onFileInit:c,onFileRefresh:u,pause:g,play:f,setAdditionalParams:V,showError:l,playerEnded:v,playerReady:p,playerError:R,playerItemChange:h,stop:y}}(window,gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function i(){var i=document.getElementById("videoStorage");i&&(i.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(t?(t=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Video.onFileRefresh(e.detail.url):RiseVision.Video.hasStorageError()&&RiseVision.Video.onFileRefresh(e.detail.url)))}),i.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),i.addEventListener("rise-storage-no-file",function(e){var i={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),i.addEventListener("rise-storage-file-throttled",function(e){var i={event:"storage file throttled",file_url:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),i.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),i.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),i.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),i.setAttribute("folder",e.storage.folder),i.setAttribute("fileName",e.storage.fileName),i.setAttribute("companyId",e.storage.companyId),i.setAttribute("env",config.STORAGE_ENV),i.go())}var t=!0;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function i(){return _.pluck(l,"url")}function t(e){return _.find(l,function(i){return e.name===i.name})}function n(e){var i=t(e);i&&l.splice(l.indexOf(i),1)}function o(e){var i=t(e);i&&(i.url=e.url)}function r(e){var i=t(e);i||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function s(){var t=document.getElementById("videoStorage");t&&(t.addEventListener("rise-storage-response",function(e){var t=e.detail;if(t.added&&(r(t),a))return a=!1,RiseVision.Video.onFileInit(i()),void 0;if(t.hasOwnProperty("changed"))if(t.changed)o(t);else if(!RiseVision.Video.hasStorageError())return;t.deleted&&n(t),RiseVision.Video.onFileRefresh(i())}),t.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),t.addEventListener("rise-storage-no-folder",function(e){var i={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"storage folder format(s) invalid"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any supported video formats.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),t.setAttribute("fileType","video"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go())}var a=!0,l=[];return{init:s}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function i(e){o.getFile(l,function(e,i){if(i){RiseVision.Video.logEvent({event:"non-storage error",event_details:i.message,file_url:e.url},!0);var n=0;i.message&&(n=+i.message.substring(i.message.indexOf(":")+2));var o=RiseVision.Common.Utilities.getRiseCacheErrorMessage(n);RiseVision.Video.showError(o)}else a?(a=!1,RiseVision.Video.onFileInit(e.url),t()):RiseVision.Video.onFileRefresh(e.url)},e)}function t(){null===s&&(s=setInterval(function(){i(!1)},r))}function n(){l=e.url&&""!==e.url?e.url:e.selector.url,i(!0)}var o=RiseVision.Common.RiseCache,r=9e5,s=null,a=!0,l="";return{init:n}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.WindowController=function(){"use strict";function e(){var e=window.location.pathname.split("/"),i=window.location.host,t=window.location.protocol;s=t+"//"+i+"/";for(var n=0;n<e.length&&(""===e[n]||(s+=e[n]+"/","dist"!==e[n]));n+=1);}function i(){"localhost:8000"===window.location.host?a="http://localhost:8000":"s3.amazonaws.com"===window.location.host&&RiseVision.Common.RiseCache.isRiseCacheRunning(function(i){i?(a="http://localhost:9494",e()):a="http://s3.amazonaws.com"})}function t(){window.addEventListener("message",function(e){var i=e.origin||e.originalEvent.origin;if("http://localhost:9494"!==i&&"http://s3.amazonaws.com"!==i&&"http://localhost:8000"!==i)return i=null,void 0;if(e.data&&"object"==typeof e.data&&e.data.event)switch(e.data.event){case"playerEnded":RiseVision.Video.playerEnded();break;case"playerError":RiseVision.Video.playerError(e.data.error);break;case"playerItemChange":RiseVision.Video.playerItemChange(e.data.index);break;case"playerReady":RiseVision.Video.playerReady()}})}function n(){return s}function o(){return a}function r(){i(),t()}var s="",a="";return{getBucketPath:n,getFrameOrigin:o,init:r}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.FrameController=function(){"use strict";function e(e){return document.getElementById(l+e)}function i(i){var t,n=e(i);return t=n.querySelector("iframe"),t?t.contentWindow?t.contentWindow:t.contentDocument.document?t.contentDocument.document:t.contentDocument:null}function t(t,n){var o,r=e(t),s=i(t);s&&(o=r.querySelector("iframe"),s.postMessage({event:"remove"},n),o.setAttribute("src","about:blank"))}function n(i){var t=e(i),n=document.createElement("iframe");n.setAttribute("allowTransparency",!0),n.setAttribute("frameborder","0"),n.setAttribute("scrolling","no"),t.appendChild(n)}function o(t,n,o,r,s,a){var l,d=e(t),c=i(t);c&&(l=d.querySelector("iframe"),l.onload=function(){l.onload=null,c.postMessage({event:"init",params:n,files:o,skin:r},a)},l.setAttribute("src",s))}function r(i){var t=e(i);t.style.visibility="hidden"}function s(e,i,n){var o=document.getElementById(l+e);t(e,i),setTimeout(function(){for(;o.firstChild;)o.removeChild(o.firstChild);n&&"function"==typeof n&&n()},200)}function a(i){var t=e(i);t.style.visibility="visible"}var l="if_";return{add:n,createFramePlayer:o,getFrameContainer:e,getFrameObject:i,hide:r,remove:s,show:a}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,i){"use strict";function t(){try{i.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function n(){if(r){for(;i.firstChild;)i.removeChild(i.firstChild);i.style.display="none",e.style.visibility="visible",r=!1}}function o(t){var n,o=document.createDocumentFragment();r?(n=i.querySelector(".message"),n.innerHTML=t):(e.style.visibility="hidden",i.style.display="block",n=document.createElement("p"),n.innerHTML=t,n.setAttribute("class","message"),o.appendChild(n),i.appendChild(o),r=!0)}var r=!1;return t(),{hide:n,show:o}},function(e,i){"use strict";function t(e,i){var t=null,n="",o="",r="";Array.isArray(e)&&e.length>0&&Array.isArray(i)&&i.length>0&&("companyId"===e[0]&&(o=i[0]),"displayId"===e[1]&&(r=i[1]?i[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,r),"additionalParams"===e[2]&&(t=JSON.parse(i[2]),n=0!==Object.keys(t.storage).length?t.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(t,n)))}function n(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function r(){RiseVision.Video.stop()}function s(){e.removeEventListener("WebComponentsReady",s),l&&""!==l&&(i.rpc.register("rscmd_play_"+l,n),i.rpc.register("rscmd_pause_"+l,o),i.rpc.register("rscmd_stop_"+l,r),i.rpc.register("rsparam_set_"+l,t),i.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var a=new i.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",s)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var i=document.getElementsByTagName("script")[0];i.parentNode.insertBefore(e,i)}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpzL3dpZGdldC5taW4uanMiXSwibmFtZXMiOlsiV0lER0VUX0NPTU1PTl9DT05GSUciLCJBVVRIX1BBVEhfVVJMIiwiTE9HR0VSX0NMSUVOVF9JRCIsIkxPR0dFUl9DTElFTlRfU0VDUkVUIiwiTE9HR0VSX1JFRlJFU0hfVE9LRU4iLCJTVE9SQUdFX0VOViIsIlNUT1JFX1VSTCIsIlJpc2VWaXNpb24iLCJDb21tb24iLCJMb2dnZXJVdGlscyIsImdldEV2ZW50UGFyYW1zIiwicGFyYW1zIiwiY2IiLCJqc29uIiwiZXZlbnQiLCJmaWxlX3VybCIsImZpbGVfZm9ybWF0IiwiZ2V0RmlsZUZvcm1hdCIsImNvbXBhbnlfaWQiLCJjb21wYW55SWQiLCJkaXNwbGF5X2lkIiwiZGlzcGxheUlkIiwiZ2V0U3VmZml4IiwiZGF0ZSIsIkRhdGUiLCJ5ZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJtb250aCIsImdldFVUQ01vbnRoIiwiZGF5IiwiZ2V0VVRDRGF0ZSIsInVybCIsInN0ciIsImhhc1BhcmFtcyIsInN1YnN0ciIsImxhc3RJbmRleE9mIiwidGVzdCIsImluZGV4T2YiLCJsZW5ndGgiLCJ0b0xvd2VyQ2FzZSIsImdldEluc2VydERhdGEiLCJCQVNFX0lOU0VSVF9TQ0hFTUEiLCJraW5kIiwic2tpcEludmFsaWRSb3dzIiwiaWdub3JlVW5rbm93blZhbHVlcyIsInRlbXBsYXRlU3VmZml4Iiwicm93cyIsImluc2VydElkIiwiZGF0YSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInRvVXBwZXJDYXNlIiwidHMiLCJ0b0lTT1N0cmluZyIsImxvZ0V2ZW50IiwidGFibGUiLCJMb2dnZXIiLCJsb2ciLCJzZXRJZHMiLCJjb21wYW55IiwiZGlzcGxheSIsInV0aWxzIiwicmVmcmVzaFRva2VuIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJyZWZyZXNoRGF0ZSIsIm9wZW4iLCJSRUZSRVNIX1VSTCIsIm9ubG9hZGVuZCIsInJlc3AiLCJyZXNwb25zZSIsInRva2VuIiwiYWNjZXNzX3Rva2VuIiwicmVmcmVzaGVkQXQiLCJzZW5kIiwiaXNUaHJvdHRsZWQiLCJ0aHJvdHRsZSIsImxhc3RFdmVudCIsInRhYmxlTmFtZSIsImluc2VydFdpdGhUb2tlbiIsInJlZnJlc2hEYXRhIiwiaW5zZXJ0RGF0YSIsInNlcnZpY2VVcmwiLCJyZXBsYWNlIiwic2V0UmVxdWVzdEhlYWRlciIsImhhc093blByb3BlcnR5Iiwic2V0VGltZW91dCIsInRocm90dGxlRGVsYXkiLCJVdGlsaXRpZXMiLCJnZXRGb250Q3NzU3R5bGUiLCJjbGFzc05hbWUiLCJmb250T2JqIiwiZmFtaWx5IiwiZm9udCIsImNvbG9yIiwiZm9yZWNvbG9yIiwic2l6ZSIsIndlaWdodCIsImJvbGQiLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJoaWdobGlnaHQiLCJoaWdobGlnaHRDb2xvciIsImJhY2tjb2xvciIsImFkZENTU1J1bGVzIiwicnVsZXMiLCJzdHlsZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImkiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiaGVhZCIsImxvYWRGb250cyIsInNldHRpbmdzIiwiY29udGVudERvYyIsImZvckVhY2giLCJpdGVtIiwiY2xhc3MiLCJmb250U2V0dGluZyIsInR5cGUiLCJsb2FkQ3VzdG9tRm9udCIsImxvYWRHb29nbGVGb250Iiwic2hlZXQiLCJydWxlIiwic3R5bGVTaGVldHMiLCJhZGRSdWxlIiwiZmFtaWx5VmFsIiwic3R5bGVzaGVldCIsInNldEF0dHJpYnV0ZSIsInNwbGl0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwcmVsb2FkSW1hZ2VzIiwidXJscyIsImltYWdlcyIsIkltYWdlIiwic3JjIiwiZ2V0UXVlcnlQYXJhbWV0ZXIiLCJwYXJhbSIsInBhaXIiLCJxdWVyeSIsIndpbmRvdyIsImxvY2F0aW9uIiwic2VhcmNoIiwic3Vic3RyaW5nIiwidmFycyIsImRlY29kZVVSSUNvbXBvbmVudCIsImdldFJpc2VDYWNoZUVycm9yTWVzc2FnZSIsInN0YXR1c0NvZGUiLCJlcnJvck1lc3NhZ2UiLCJSaXNlQ2FjaGUiLCJwaW5nIiwiY2FsbGJhY2siLCJyIiwiQkFTRV9DQUNIRV9VUkwiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwiX3BpbmdSZWNlaXZlZCIsInN0YXR1cyIsIl9pc0NhY2hlUnVubmluZyIsInJlc3BvbnNlVGV4dCIsImNvbnNvbGUiLCJkZWJ1ZyIsImUiLCJkZXNjcmlwdGlvbiIsImdldEZpbGUiLCJmaWxlVXJsIiwibm9jYWNoZWJ1c3RlciIsImZpbGVSZXF1ZXN0Iiwic2VwYXJhdG9yIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiZ2V0VGltZSIsIm1ha2VSZXF1ZXN0IiwibWV0aG9kIiwicmVxdWVzdCIsImFkZEV2ZW50TGlzdGVuZXIiLCJFcnJvciIsInRoaXMiLCJpc1Jpc2VDYWNoZVJ1bm5pbmciLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uc3RhbnQiLCJjb25maWciLCJTS0lOIiwiVmlkZW8iLCJnYWRnZXRzIiwiX2RvbmUiLCJycGMiLCJjYWxsIiwiX3ByZWZzIiwiZ2V0U3RyaW5nIiwiX2Vycm9yTG9nIiwiX3JlYWR5IiwiX2NsZWFyRXJyb3JUaW1lciIsImNsZWFyVGltZW91dCIsIl9lcnJvclRpbWVyIiwiX3N0YXJ0RXJyb3JUaW1lciIsIl9nZXRDdXJyZW50RmlsZSIsIl9jdXJyZW50RmlsZXMiLCJfbW9kZSIsIl9jdXJyZW50UGxheWxpc3RJbmRleCIsImhhc1N0b3JhZ2VFcnJvciIsIl9zdG9yYWdlRXJyb3JGbGFnIiwic2hvd0Vycm9yIiwibWVzc2FnZSIsImlzU3RvcmFnZUVycm9yIiwiX2Vycm9yRmxhZyIsIl9tZXNzYWdlIiwic2hvdyIsIl9mcmFtZUNvbnRyb2xsZXIiLCJyZW1vdmUiLCJfY3VycmVudEZyYW1lIiwiX3dpbmRvd0NvbnRyb2xsZXIiLCJnZXRGcmFtZU9yaWdpbiIsIl92aWV3ZXJQYXVzZWQiLCJpc0Vycm9yIiwiZ2V0VGFibGVOYW1lIiwib25GaWxlSW5pdCIsImhpZGUiLCJwbGF5Iiwib25GaWxlUmVmcmVzaCIsInBhdXNlIiwiZnJhbWVPYmoiLCJnZXRGcmFtZU9iamVjdCIsIl9yZXN1bWUiLCJwb3N0TWVzc2FnZSIsInNraW4iLCJodG1sIiwibG9nUGFyYW1zIiwiX2lzTG9hZGluZyIsImV2ZW50X2RldGFpbHMiLCJfY29uZmlnRGV0YWlscyIsImlzUnVubmluZyIsImdldEJ1Y2tldFBhdGgiLCJhZGQiLCJjcmVhdGVGcmFtZVBsYXllciIsIl9hZGRpdGlvbmFsUGFyYW1zIiwicGxheWVyRW5kZWQiLCJwbGF5ZXJSZWFkeSIsInBsYXllckl0ZW1DaGFuZ2UiLCJpbmRleCIsInNldEFkZGl0aW9uYWxQYXJhbXMiLCJtb2RlIiwiaXNTdG9yYWdlRmlsZSIsIl8iLCJjbG9uZSIsIlByZWZzIiwiZ2V0RWxlbWVudEJ5SWQiLCJoZWlnaHQiLCJnZXRJbnQiLCJ3aWR0aCIsInZpZGVvIiwicmVzdW1lIiwiTWVzc2FnZSIsIldpbmRvd0NvbnRyb2xsZXIiLCJpbml0IiwiRnJhbWVDb250cm9sbGVyIiwiT2JqZWN0Iiwia2V5cyIsInN0b3JhZ2UiLCJfc3RvcmFnZSIsIlN0b3JhZ2VGaWxlIiwiX25vblN0b3JhZ2UiLCJOb25TdG9yYWdlIiwiU3RvcmFnZUZvbGRlciIsInBsYXllckVycm9yIiwiZXJyb3IiLCJkZXRhaWxzIiwiTUVESUFfRVJST1IiLCJZT1VUVUJFX0VSUk9SIiwiUExBWUVSX0VSUk9SIiwiRU5DT0RJTkdfTUVTU0FHRSIsIkZPUk1BVF9NRVNTQUdFIiwic3RvcCIsImRldGFpbCIsIl9pbml0aWFsTG9hZCIsImNoYW5nZWQiLCJjb2RlIiwiY3VycmVudFRhcmdldCIsImZvbGRlciIsImZpbGVOYW1lIiwiZ28iLCJfZ2V0VXJscyIsInBsdWNrIiwiX2ZpbGVzIiwiX2dldEV4aXN0aW5nRmlsZSIsImZpbGUiLCJmaW5kIiwiZiIsIm5hbWUiLCJfZGVsZXRlRmlsZSIsImV4aXN0aW5nIiwic3BsaWNlIiwiX2NoYW5nZUZpbGUiLCJfYWRkRmlsZSIsInNsaWNlIiwic29ydGVkSW5kZXgiLCJhZGRlZCIsImRlbGV0ZWQiLCJfZ2V0RmlsZSIsIm9taXRDYWNoZUJ1c3RlciIsInJpc2VDYWNoZSIsIl91cmwiLCJfc3RhcnRSZWZyZXNoSW50ZXJ2YWwiLCJfcmVmcmVzaEludGVydmFsSWQiLCJzZXRJbnRlcnZhbCIsIl9yZWZyZXNoRHVyYXRpb24iLCJzZWxlY3RvciIsIl9zZXRCdWNrZXRQYXRoIiwicGF0aEFycmF5IiwicGF0aG5hbWUiLCJob3N0IiwicHJvdG9jb2wiLCJfYnVja2V0UGF0aCIsIl9zZXRGcmFtZU9yaWdpbiIsIl9mcmFtZU9yaWdpbiIsIl9zZXRNZXNzYWdlUmVjZWl2ZXIiLCJvcmlnaW4iLCJvcmlnaW5hbEV2ZW50IiwiZ2V0RnJhbWVDb250YWluZXIiLCJQUkVGSVgiLCJpZnJhbWUiLCJmcmFtZUNvbnRhaW5lciIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50V2luZG93IiwiY29udGVudERvY3VtZW50IiwiX2NsZWFyIiwiZmlsZXMiLCJvbmxvYWQiLCJ2aXNpYmlsaXR5IiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwibWFpbkNvbnRhaW5lciIsIm1lc3NhZ2VDb250YWluZXIiLCJfaW5pdCIsIndhcm4iLCJfYWN0aXZlIiwicCIsImZyYWdtZW50IiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsImlubmVySFRNTCIsImNvbmZpZ3VyZSIsIm5hbWVzIiwidmFsdWVzIiwiYWRkaXRpb25hbFBhcmFtcyIsIkFycmF5IiwiaXNBcnJheSIsInBvbHltZXJSZWFkeSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpZCIsInJlZ2lzdGVyIiwicHJlZnMiLCJvbmNvbnRleHRtZW51IiwiX2dhcSIsInB1c2giLCJnYSIsImFzeW5jIiwicyIsInBhcmVudE5vZGUiLCJpbnNlcnRCZWZvcmUiXSwibWFwcGluZ3MiOiJBQUFBLEdBQUlBLHVCQUNGQyxjQUFlLGlCQUNmQyxpQkFBa0IsNEVBQ2xCQyxxQkFBc0IsMkJB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QUFJa08sR0FBRUMsV0FBV0MsYUFBYUosRUFBSUUiLCJmaWxlIjoianMvd2lkZ2V0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBXSURHRVRfQ09NTU9OX0NPTkZJRyA9IHtcbiAgQVVUSF9QQVRIX1VSTDogXCJ2MS93aWRnZXQvYXV0aFwiLFxuICBMT0dHRVJfQ0xJRU5UX0lEOiBcIjEwODg1MjcxNDcxMDktNnExbzJ2dGlobjM0MjkycGp0NGNraG1oY2swcmswbzcuYXBwcy5nb29nbGV1c2VyY29udGVudC5jb21cIixcbiAgTE9HR0VSX0NMSUVOVF9TRUNSRVQ6IFwibmxaeXJjUExnNm9Fd085ZjlXZm4yOVdoXCIsXG4gIExPR0dFUl9SRUZSRVNIX1RPS0VOOiBcIjEveHp0NGt3ekUxSDdXOVZuS0I4Y0FhQ3g2emI0RXM0bktFb3FhWUhkVEQxNUlnT3JKRHRkdW42eks2WGlBVENLVFwiLFxuICBTVE9SQUdFX0VOVjogXCJwcm9kXCIsXG4gIFNUT1JFX1VSTDogXCJodHRwczovL3N0b3JlLWRvdC1ydmFzZXJ2ZXIyLmFwcHNwb3QuY29tL1wiXG59O1xuLyogZ2xvYmFsIGdhZGdldHMgKi9cblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5Db21tb24gPSBSaXNlVmlzaW9uLkNvbW1vbiB8fCB7fTtcblxuUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMgPSAoZnVuY3Rpb24oKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gICB2YXIgZGlzcGxheUlkID0gXCJcIixcbiAgICBjb21wYW55SWQgPSBcIlwiO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG5cbiAgLyogUmV0cmlldmUgcGFyYW1ldGVycyB0byBwYXNzIHRvIHRoZSBldmVudCBsb2dnZXIuICovXG4gIGZ1bmN0aW9uIGdldEV2ZW50UGFyYW1zKHBhcmFtcywgY2IpIHtcbiAgICB2YXIganNvbiA9IG51bGw7XG5cbiAgICAvLyBldmVudCBpcyByZXF1aXJlZC5cbiAgICBpZiAocGFyYW1zLmV2ZW50KSB7XG4gICAgICBqc29uID0gcGFyYW1zO1xuXG4gICAgICBpZiAoanNvbi5maWxlX3VybCkge1xuICAgICAgICBqc29uLmZpbGVfZm9ybWF0ID0gZ2V0RmlsZUZvcm1hdChqc29uLmZpbGVfdXJsKTtcbiAgICAgIH1cblxuICAgICAganNvbi5jb21wYW55X2lkID0gY29tcGFueUlkO1xuICAgICAganNvbi5kaXNwbGF5X2lkID0gZGlzcGxheUlkO1xuXG4gICAgICBjYihqc29uKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBjYihqc29uKTtcbiAgICB9XG4gIH1cblxuICAvLyBHZXQgc3VmZml4IGZvciBCUSB0YWJsZSBuYW1lLlxuICBmdW5jdGlvbiBnZXRTdWZmaXgoKSB7XG4gICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpLFxuICAgICAgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpICsgMSxcbiAgICAgIGRheSA9IGRhdGUuZ2V0VVRDRGF0ZSgpO1xuXG4gICAgaWYgKG1vbnRoIDwgMTApIHtcbiAgICAgIG1vbnRoID0gXCIwXCIgKyBtb250aDtcbiAgICB9XG5cbiAgICBpZiAoZGF5IDwgMTApIHtcbiAgICAgIGRheSA9IFwiMFwiICsgZGF5O1xuICAgIH1cblxuICAgIHJldHVybiB5ZWFyICsgbW9udGggKyBkYXk7XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGdldEZpbGVGb3JtYXQodXJsKSB7XG4gICAgdmFyIGhhc1BhcmFtcyA9IC9bPyMmXS8sXG4gICAgICBzdHI7XG5cbiAgICBpZiAoIXVybCB8fCB0eXBlb2YgdXJsICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBzdHIgPSB1cmwuc3Vic3RyKHVybC5sYXN0SW5kZXhPZihcIi5cIikgKyAxKTtcblxuICAgIC8vIGRvbid0IGluY2x1ZGUgYW55IHBhcmFtcyBhZnRlciB0aGUgZmlsZW5hbWVcbiAgICBpZiAoaGFzUGFyYW1zLnRlc3Qoc3RyKSkge1xuICAgICAgc3RyID0gc3RyLnN1YnN0cigwICwoc3RyLmluZGV4T2YoXCI/XCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIj9cIikgOiBzdHIubGVuZ3RoKTtcblxuICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAoc3RyLmluZGV4T2YoXCIjXCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIiNcIikgOiBzdHIubGVuZ3RoKTtcblxuICAgICAgc3RyID0gc3RyLnN1YnN0cigwLCAoc3RyLmluZGV4T2YoXCImXCIpICE9PSAtMSkgPyBzdHIuaW5kZXhPZihcIiZcIikgOiBzdHIubGVuZ3RoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3RyLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnNlcnREYXRhKHBhcmFtcykge1xuICAgIHZhciBCQVNFX0lOU0VSVF9TQ0hFTUEgPSB7XG4gICAgICBcImtpbmRcIjogXCJiaWdxdWVyeSN0YWJsZURhdGFJbnNlcnRBbGxSZXF1ZXN0XCIsXG4gICAgICBcInNraXBJbnZhbGlkUm93c1wiOiBmYWxzZSxcbiAgICAgIFwiaWdub3JlVW5rbm93blZhbHVlc1wiOiBmYWxzZSxcbiAgICAgIFwidGVtcGxhdGVTdWZmaXhcIjogZ2V0U3VmZml4KCksXG4gICAgICBcInJvd3NcIjogW3tcbiAgICAgICAgXCJpbnNlcnRJZFwiOiBcIlwiXG4gICAgICB9XVxuICAgIH0sXG4gICAgZGF0YSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoQkFTRV9JTlNFUlRfU0NIRU1BKSk7XG5cbiAgICBkYXRhLnJvd3NbMF0uaW5zZXJ0SWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMikudG9VcHBlckNhc2UoKTtcbiAgICBkYXRhLnJvd3NbMF0uanNvbiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gICAgZGF0YS5yb3dzWzBdLmpzb24udHMgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ0V2ZW50KHRhYmxlLCBwYXJhbXMpIHtcbiAgICBnZXRFdmVudFBhcmFtcyhwYXJhbXMsIGZ1bmN0aW9uKGpzb24pIHtcbiAgICAgIGlmIChqc29uICE9PSBudWxsKSB7XG4gICAgICAgIFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlci5sb2codGFibGUsIGpzb24pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyogU2V0IHRoZSBDb21wYW55IGFuZCBEaXNwbGF5IElEcy4gKi9cbiAgZnVuY3Rpb24gc2V0SWRzKGNvbXBhbnksIGRpc3BsYXkpIHtcbiAgICBjb21wYW55SWQgPSBjb21wYW55O1xuICAgIGRpc3BsYXlJZCA9IGRpc3BsYXk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiZ2V0SW5zZXJ0RGF0YVwiOiBnZXRJbnNlcnREYXRhLFxuICAgIFwiZ2V0RmlsZUZvcm1hdFwiOiBnZXRGaWxlRm9ybWF0LFxuICAgIFwibG9nRXZlbnRcIjogbG9nRXZlbnQsXG4gICAgXCJzZXRJZHNcIjogc2V0SWRzXG4gIH07XG59KSgpO1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5Mb2dnZXIgPSAoZnVuY3Rpb24odXRpbHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIFJFRlJFU0hfVVJMID0gXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9vYXV0aDIvdjMvdG9rZW4/Y2xpZW50X2lkPVwiICsgV0lER0VUX0NPTU1PTl9DT05GSUcuTE9HR0VSX0NMSUVOVF9JRCArXG4gICAgICBcIiZjbGllbnRfc2VjcmV0PVwiICsgV0lER0VUX0NPTU1PTl9DT05GSUcuTE9HR0VSX0NMSUVOVF9TRUNSRVQgK1xuICAgICAgXCImcmVmcmVzaF90b2tlbj1cIiArIFdJREdFVF9DT01NT05fQ09ORklHLkxPR0dFUl9SRUZSRVNIX1RPS0VOICtcbiAgICAgIFwiJmdyYW50X3R5cGU9cmVmcmVzaF90b2tlblwiO1xuXG4gIHZhciBzZXJ2aWNlVXJsID0gXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9iaWdxdWVyeS92Mi9wcm9qZWN0cy9jbGllbnQtc2lkZS1ldmVudHMvZGF0YXNldHMvV2lkZ2V0X0V2ZW50cy90YWJsZXMvVEFCTEVfSUQvaW5zZXJ0QWxsXCIsXG4gICAgdGhyb3R0bGUgPSBmYWxzZSxcbiAgICB0aHJvdHRsZURlbGF5ID0gMTAwMCxcbiAgICBsYXN0RXZlbnQgPSBcIlwiLFxuICAgIHJlZnJlc2hEYXRlID0gMCxcbiAgICB0b2tlbiA9IFwiXCI7XG5cbiAgLypcbiAgICogIFByaXZhdGUgTWV0aG9kc1xuICAgKi9cbiAgZnVuY3Rpb24gcmVmcmVzaFRva2VuKGNiKSB7XG4gICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgaWYgKG5ldyBEYXRlKCkgLSByZWZyZXNoRGF0ZSA8IDM1ODAwMDApIHtcbiAgICAgIHJldHVybiBjYih7fSk7XG4gICAgfVxuXG4gICAgeGhyLm9wZW4oXCJQT1NUXCIsIFJFRlJFU0hfVVJMLCB0cnVlKTtcbiAgICB4aHIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcmVzcCA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlKTtcblxuICAgICAgY2IoeyB0b2tlbjogcmVzcC5hY2Nlc3NfdG9rZW4sIHJlZnJlc2hlZEF0OiBuZXcgRGF0ZSgpIH0pO1xuICAgIH07XG5cbiAgICB4aHIuc2VuZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNUaHJvdHRsZWQoZXZlbnQpIHtcbiAgICByZXR1cm4gdGhyb3R0bGUgJiYgKGxhc3RFdmVudCA9PT0gZXZlbnQpO1xuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBsb2codGFibGVOYW1lLCBwYXJhbXMpIHtcbiAgICBpZiAoIXRhYmxlTmFtZSB8fCAhcGFyYW1zIHx8IChwYXJhbXMuaGFzT3duUHJvcGVydHkoXCJldmVudFwiKSAmJiAhcGFyYW1zLmV2ZW50KSB8fFxuICAgICAgKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShcImV2ZW50XCIpICYmIGlzVGhyb3R0bGVkKHBhcmFtcy5ldmVudCkpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhyb3R0bGUgPSB0cnVlO1xuICAgIGxhc3RFdmVudCA9IHBhcmFtcy5ldmVudDtcblxuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgdGhyb3R0bGUgPSBmYWxzZTtcbiAgICB9LCB0aHJvdHRsZURlbGF5KTtcblxuICAgIGZ1bmN0aW9uIGluc2VydFdpdGhUb2tlbihyZWZyZXNoRGF0YSkge1xuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpLFxuICAgICAgICBpbnNlcnREYXRhLCB1cmw7XG5cbiAgICAgIHVybCA9IHNlcnZpY2VVcmwucmVwbGFjZShcIlRBQkxFX0lEXCIsIHRhYmxlTmFtZSk7XG4gICAgICByZWZyZXNoRGF0ZSA9IHJlZnJlc2hEYXRhLnJlZnJlc2hlZEF0IHx8IHJlZnJlc2hEYXRlO1xuICAgICAgdG9rZW4gPSByZWZyZXNoRGF0YS50b2tlbiB8fCB0b2tlbjtcbiAgICAgIGluc2VydERhdGEgPSB1dGlscy5nZXRJbnNlcnREYXRhKHBhcmFtcyk7XG5cbiAgICAgIC8vIEluc2VydCB0aGUgZGF0YS5cbiAgICAgIHhoci5vcGVuKFwiUE9TVFwiLCB1cmwsIHRydWUpO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uXCIpO1xuICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsIFwiQmVhcmVyIFwiICsgdG9rZW4pO1xuXG4gICAgICBpZiAocGFyYW1zLmNiICYmIHR5cGVvZiBwYXJhbXMuY2IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB4aHIub25sb2FkZW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgcGFyYW1zLmNiKHhoci5yZXNwb25zZSk7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHhoci5zZW5kKEpTT04uc3RyaW5naWZ5KGluc2VydERhdGEpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmcmVzaFRva2VuKGluc2VydFdpdGhUb2tlbik7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwibG9nXCI6IGxvZ1xuICB9O1xufSkoUmlzZVZpc2lvbi5Db21tb24uTG9nZ2VyVXRpbHMpO1xudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5VdGlsaXRpZXMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgZnVuY3Rpb24gZ2V0Rm9udENzc1N0eWxlKGNsYXNzTmFtZSwgZm9udE9iaikge1xuICAgIHZhciBmYW1pbHkgPSBcImZvbnQtZmFtaWx5OlwiICsgZm9udE9iai5mb250LmZhbWlseSArIFwiOyBcIjtcbiAgICB2YXIgY29sb3IgPSBcImNvbG9yOiBcIiArIChmb250T2JqLmNvbG9yID8gZm9udE9iai5jb2xvciA6IGZvbnRPYmouZm9yZWNvbG9yKSArIFwiOyBcIjtcbiAgICB2YXIgc2l6ZSA9IFwiZm9udC1zaXplOiBcIiArIChmb250T2JqLnNpemUuaW5kZXhPZihcInB4XCIpID09PSAtMSA/IGZvbnRPYmouc2l6ZSArIFwicHg7IFwiIDogZm9udE9iai5zaXplICsgXCI7IFwiKTtcbiAgICB2YXIgd2VpZ2h0ID0gXCJmb250LXdlaWdodDogXCIgKyAoZm9udE9iai5ib2xkID8gXCJib2xkXCIgOiBcIm5vcm1hbFwiKSArIFwiOyBcIjtcbiAgICB2YXIgaXRhbGljID0gXCJmb250LXN0eWxlOiBcIiArIChmb250T2JqLml0YWxpYyA/IFwiaXRhbGljXCIgOiBcIm5vcm1hbFwiKSArIFwiOyBcIjtcbiAgICB2YXIgdW5kZXJsaW5lID0gXCJ0ZXh0LWRlY29yYXRpb246IFwiICsgKGZvbnRPYmoudW5kZXJsaW5lID8gXCJ1bmRlcmxpbmVcIiA6IFwibm9uZVwiKSArIFwiOyBcIjtcbiAgICB2YXIgaGlnaGxpZ2h0ID0gXCJiYWNrZ3JvdW5kLWNvbG9yOiBcIiArIChmb250T2JqLmhpZ2hsaWdodENvbG9yID8gZm9udE9iai5oaWdobGlnaHRDb2xvciA6IGZvbnRPYmouYmFja2NvbG9yKSArIFwiOyBcIjtcblxuICAgIHJldHVybiBcIi5cIiArIGNsYXNzTmFtZSArIFwiIHtcIiArIGZhbWlseSArIGNvbG9yICsgc2l6ZSArIHdlaWdodCArIGl0YWxpYyArIHVuZGVybGluZSArIGhpZ2hsaWdodCArIFwifVwiO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQ1NTUnVsZXMocnVsZXMpIHtcbiAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gcnVsZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHN0eWxlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHJ1bGVzW2ldKSk7XG4gICAgfVxuXG4gICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gIH1cblxuICAvKlxuICAgKiBMb2FkcyBHb29nbGUgb3IgY3VzdG9tIGZvbnRzLCBpZiBhcHBsaWNhYmxlLCBhbmQgaW5qZWN0cyBDU1Mgc3R5bGVzXG4gICAqIGludG8gdGhlIGhlYWQgb2YgdGhlIGRvY3VtZW50LlxuICAgKlxuICAgKiBAcGFyYW0gICAgYXJyYXkgICAgc2V0dGluZ3MgICAgQXJyYXkgb2Ygb2JqZWN0cyB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybTpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbe1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcImRhdGVcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZm9udFNldHRpbmdcIjoge1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvbGQ6IHRydWUsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6IFwiYmxhY2tcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250OiB7XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYW1pbHk6IFwiQWtyb25pbVwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udDogXCJBa3JvbmltXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIlZlcmRhbmFcIixcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiZ29vZ2xlXCIsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IFwiaHR0cDovL2N1c3RvbS1mb250LXVybFwiXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRDb2xvcjogXCJ0cmFuc3BhcmVudFwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0YWxpYzogZmFsc2UsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogXCIyMFwiLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybGluZTogZmFsc2VcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxuICAgKlxuICAgKiAgICAgICAgICAgb2JqZWN0ICAgY29udGVudERvYyAgICBEb2N1bWVudCBvYmplY3QgaW50byB3aGljaCB0byBpbmplY3Qgc3R5bGVzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBsb2FkIGZvbnRzIChvcHRpb25hbCkuXG4gICAqL1xuICBmdW5jdGlvbiBsb2FkRm9udHMoc2V0dGluZ3MsIGNvbnRlbnREb2MpIHtcbiAgICBzZXR0aW5ncy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtLmNsYXNzICYmIGl0ZW0uZm9udFNldHRpbmcpIHtcbiAgICAgICAgYWRkQ1NTUnVsZXMoWyBnZXRGb250Q3NzU3R5bGUoaXRlbS5jbGFzcywgaXRlbS5mb250U2V0dGluZykgXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtLmZvbnRTZXR0aW5nLmZvbnQudHlwZSkge1xuICAgICAgICBpZiAoaXRlbS5mb250U2V0dGluZy5mb250LnR5cGUgPT09IFwiY3VzdG9tXCIgJiYgaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSAmJlxuICAgICAgICAgIGl0ZW0uZm9udFNldHRpbmcuZm9udC51cmwpIHtcbiAgICAgICAgICBsb2FkQ3VzdG9tRm9udChpdGVtLmZvbnRTZXR0aW5nLmZvbnQuZmFtaWx5LCBpdGVtLmZvbnRTZXR0aW5nLmZvbnQudXJsLFxuICAgICAgICAgICAgY29udGVudERvYyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXRlbS5mb250U2V0dGluZy5mb250LnR5cGUgPT09IFwiZ29vZ2xlXCIgJiYgaXRlbS5mb250U2V0dGluZy5mb250LmZhbWlseSkge1xuICAgICAgICAgIGxvYWRHb29nbGVGb250KGl0ZW0uZm9udFNldHRpbmcuZm9udC5mYW1pbHksIGNvbnRlbnREb2MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkQ3VzdG9tRm9udChmYW1pbHksIHVybCwgY29udGVudERvYykge1xuICAgIHZhciBzaGVldCA9IG51bGw7XG4gICAgdmFyIHJ1bGUgPSBcImZvbnQtZmFtaWx5OiBcIiArIGZhbWlseSArIFwiOyBcIiArIFwic3JjOiB1cmwoJ1wiICsgdXJsICsgXCInKTtcIjtcblxuICAgIGNvbnRlbnREb2MgPSBjb250ZW50RG9jIHx8IGRvY3VtZW50O1xuXG4gICAgc2hlZXQgPSBjb250ZW50RG9jLnN0eWxlU2hlZXRzWzBdO1xuXG4gICAgaWYgKHNoZWV0ICE9PSBudWxsKSB7XG4gICAgICBzaGVldC5hZGRSdWxlKFwiQGZvbnQtZmFjZVwiLCBydWxlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBsb2FkR29vZ2xlRm9udChmYW1pbHksIGNvbnRlbnREb2MpIHtcbiAgICB2YXIgc3R5bGVzaGVldCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJsaW5rXCIpLFxuICAgICAgZmFtaWx5VmFsO1xuXG4gICAgY29udGVudERvYyA9IGNvbnRlbnREb2MgfHwgZG9jdW1lbnQ7XG5cbiAgICBzdHlsZXNoZWV0LnNldEF0dHJpYnV0ZShcInJlbFwiLCBcInN0eWxlc2hlZXRcIik7XG4gICAgc3R5bGVzaGVldC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsIFwidGV4dC9jc3NcIik7XG5cbiAgICAvLyBzcGxpdCB0byBhY2NvdW50IGZvciBmYW1pbHkgdmFsdWUgY29udGFpbmluZyBhIGZhbGxiYWNrIChlZy4gQWxhZGluLHNhbnMtc2VyaWYpXG4gICAgZmFtaWx5VmFsID0gZmFtaWx5LnNwbGl0KFwiLFwiKVswXTtcblxuICAgIC8vIHN0cmlwIHBvc3NpYmxlIHNpbmdsZSBxdW90ZXNcbiAgICBmYW1pbHlWYWwgPSBmYW1pbHlWYWwucmVwbGFjZSgvJy9nLCBcIlwiKTtcblxuICAgIHN0eWxlc2hlZXQuc2V0QXR0cmlidXRlKFwiaHJlZlwiLCBcImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzP2ZhbWlseT1cIiArIGZhbWlseVZhbCk7XG5cbiAgICBpZiAoc3R5bGVzaGVldCAhPT0gbnVsbCkge1xuICAgICAgY29udGVudERvYy5nZXRFbGVtZW50c0J5VGFnTmFtZShcImhlYWRcIilbMF0uYXBwZW5kQ2hpbGQoc3R5bGVzaGVldCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJlbG9hZEltYWdlcyh1cmxzKSB7XG4gICAgdmFyIGxlbmd0aCA9IHVybHMubGVuZ3RoLFxuICAgICAgaW1hZ2VzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBpbWFnZXNbaV0gPSBuZXcgSW1hZ2UoKTtcbiAgICAgIGltYWdlc1tpXS5zcmMgPSB1cmxzW2ldO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFF1ZXJ5UGFyYW1ldGVyKHBhcmFtKSB7XG4gICAgdmFyIHF1ZXJ5ID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSksXG4gICAgICB2YXJzID0gcXVlcnkuc3BsaXQoXCImXCIpLFxuICAgICAgcGFpcjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFpciA9IHZhcnNbaV0uc3BsaXQoXCI9XCIpO1xuXG4gICAgICBpZiAocGFpclswXSA9PSBwYXJhbSkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBcIlwiO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmlzZUNhY2hlRXJyb3JNZXNzYWdlKHN0YXR1c0NvZGUpIHtcbiAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJcIjtcbiAgICBzd2l0Y2ggKHN0YXR1c0NvZGUpIHtcbiAgICAgIGNhc2UgNDA0OlxuICAgICAgICBlcnJvck1lc3NhZ2UgPSBcIlRoZSBmaWxlIGRvZXMgbm90IGV4aXN0IG9yIGNhbm5vdCBiZSBhY2Nlc3NlZC5cIjtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDUwNzpcbiAgICAgICAgZXJyb3JNZXNzYWdlID0gXCJUaGVyZSBpcyBub3QgZW5vdWdoIGRpc2sgc3BhY2UgdG8gc2F2ZSB0aGUgZmlsZSBvbiBSaXNlIENhY2hlLlwiO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGVycm9yTWVzc2FnZSA9IFwiVGhlcmUgd2FzIGEgcHJvYmxlbSByZXRyaWV2aW5nIHRoZSBmaWxlIGZyb20gUmlzZSBDYWNoZS5cIjtcbiAgICB9XG5cbiAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRRdWVyeVBhcmFtZXRlcjogZ2V0UXVlcnlQYXJhbWV0ZXIsXG4gICAgZ2V0Rm9udENzc1N0eWxlOiAgZ2V0Rm9udENzc1N0eWxlLFxuICAgIGFkZENTU1J1bGVzOiAgICAgIGFkZENTU1J1bGVzLFxuICAgIGxvYWRGb250czogICAgICAgIGxvYWRGb250cyxcbiAgICBsb2FkQ3VzdG9tRm9udDogICBsb2FkQ3VzdG9tRm9udCxcbiAgICBsb2FkR29vZ2xlRm9udDogICBsb2FkR29vZ2xlRm9udCxcbiAgICBwcmVsb2FkSW1hZ2VzOiAgICBwcmVsb2FkSW1hZ2VzLFxuICAgIGdldFJpc2VDYWNoZUVycm9yTWVzc2FnZTogZ2V0UmlzZUNhY2hlRXJyb3JNZXNzYWdlXG4gIH07XG59KSgpO1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5SaXNlQ2FjaGUgPSAoZnVuY3Rpb24gKCkge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgQkFTRV9DQUNIRV9VUkwgPSBcIi8vbG9jYWxob3N0Ojk0OTQvXCI7XG5cbiAgdmFyIF9waW5nUmVjZWl2ZWQgPSBmYWxzZSxcbiAgICBfaXNDYWNoZVJ1bm5pbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBwaW5nKGNhbGxiYWNrKSB7XG4gICAgdmFyIHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIGlmICghY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICByLm9wZW4oXCJHRVRcIiwgQkFTRV9DQUNIRV9VUkwgKyBcInBpbmc/Y2FsbGJhY2s9X1wiLCB0cnVlKTtcbiAgICByLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG4gICAgICAgICAgLy8gc2F2ZSB0aGlzIHJlc3VsdCBmb3IgdXNlIGluIGdldEZpbGUoKVxuICAgICAgICAgIF9waW5nUmVjZWl2ZWQgPSB0cnVlO1xuXG4gICAgICAgICAgaWYoci5zdGF0dXMgPT09IDIwMCl7XG4gICAgICAgICAgICBfaXNDYWNoZVJ1bm5pbmcgPSB0cnVlO1xuXG4gICAgICAgICAgICBjYWxsYmFjayh0cnVlLCByLnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXCJSaXNlIENhY2hlIGlzIG5vdCBydW5uaW5nXCIpO1xuICAgICAgICAgICAgX2lzQ2FjaGVSdW5uaW5nID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlLCBudWxsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoXCJDYXVnaHQgZXhjZXB0aW9uOiBcIiwgZS5kZXNjcmlwdGlvbik7XG4gICAgICB9XG5cbiAgICB9O1xuICAgIHIuc2VuZCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmlsZShmaWxlVXJsLCBjYWxsYmFjaywgbm9jYWNoZWJ1c3Rlcikge1xuICAgIGlmICghZmlsZVVybCB8fCAhY2FsbGJhY2sgfHwgdHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWxlUmVxdWVzdCgpIHtcbiAgICAgIHZhciB1cmwsIHN0ciwgc2VwYXJhdG9yO1xuXG4gICAgICBpZiAoX2lzQ2FjaGVSdW5uaW5nKSB7XG4gICAgICAgIC8vIGNvbmZpZ3VyZSB1cmwgd2l0aCBjYWNoZWJ1c3RlciBvciBub3RcbiAgICAgICAgdXJsID0gKG5vY2FjaGVidXN0ZXIpID8gQkFTRV9DQUNIRV9VUkwgKyBcIj91cmw9XCIgKyBlbmNvZGVVUklDb21wb25lbnQoZmlsZVVybCkgOlxuICAgICAgICBCQVNFX0NBQ0hFX1VSTCArIFwiY2I9XCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIFwiP3VybD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChmaWxlVXJsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChub2NhY2hlYnVzdGVyKSB7XG4gICAgICAgICAgdXJsID0gZmlsZVVybDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdHIgPSBmaWxlVXJsLnNwbGl0KFwiP1wiKTtcbiAgICAgICAgICBzZXBhcmF0b3IgPSAoc3RyLmxlbmd0aCA9PT0gMSkgPyBcIj9cIiA6IFwiJlwiO1xuICAgICAgICAgIHVybCA9IGZpbGVVcmwgKyBzZXBhcmF0b3IgKyBcImNiPVwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWFrZVJlcXVlc3QoXCJIRUFEXCIsIHVybCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZVJlcXVlc3QobWV0aG9kLCB1cmwpIHtcbiAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKSxcbiAgICAgICAgcmVxdWVzdCA9IHtcbiAgICAgICAgICB4aHI6IHhocixcbiAgICAgICAgICB1cmw6IHVybFxuICAgICAgICB9O1xuXG4gICAgICBpZiAoX2lzQ2FjaGVSdW5uaW5nKSB7XG4gICAgICAgIHhoci5vcGVuKG1ldGhvZCwgdXJsLCB0cnVlKTtcblxuICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRlbmRcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHZhciBzdGF0dXMgPSB4aHIuc3RhdHVzIHx8IDA7XG5cbiAgICAgICAgICBpZiAoc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBTZXJ2ZXIgbWF5IG5vdCBzdXBwb3J0IEhFQUQgcmVxdWVzdC4gRmFsbGJhY2sgdG8gYSBHRVQgcmVxdWVzdC5cbiAgICAgICAgICAgIGlmIChtZXRob2QgPT09IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICAgIG1ha2VSZXF1ZXN0KFwiR0VUXCIsIHVybCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjYWxsYmFjayhyZXF1ZXN0LCBuZXcgRXJyb3IoXCJUaGUgcmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBzdGF0dXMpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHhoci5zZW5kKCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgLy8gUmlzZSBDYWNoZSBpcyBub3QgcnVubmluZyAocHJldmlldyksIHNraXAgSEVBRCByZXF1ZXN0IGFuZCBleGVjdXRlIGNhbGxiYWNrIGltbWVkaWF0ZWx5XG4gICAgICAgIGNhbGxiYWNrKHJlcXVlc3QpO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgaWYgKCFfcGluZ1JlY2VpdmVkKSB7XG4gICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICByZXR1cm4gdGhpcy5waW5nKGZpbGVSZXF1ZXN0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZpbGVSZXF1ZXN0KCk7XG4gICAgfVxuXG4gIH1cblxuICBmdW5jdGlvbiBpc1Jpc2VDYWNoZVJ1bm5pbmcoY2FsbGJhY2spIHtcbiAgICBpZiAoIWNhbGxiYWNrIHx8IHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFfcGluZ1JlY2VpdmVkKSB7XG4gICAgICAvKiBqc2hpbnQgdmFsaWR0aGlzOiB0cnVlICovXG4gICAgICByZXR1cm4gdGhpcy5waW5nKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2FsbGJhY2soX2lzQ2FjaGVSdW5uaW5nKTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhfaXNDYWNoZVJ1bm5pbmcpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZ2V0RmlsZTogZ2V0RmlsZSxcbiAgICBpc1Jpc2VDYWNoZVJ1bm5pbmc6IGlzUmlzZUNhY2hlUnVubmluZyxcbiAgICBwaW5nOiBwaW5nXG4gIH07XG5cbn0pKCk7XG5cbi8qIGV4cG9ydGVkIGNvbmZpZyAqL1xuaWYgKHR5cGVvZiBhbmd1bGFyICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGFuZ3VsYXIubW9kdWxlKFwicmlzZXZpc2lvbi5jb21tb24uaTE4bi5jb25maWdcIiwgW10pXG4gICAgLmNvbnN0YW50KFwiTE9DQUxFU19QUkVGSVhcIiwgXCJsb2NhbGVzL3RyYW5zbGF0aW9uX1wiKVxuICAgIC5jb25zdGFudChcIkxPQ0FMRVNfU1VGSVhcIiwgXCIuanNvblwiKTtcbn1cblxudmFyICBjb25maWcgPSB7XG4gIFNLSU46IFwic2tpbi9SVlNraW4ueG1sXCIsXG4gIFNUT1JBR0VfRU5WOiBcInByb2RcIlxufTtcblxuLyogZ2xvYmFsIGdhZGdldHMsIGNvbmZpZywgXyAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLlZpZGVvID0ge307XG5cblJpc2VWaXNpb24uVmlkZW8gPSAoZnVuY3Rpb24gKHdpbmRvdywgZ2FkZ2V0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgX2FkZGl0aW9uYWxQYXJhbXMsIF9tb2RlO1xuXG4gIHZhciBfaXNMb2FkaW5nID0gdHJ1ZSxcbiAgICBfY29uZmlnRGV0YWlscyA9IG51bGw7XG5cbiAgdmFyIF9wcmVmcyA9IG51bGwsXG4gICAgX3N0b3JhZ2UgPSBudWxsLFxuICAgIF9ub25TdG9yYWdlID0gbnVsbCxcbiAgICBfbWVzc2FnZSA9IG51bGwsXG4gICAgX2ZyYW1lQ29udHJvbGxlciA9IG51bGwsXG4gICAgX3dpbmRvd0NvbnRyb2xsZXIgPSBudWxsO1xuXG4gIHZhciBfdmlld2VyUGF1c2VkID0gdHJ1ZTtcblxuICB2YXIgX3Jlc3VtZSA9IHRydWU7XG5cbiAgdmFyIF9jdXJyZW50RnJhbWUgPSAwO1xuXG4gIHZhciBfY3VycmVudEZpbGVzID0gW107XG5cbiAgdmFyIF9jdXJyZW50UGxheWxpc3RJbmRleCA9IG51bGw7XG5cbiAgdmFyIF9lcnJvckxvZyA9IG51bGwsXG4gICAgX2Vycm9yVGltZXIgPSBudWxsLFxuICAgIF9lcnJvckZsYWcgPSBmYWxzZTtcblxuICB2YXIgX3N0b3JhZ2VFcnJvckZsYWcgPSBmYWxzZTtcblxuICAvKlxuICAgKiAgUHJpdmF0ZSBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBfZG9uZSgpIHtcbiAgICBnYWRnZXRzLnJwYy5jYWxsKFwiXCIsIFwicnNldmVudF9kb25lXCIsIG51bGwsIF9wcmVmcy5nZXRTdHJpbmcoXCJpZFwiKSk7XG5cbiAgICAvLyBBbnkgZXJyb3JzIG5lZWQgdG8gYmUgbG9nZ2VkIGJlZm9yZSB0aGUgZG9uZSBldmVudC5cbiAgICBpZiAoX2Vycm9yTG9nICE9PSBudWxsKSB7XG4gICAgICBsb2dFdmVudChfZXJyb3JMb2csIHRydWUpO1xuICAgIH1cblxuICAgIGxvZ0V2ZW50KHsgXCJldmVudFwiOiBcImRvbmVcIiB9LCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBfcmVhZHkoKSB7XG4gICAgZ2FkZ2V0cy5ycGMuY2FsbChcIlwiLCBcInJzZXZlbnRfcmVhZHlcIiwgbnVsbCwgX3ByZWZzLmdldFN0cmluZyhcImlkXCIpLFxuICAgICAgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG4gIH1cblxuICBmdW5jdGlvbiBfY2xlYXJFcnJvclRpbWVyKCkge1xuICAgIGNsZWFyVGltZW91dChfZXJyb3JUaW1lcik7XG4gICAgX2Vycm9yVGltZXIgPSBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gX3N0YXJ0RXJyb3JUaW1lcigpIHtcbiAgICBfY2xlYXJFcnJvclRpbWVyKCk7XG5cbiAgICBfZXJyb3JUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgLy8gbm90aWZ5IFZpZXdlciB3aWRnZXQgaXMgZG9uZVxuICAgICAgX2RvbmUoKTtcbiAgICB9LCA1MDAwKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9nZXRDdXJyZW50RmlsZSgpIHtcbiAgICBpZiAoX2N1cnJlbnRGaWxlcyAmJiBfY3VycmVudEZpbGVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChfbW9kZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgICAgcmV0dXJuIF9jdXJyZW50RmlsZXNbMF07XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfbW9kZSA9PT0gXCJmb2xkZXJcIikge1xuICAgICAgICAvLyByZXRyaWV2ZSB0aGUgY3VycmVudGx5IHBsYXllZCBmaWxlXG4gICAgICAgIGlmIChfY3VycmVudFBsYXlsaXN0SW5kZXgpIHtcbiAgICAgICAgICByZXR1cm4gX2N1cnJlbnRGaWxlc1tfY3VycmVudFBsYXlsaXN0SW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGhhc1N0b3JhZ2VFcnJvcigpIHtcbiAgICByZXR1cm4gX3N0b3JhZ2VFcnJvckZsYWc7XG4gIH1cblxuICBmdW5jdGlvbiBzaG93RXJyb3IobWVzc2FnZSwgaXNTdG9yYWdlRXJyb3IpIHtcbiAgICBfZXJyb3JGbGFnID0gdHJ1ZTtcbiAgICBfc3RvcmFnZUVycm9yRmxhZyA9IHR5cGVvZiBpc1N0b3JhZ2VFcnJvciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgIF9tZXNzYWdlLnNob3cobWVzc2FnZSk7XG5cbiAgICBfY3VycmVudFBsYXlsaXN0SW5kZXggPSBudWxsO1xuICAgIF9mcmFtZUNvbnRyb2xsZXIucmVtb3ZlKF9jdXJyZW50RnJhbWUsIF93aW5kb3dDb250cm9sbGVyLmdldEZyYW1lT3JpZ2luKCksIGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIGlmIFdpZGdldCBpcyBwbGF5aW5nIHJpZ2h0IG5vdywgcnVuIHRoZSB0aW1lclxuICAgICAgaWYgKCFfdmlld2VyUGF1c2VkKSB7XG4gICAgICAgIF9zdGFydEVycm9yVGltZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvZ0V2ZW50KHBhcmFtcywgaXNFcnJvcikge1xuICAgIGlmIChpc0Vycm9yKSB7XG4gICAgICBfZXJyb3JMb2cgPSBwYXJhbXM7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMuZmlsZV91cmwpIHtcbiAgICAgIHBhcmFtcy5maWxlX3VybCA9IF9nZXRDdXJyZW50RmlsZSgpO1xuICAgIH1cblxuICAgIFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlclV0aWxzLmxvZ0V2ZW50KGdldFRhYmxlTmFtZSgpLCBwYXJhbXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gb25GaWxlSW5pdCh1cmxzKSB7XG4gICAgaWYgKF9tb2RlID09PSBcImZpbGVcIikge1xuICAgICAgLy8gdXJscyB2YWx1ZSB3aWxsIGJlIGEgc3RyaW5nXG4gICAgICBfY3VycmVudEZpbGVzWzBdID0gdXJscztcbiAgICB9IGVsc2UgaWYgKF9tb2RlID09PSBcImZvbGRlclwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYW4gYXJyYXlcbiAgICAgIF9jdXJyZW50RmlsZXMgPSB1cmxzO1xuICAgIH1cblxuICAgIF9tZXNzYWdlLmhpZGUoKTtcblxuICAgIGlmICghX3ZpZXdlclBhdXNlZCkge1xuICAgICAgcGxheSgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uRmlsZVJlZnJlc2godXJscykge1xuICAgIGlmIChfbW9kZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgIC8vIHVybHMgdmFsdWUgd2lsbCBiZSBhIHN0cmluZyBvZiBvbmUgdXJsXG4gICAgICBfY3VycmVudEZpbGVzWzBdID0gdXJscztcbiAgICB9IGVsc2UgaWYgKF9tb2RlID09PSBcImZvbGRlclwiKSB7XG4gICAgICAvLyB1cmxzIHZhbHVlIHdpbGwgYmUgYW4gYXJyYXkgb2YgdXJsc1xuICAgICAgX2N1cnJlbnRGaWxlcyA9IHVybHM7XG4gICAgfVxuXG4gICAgLy8gaW4gY2FzZSByZWZyZXNoZWQgZmlsZSBmaXhlcyBhbiBlcnJvciB3aXRoIHByZXZpb3VzIGZpbGUsIGVuc3VyZSBmbGFnIGlzIHJlbW92ZWQgc28gcGxheWJhY2sgaXMgYXR0ZW1wdGVkIGFnYWluXG4gICAgX2Vycm9yRmxhZyA9IGZhbHNlO1xuICAgIF9zdG9yYWdlRXJyb3JGbGFnID0gZmFsc2U7XG4gICAgX2Vycm9yTG9nID0gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgIHZhciBmcmFtZU9iaiA9IF9mcmFtZUNvbnRyb2xsZXIuZ2V0RnJhbWVPYmplY3QoX2N1cnJlbnRGcmFtZSk7XG5cbiAgICBfdmlld2VyUGF1c2VkID0gdHJ1ZTtcblxuICAgIC8vIGluIGNhc2UgZXJyb3IgdGltZXIgc3RpbGwgcnVubmluZyAobm8gY29uZGl0aW9uYWwgY2hlY2sgb24gZXJyb3JGbGFnLCBpdCBtYXkgaGF2ZSBiZWVuIHJlc2V0IGluIG9uRmlsZVJlZnJlc2gpXG4gICAgX2NsZWFyRXJyb3JUaW1lcigpO1xuXG4gICAgaWYgKGZyYW1lT2JqKSB7XG4gICAgICAvLyBEZXN0cm95IHBsYXllciBpZnJhbWUuXG4gICAgICBpZiAoIV9yZXN1bWUpIHtcbiAgICAgICAgX2N1cnJlbnRQbGF5bGlzdEluZGV4ID0gbnVsbDtcbiAgICAgICAgX2ZyYW1lQ29udHJvbGxlci5yZW1vdmUoX2N1cnJlbnRGcmFtZSwgX3dpbmRvd0NvbnRyb2xsZXIuZ2V0RnJhbWVPcmlnaW4oKSk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgZnJhbWVPYmoucG9zdE1lc3NhZ2Uoe2V2ZW50OiBcInBhdXNlXCJ9LCBfd2luZG93Q29udHJvbGxlci5nZXRGcmFtZU9yaWdpbigpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIHZhciBsb2dQYXJhbXMgPSB7fSxcbiAgICAgIGZyYW1lT2JqID0gX2ZyYW1lQ29udHJvbGxlci5nZXRGcmFtZU9iamVjdChfY3VycmVudEZyYW1lKSxcbiAgICAgIHNraW4sIGh0bWw7XG5cbiAgICBpZiAoX2lzTG9hZGluZykge1xuICAgICAgX2lzTG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAvLyBMb2cgY29uZmlndXJhdGlvbiBldmVudC5cbiAgICAgIGxvZ1BhcmFtcy5ldmVudCA9IFwiY29uZmlndXJhdGlvblwiO1xuICAgICAgbG9nUGFyYW1zLmV2ZW50X2RldGFpbHMgPSBfY29uZmlnRGV0YWlscztcbiAgICAgIGxvZ0V2ZW50KGxvZ1BhcmFtcywgZmFsc2UpO1xuICAgIH1cblxuICAgIF92aWV3ZXJQYXVzZWQgPSBmYWxzZTtcblxuICAgIGxvZ0V2ZW50KHsgXCJldmVudFwiOiBcInBsYXlcIiB9LCBmYWxzZSk7XG5cbiAgICBpZiAoX2Vycm9yRmxhZykge1xuICAgICAgX3N0YXJ0RXJyb3JUaW1lcigpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChmcmFtZU9iaikge1xuICAgICAgZnJhbWVPYmoucG9zdE1lc3NhZ2Uoe2V2ZW50OiBcInBsYXlcIn0sIF93aW5kb3dDb250cm9sbGVyLmdldEZyYW1lT3JpZ2luKCkpO1xuICAgIH0gZWxzZSB7XG5cbiAgICAgIGlmIChfY3VycmVudEZpbGVzICYmIF9jdXJyZW50RmlsZXMubGVuZ3RoID4gMCkge1xuXG4gICAgICAgIFJpc2VWaXNpb24uQ29tbW9uLlJpc2VDYWNoZS5pc1Jpc2VDYWNoZVJ1bm5pbmcoZnVuY3Rpb24gKGlzUnVubmluZykge1xuICAgICAgICAgIHNraW4gPSAoaXNSdW5uaW5nKSA/IFwiP3VybD1cIiArIGVuY29kZVVSSUNvbXBvbmVudChfd2luZG93Q29udHJvbGxlci5nZXRCdWNrZXRQYXRoKCkpICsgY29uZmlnLlNLSU4gOiBjb25maWcuU0tJTjtcblxuICAgICAgICAgIGlmIChfbW9kZSA9PT0gXCJmaWxlXCIpIHtcbiAgICAgICAgICAgIGh0bWwgPSAoaXNSdW5uaW5nKSA/IFwiLy9sb2NhbGhvc3Q6OTQ5NC8/dXJsPVwiICtcbiAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChfd2luZG93Q29udHJvbGxlci5nZXRCdWNrZXRQYXRoKCkpICsgXCJwbGF5ZXItZmlsZS1jYWNoZS5odG1sXCIgOiBcInBsYXllci1maWxlLmh0bWxcIjtcblxuICAgICAgICAgICAgLy8gYWRkIGZyYW1lIGFuZCBjcmVhdGUgdGhlIHBsYXllclxuICAgICAgICAgICAgX2ZyYW1lQ29udHJvbGxlci5hZGQoMCk7XG4gICAgICAgICAgICBfZnJhbWVDb250cm9sbGVyLmNyZWF0ZUZyYW1lUGxheWVyKDAsIF9hZGRpdGlvbmFsUGFyYW1zLCBfY3VycmVudEZpbGVzWzBdLCBza2luLCBodG1sLCBfd2luZG93Q29udHJvbGxlci5nZXRGcmFtZU9yaWdpbigpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoX21vZGUgPT09IFwiZm9sZGVyXCIpIHtcbiAgICAgICAgICAgIGh0bWwgPSAoaXNSdW5uaW5nKSA/IFwiLy9sb2NhbGhvc3Q6OTQ5NC8/dXJsPVwiICtcbiAgICAgICAgICAgIGVuY29kZVVSSUNvbXBvbmVudChfd2luZG93Q29udHJvbGxlci5nZXRCdWNrZXRQYXRoKCkpICsgXCJwbGF5ZXItZm9sZGVyLWNhY2hlLmh0bWxcIiA6IFwicGxheWVyLWZvbGRlci5odG1sXCI7XG5cbiAgICAgICAgICAgIF9mcmFtZUNvbnRyb2xsZXIuYWRkKDApO1xuICAgICAgICAgICAgX2ZyYW1lQ29udHJvbGxlci5jcmVhdGVGcmFtZVBsYXllcigwLCBfYWRkaXRpb25hbFBhcmFtcywgX2N1cnJlbnRGaWxlcywgc2tpbiwgaHRtbCwgX3dpbmRvd0NvbnRyb2xsZXIuZ2V0RnJhbWVPcmlnaW4oKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFRhYmxlTmFtZSgpIHtcbiAgICByZXR1cm4gXCJ2aWRlb19ldmVudHNcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXllckVuZGVkKCkge1xuICAgIF9jdXJyZW50UGxheWxpc3RJbmRleCA9IG51bGw7XG4gICAgX2ZyYW1lQ29udHJvbGxlci5yZW1vdmUoX2N1cnJlbnRGcmFtZSwgX3dpbmRvd0NvbnRyb2xsZXIuZ2V0RnJhbWVPcmlnaW4oKSwgZnVuY3Rpb24gKCkge1xuICAgICAgX2RvbmUoKTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXllclJlYWR5KCkge1xuICAgIHZhciBmcmFtZU9iajtcblxuICAgIC8vIEVuc3VyZXMgbWVzc2FnaW5nIGlzIGhpZGRlbiBmb3Igbm9uLXN0b3JhZ2UgdmlkZW8gZmlsZVxuICAgIF9tZXNzYWdlLmhpZGUoKTtcblxuICAgIGlmICghX3ZpZXdlclBhdXNlZCkge1xuICAgICAgZnJhbWVPYmogPSBfZnJhbWVDb250cm9sbGVyLmdldEZyYW1lT2JqZWN0KF9jdXJyZW50RnJhbWUpO1xuXG4gICAgICBpZiAoZnJhbWVPYmopIHtcbiAgICAgICAgZnJhbWVPYmoucG9zdE1lc3NhZ2Uoe2V2ZW50OiBcInBsYXlcIn0sIF93aW5kb3dDb250cm9sbGVyLmdldEZyYW1lT3JpZ2luKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYXllckl0ZW1DaGFuZ2UoaW5kZXgpIHtcbiAgICBfY3VycmVudFBsYXlsaXN0SW5kZXggPSBpbmRleDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEFkZGl0aW9uYWxQYXJhbXMocGFyYW1zLCBtb2RlKSB7XG4gICAgdmFyIGlzU3RvcmFnZUZpbGU7XG5cbiAgICBfYWRkaXRpb25hbFBhcmFtcyA9IF8uY2xvbmUocGFyYW1zKTtcbiAgICBfbW9kZSA9IG1vZGU7XG4gICAgX3ByZWZzID0gbmV3IGdhZGdldHMuUHJlZnMoKTtcblxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwidmlkZW9Db250YWluZXJcIikuc3R5bGUuaGVpZ2h0ID0gX3ByZWZzLmdldEludChcInJzSFwiKSArIFwicHhcIjtcblxuICAgIF9hZGRpdGlvbmFsUGFyYW1zLndpZHRoID0gX3ByZWZzLmdldEludChcInJzV1wiKTtcbiAgICBfYWRkaXRpb25hbFBhcmFtcy5oZWlnaHQgPSBfcHJlZnMuZ2V0SW50KFwicnNIXCIpO1xuXG4gICAgaWYgKF9hZGRpdGlvbmFsUGFyYW1zLnZpZGVvLmhhc093blByb3BlcnR5KFwicmVzdW1lXCIpKSB7XG4gICAgICBfcmVzdW1lID0gX2FkZGl0aW9uYWxQYXJhbXMudmlkZW8ucmVzdW1lO1xuICAgIH1cblxuICAgIF9tZXNzYWdlID0gbmV3IFJpc2VWaXNpb24uQ29tbW9uLk1lc3NhZ2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWRlb0NvbnRhaW5lclwiKSxcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwibWVzc2FnZUNvbnRhaW5lclwiKSk7XG5cbiAgICAvLyBzaG93IHdhaXQgbWVzc2FnZSB3aGlsZSBTdG9yYWdlIGluaXRpYWxpemVzXG4gICAgX21lc3NhZ2Uuc2hvdyhcIlBsZWFzZSB3YWl0IHdoaWxlIHlvdXIgdmlkZW8gaXMgZG93bmxvYWRlZC5cIik7XG5cbiAgICBfd2luZG93Q29udHJvbGxlciA9IG5ldyBSaXNlVmlzaW9uLlZpZGVvLldpbmRvd0NvbnRyb2xsZXIoKTtcbiAgICBfd2luZG93Q29udHJvbGxlci5pbml0KCk7XG5cbiAgICBfZnJhbWVDb250cm9sbGVyID0gbmV3IFJpc2VWaXNpb24uVmlkZW8uRnJhbWVDb250cm9sbGVyKCk7XG5cbiAgICBpZiAoX21vZGUgPT09IFwiZmlsZVwiKSB7XG4gICAgICBpc1N0b3JhZ2VGaWxlID0gKE9iamVjdC5rZXlzKF9hZGRpdGlvbmFsUGFyYW1zLnN0b3JhZ2UpLmxlbmd0aCAhPT0gMCk7XG5cbiAgICAgIGlmICghaXNTdG9yYWdlRmlsZSkge1xuICAgICAgICBfY29uZmlnRGV0YWlscyA9IFwiY3VzdG9tXCI7XG5cbiAgICAgICAgX25vblN0b3JhZ2UgPSBuZXcgUmlzZVZpc2lvbi5WaWRlby5Ob25TdG9yYWdlKF9hZGRpdGlvbmFsUGFyYW1zKTtcbiAgICAgICAgX25vblN0b3JhZ2UuaW5pdCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2NvbmZpZ0RldGFpbHMgPSBcInN0b3JhZ2UgZmlsZVwiO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhbmQgaW5pdGlhbGl6ZSB0aGUgU3RvcmFnZSBmaWxlIGluc3RhbmNlXG4gICAgICAgIF9zdG9yYWdlID0gbmV3IFJpc2VWaXNpb24uVmlkZW8uU3RvcmFnZUZpbGUoX2FkZGl0aW9uYWxQYXJhbXMpO1xuICAgICAgICBfc3RvcmFnZS5pbml0KCk7XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKF9tb2RlID09PSBcImZvbGRlclwiKSB7XG4gICAgICBfY29uZmlnRGV0YWlscyA9IFwic3RvcmFnZSBmb2xkZXJcIjtcblxuICAgICAgLy8gY3JlYXRlIGFuZCBpbml0aWFsaXplIHRoZSBTdG9yYWdlIGZvbGRlciBpbnN0YW5jZVxuICAgICAgX3N0b3JhZ2UgPSBuZXcgUmlzZVZpc2lvbi5WaWRlby5TdG9yYWdlRm9sZGVyKF9hZGRpdGlvbmFsUGFyYW1zKTtcbiAgICAgIF9zdG9yYWdlLmluaXQoKTtcbiAgICB9XG5cbiAgICBfcmVhZHkoKTtcbiAgfVxuXG4gIC8vIEFuIGVycm9yIG9jY3VycmVkIHdpdGggSlcgUGxheWVyLlxuICBmdW5jdGlvbiBwbGF5ZXJFcnJvcihlcnJvcikge1xuICAgIHZhciBkZXRhaWxzID0gbnVsbCxcbiAgICAgIHBhcmFtcyA9IHt9LFxuICAgICAgbWVzc2FnZSA9IFwiU29ycnksIHRoZXJlIHdhcyBhIHByb2JsZW0gcGxheWluZyB0aGUgdmlkZW8uXCIsXG4gICAgICBNRURJQV9FUlJPUiA9IFwiRXJyb3IgbG9hZGluZyBtZWRpYTogRmlsZSBjb3VsZCBub3QgYmUgcGxheWVkXCIsXG4gICAgICBZT1VUVUJFX0VSUk9SID0gXCJFcnJvciBsb2FkaW5nIFlvdVR1YmU6IFZpZGVvIGNvdWxkIG5vdCBiZSBwbGF5ZWRcIixcbiAgICAgIFBMQVlFUl9FUlJPUiA9IFwiRXJyb3IgbG9hZGluZyBwbGF5ZXI6IE5vIHBsYXlhYmxlIHNvdXJjZXMgZm91bmRcIixcbiAgICAgIEVOQ09ESU5HX01FU1NBR0UgPSBcIlRoZXJlIHdhcyBhIHByb2JsZW0gcGxheWluZyB0aGF0IHZpZGVvLiBJdCBjb3VsZCBiZSB0aGF0IHdlIGRvbid0IFwiICtcbiAgICAgICAgXCJzdXBwb3J0IHRoYXQgZm9ybWF0IG9yIGl0IGlzIG5vdCBlbmNvZGVkIGNvcnJlY3RseS5cIixcbiAgICAgIEZPUk1BVF9NRVNTQUdFID0gXCJUaGUgZm9ybWF0IG9mIHRoYXQgdmlkZW8gaXMgbm90IHN1cHBvcnRlZFwiO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3IudHlwZSAmJiBlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgIGRldGFpbHMgPSBlcnJvci50eXBlICsgXCIgLSBcIiArIGVycm9yLm1lc3NhZ2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChlcnJvci50eXBlKSB7XG4gICAgICAgIGRldGFpbHMgPSBlcnJvci50eXBlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoZXJyb3IubWVzc2FnZSkge1xuICAgICAgICBkZXRhaWxzID0gZXJyb3IubWVzc2FnZTtcbiAgICAgIH1cblxuICAgICAgLy8gRGlzcGxheSBhcHByb3ByaWF0ZSBvbi1zY3JlZW4gZXJyb3IgbWVzc2FnZS5cbiAgICAgIGlmIChlcnJvci5tZXNzYWdlKSB7XG4gICAgICAgIGlmICgoZXJyb3IubWVzc2FnZSA9PT0gTUVESUFfRVJST1IpIHx8IChlcnJvci5tZXNzYWdlID09PSBZT1VUVUJFX0VSUk9SKSkge1xuICAgICAgICAgIG1lc3NhZ2UgPSBFTkNPRElOR19NRVNTQUdFO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVycm9yLm1lc3NhZ2UgPT09IFBMQVlFUl9FUlJPUikge1xuICAgICAgICAgIG1lc3NhZ2UgPSBGT1JNQVRfTUVTU0FHRTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHBhcmFtcy5ldmVudCA9IFwicGxheWVyIGVycm9yXCI7XG4gICAgcGFyYW1zLmV2ZW50X2RldGFpbHMgPSBkZXRhaWxzO1xuXG4gICAgbG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICBzaG93RXJyb3IobWVzc2FnZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzdG9wKCkge1xuICAgIHBhdXNlKCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiZ2V0VGFibGVOYW1lXCI6IGdldFRhYmxlTmFtZSxcbiAgICBcImhhc1N0b3JhZ2VFcnJvclwiOiBoYXNTdG9yYWdlRXJyb3IsXG4gICAgXCJsb2dFdmVudFwiOiBsb2dFdmVudCxcbiAgICBcIm9uRmlsZUluaXRcIjogb25GaWxlSW5pdCxcbiAgICBcIm9uRmlsZVJlZnJlc2hcIjogb25GaWxlUmVmcmVzaCxcbiAgICBcInBhdXNlXCI6IHBhdXNlLFxuICAgIFwicGxheVwiOiBwbGF5LFxuICAgIFwic2V0QWRkaXRpb25hbFBhcmFtc1wiOiBzZXRBZGRpdGlvbmFsUGFyYW1zLFxuICAgIFwic2hvd0Vycm9yXCI6IHNob3dFcnJvcixcbiAgICBcInBsYXllckVuZGVkXCI6IHBsYXllckVuZGVkLFxuICAgIFwicGxheWVyUmVhZHlcIjogcGxheWVyUmVhZHksXG4gICAgXCJwbGF5ZXJFcnJvclwiOiBwbGF5ZXJFcnJvcixcbiAgICBcInBsYXllckl0ZW1DaGFuZ2VcIjogcGxheWVySXRlbUNoYW5nZSxcbiAgICBcInN0b3BcIjogc3RvcFxuICB9O1xuXG59KSh3aW5kb3csIGdhZGdldHMpO1xuXG4vKiBnbG9iYWwgY29uZmlnICovXG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uVmlkZW8gPSBSaXNlVmlzaW9uLlZpZGVvIHx8IHt9O1xuXG5SaXNlVmlzaW9uLlZpZGVvLlN0b3JhZ2VGaWxlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9pbml0aWFsTG9hZCA9IHRydWU7XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBzdG9yYWdlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ2aWRlb1N0b3JhZ2VcIik7XG5cbiAgICBpZiAoIXN0b3JhZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtcmVzcG9uc2VcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgaWYgKGUuZGV0YWlsICYmIGUuZGV0YWlsLnVybCkge1xuXG4gICAgICAgIGlmIChfaW5pdGlhbExvYWQpIHtcbiAgICAgICAgICBfaW5pdGlhbExvYWQgPSBmYWxzZTtcblxuICAgICAgICAgIFJpc2VWaXNpb24uVmlkZW8ub25GaWxlSW5pdChlLmRldGFpbC51cmwpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vIGNoZWNrIGZvciBcImNoYW5nZWRcIiBwcm9wZXJ0eVxuICAgICAgICAgIGlmIChlLmRldGFpbC5oYXNPd25Qcm9wZXJ0eShcImNoYW5nZWRcIikpIHtcbiAgICAgICAgICAgIGlmIChlLmRldGFpbC5jaGFuZ2VkKSB7XG4gICAgICAgICAgICAgIFJpc2VWaXNpb24uVmlkZW8ub25GaWxlUmVmcmVzaChlLmRldGFpbC51cmwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGluIHRoZSBldmVudCBvZiBhIG5ldHdvcmsgZmFpbHVyZSBhbmQgcmVjb3ZlcnksIGNoZWNrIGlmIHRoZSBXaWRnZXQgaXMgaW4gYSBzdGF0ZSBvZiBzdG9yYWdlIGVycm9yXG4gICAgICAgICAgICAgIGlmIChSaXNlVmlzaW9uLlZpZGVvLmhhc1N0b3JhZ2VFcnJvcigpKSB7XG4gICAgICAgICAgICAgICAgLy8gcHJvY2VlZCB3aXRoIHJlZnJlc2ggbG9naWMgc28gdGhlIFdpZGdldCBjYW4gZXZlbnR1YWxseSBwbGF5IHZpZGVvIGFnYWluIGZyb20gYSBuZXR3b3JrIHJlY292ZXJ5XG4gICAgICAgICAgICAgICAgUmlzZVZpc2lvbi5WaWRlby5vbkZpbGVSZWZyZXNoKGUuZGV0YWlsLnVybCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1hcGktZXJyb3JcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcInN0b3JhZ2UgYXBpIGVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcIlJlc3BvbnNlIGNvZGU6IFwiICsgZS5kZXRhaWwuY29kZSArIFwiLCBtZXNzYWdlOiBcIiArIGUuZGV0YWlsLm1lc3NhZ2VcbiAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uVmlkZW8ubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uVmlkZW8uc2hvd0Vycm9yKFwiU29ycnksIHRoZXJlIHdhcyBhIHByb2JsZW0gY29tbXVuaWNhdGluZyB3aXRoIFJpc2UgU3RvcmFnZS5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2Utbm8tZmlsZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0geyBcImV2ZW50XCI6IFwic3RvcmFnZSBmaWxlIG5vdCBmb3VuZFwiLCBcImV2ZW50X2RldGFpbHNcIjogZS5kZXRhaWwgfTtcblxuICAgICAgUmlzZVZpc2lvbi5WaWRlby5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5WaWRlby5zaG93RXJyb3IoXCJUaGUgc2VsZWN0ZWQgdmlkZW8gZG9lcyBub3QgZXhpc3Qgb3IgaGFzIGJlZW4gbW92ZWQgdG8gVHJhc2guXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWZpbGUtdGhyb3R0bGVkXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7IFwiZXZlbnRcIjogXCJzdG9yYWdlIGZpbGUgdGhyb3R0bGVkXCIsIFwiZmlsZV91cmxcIjogZS5kZXRhaWwgfTtcblxuICAgICAgUmlzZVZpc2lvbi5WaWRlby5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5WaWRlby5zaG93RXJyb3IoXCJUaGUgc2VsZWN0ZWQgdmlkZW8gaXMgdGVtcG9yYXJpbHkgdW5hdmFpbGFibGUuXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLXN1YnNjcmlwdGlvbi1leHBpcmVkXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIHBhcmFtcyA9IHsgXCJldmVudFwiOiBcInN0b3JhZ2Ugc3Vic2NyaXB0aW9uIGV4cGlyZWRcIiB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlJpc2UgU3RvcmFnZSBzdWJzY3JpcHRpb24gaXMgbm90IGFjdGl2ZS5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtZXJyb3JcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcInJpc2Ugc3RvcmFnZSBlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJUaGUgcmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZTogXCIgKyBlLmRldGFpbC5lcnJvci5jdXJyZW50VGFyZ2V0LnN0YXR1c1xuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5WaWRlby5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuICAgICAgUmlzZVZpc2lvbi5WaWRlby5zaG93RXJyb3IoXCJTb3JyeSwgdGhlcmUgd2FzIGEgcHJvYmxlbSBjb21tdW5pY2F0aW5nIHdpdGggUmlzZSBTdG9yYWdlLlwiLCB0cnVlKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2UtY2FjaGUtZXJyb3JcIiwgZnVuY3Rpb24oZSkge1xuICAgICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgICAgXCJldmVudFwiOiBcInJpc2UgY2FjaGUgZXJyb3JcIixcbiAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IGUuZGV0YWlsLmVycm9yLm1lc3NhZ2VcbiAgICAgIH07XG5cbiAgICAgIFJpc2VWaXNpb24uVmlkZW8ubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcblxuICAgICAgdmFyIHN0YXR1c0NvZGUgPSAwO1xuICAgICAgLy8gU2hvdyBhIGRpZmZlcmVudCBtZXNzYWdlIGlmIHRoZXJlIGlzIGEgNDA0IGNvbWluZyBmcm9tIHJpc2UgY2FjaGVcbiAgICAgIGlmKGUuZGV0YWlsLmVycm9yLm1lc3NhZ2Upe1xuICAgICAgICBzdGF0dXNDb2RlID0gK2UuZGV0YWlsLmVycm9yLm1lc3NhZ2Uuc3Vic3RyaW5nKGUuZGV0YWlsLmVycm9yLm1lc3NhZ2UuaW5kZXhPZihcIjpcIikrMik7XG4gICAgICB9XG5cbiAgICAgIHZhciBlcnJvck1lc3NhZ2UgPSBSaXNlVmlzaW9uLkNvbW1vbi5VdGlsaXRpZXMuZ2V0UmlzZUNhY2hlRXJyb3JNZXNzYWdlKHN0YXR1c0NvZGUpO1xuICAgICAgUmlzZVZpc2lvbi5WaWRlby5zaG93RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICB9KTtcblxuXG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJmb2xkZXJcIiwgZGF0YS5zdG9yYWdlLmZvbGRlcik7XG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJmaWxlTmFtZVwiLCBkYXRhLnN0b3JhZ2UuZmlsZU5hbWUpO1xuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiY29tcGFueUlkXCIsIGRhdGEuc3RvcmFnZS5jb21wYW55SWQpO1xuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiZW52XCIsIGNvbmZpZy5TVE9SQUdFX0VOVik7XG4gICAgc3RvcmFnZS5nbygpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImluaXRcIjogaW5pdFxuICB9O1xufTtcblxuLyogZ2xvYmFsIGNvbmZpZywgXyAqL1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLlZpZGVvID0gUmlzZVZpc2lvbi5WaWRlbyB8fCB7fTtcblxuUmlzZVZpc2lvbi5WaWRlby5TdG9yYWdlRm9sZGVyID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9pbml0aWFsTG9hZCA9IHRydWU7XG5cbiAgdmFyIF9maWxlcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIF9nZXRVcmxzKCkge1xuICAgIHJldHVybiBfLnBsdWNrKF9maWxlcywgXCJ1cmxcIik7XG4gIH1cblxuICBmdW5jdGlvbiBfZ2V0RXhpc3RpbmdGaWxlKGZpbGUpIHtcbiAgICByZXR1cm4gXy5maW5kKF9maWxlcywgZnVuY3Rpb24gKGYpIHtcbiAgICAgIHJldHVybiBmaWxlLm5hbWUgPT09IGYubmFtZTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF9kZWxldGVGaWxlKGZpbGUpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBfZ2V0RXhpc3RpbmdGaWxlKGZpbGUpO1xuXG4gICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICBfZmlsZXMuc3BsaWNlKF9maWxlcy5pbmRleE9mKGV4aXN0aW5nKSwgMSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gX2NoYW5nZUZpbGUoZmlsZSkge1xuICAgIHZhciBleGlzdGluZyA9IF9nZXRFeGlzdGluZ0ZpbGUoZmlsZSk7XG5cbiAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgIGV4aXN0aW5nLnVybCA9IGZpbGUudXJsO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9hZGRGaWxlKGZpbGUpIHtcbiAgICB2YXIgZXhpc3RpbmcgPSBfZ2V0RXhpc3RpbmdGaWxlKGZpbGUpO1xuXG4gICAgaWYgKCFleGlzdGluZykge1xuICAgICAgLy8gZXh0cmFjdCB0aGUgYWN0dWFsIGZpbGUgbmFtZSBhbmQgc3RvcmUgaW4gbmV3IHByb3BlcnR5IG9uIGZpbGUgb2JqZWN0XG4gICAgICBmaWxlLmZpbGVOYW1lID0gZmlsZS5uYW1lLnNsaWNlKGZpbGUubmFtZS5sYXN0SW5kZXhPZihcIi9cIikgKyAxLCBmaWxlLm5hbWUubGFzdEluZGV4T2YoXCIuXCIpKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAvLyBpbnNlcnQgZmlsZSB0byBfZmlsZXMgbGlzdCBhdCBzcGVjaWZpYyBpbmRleCBiYXNlZCBvbiBhbHBoYWJldGljYWwgb3JkZXIgb2YgZmlsZSBuYW1lXG4gICAgICBfZmlsZXMuc3BsaWNlKF8uc29ydGVkSW5kZXgoX2ZpbGVzLCBmaWxlLCBcImZpbGVOYW1lXCIpLCAwLCBmaWxlKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgdmFyIHN0b3JhZ2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInZpZGVvU3RvcmFnZVwiKTtcblxuICAgIGlmICghc3RvcmFnZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1yZXNwb25zZVwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgZmlsZSA9IGUuZGV0YWlsO1xuXG4gICAgICAvLyBBZGRlZFxuICAgICAgaWYoZmlsZS5hZGRlZCkge1xuICAgICAgICBfYWRkRmlsZShmaWxlKTtcblxuICAgICAgICBpZiAoX2luaXRpYWxMb2FkKSB7XG4gICAgICAgICAgX2luaXRpYWxMb2FkID0gZmFsc2U7XG4gICAgICAgICAgUmlzZVZpc2lvbi5WaWRlby5vbkZpbGVJbml0KF9nZXRVcmxzKCkpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENoYW5nZWQgb3IgdW5jaGFuZ2VkXG4gICAgICBpZiAoZmlsZS5oYXNPd25Qcm9wZXJ0eShcImNoYW5nZWRcIikpIHtcbiAgICAgICAgaWYoZmlsZS5jaGFuZ2VkKSB7XG4gICAgICAgICAgX2NoYW5nZUZpbGUoZmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgLy8gaW4gdGhlIGV2ZW50IG9mIGEgbmV0d29yayBmYWlsdXJlIGFuZCByZWNvdmVyeSwgY2hlY2sgaWYgdGhlIFdpZGdldCBpcyBpbiBhIHN0YXRlIG9mIHN0b3JhZ2UgZXJyb3JcbiAgICAgICAgICBpZiAoIVJpc2VWaXNpb24uVmlkZW8uaGFzU3RvcmFnZUVycm9yKCkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgcHJvY2VlZCB3aXRoIHJlZnJlc2ggbG9naWMgYmVsb3cgaWYgdGhlcmUncyBiZWVuIGEgc3RvcmFnZSBlcnJvciwgb3RoZXJ3aXNlIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgc28gdGhlIFdpZGdldCBjYW4gZXZlbnR1YWxseSBwbGF5IHZpZGVvIGFnYWluIGZyb20gYSBuZXR3b3JrIHJlY292ZXJ5XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERlbGV0ZWRcbiAgICAgIGlmKGZpbGUuZGVsZXRlZCkge1xuICAgICAgICBfZGVsZXRlRmlsZShmaWxlKTtcbiAgICAgIH1cblxuICAgICAgUmlzZVZpc2lvbi5WaWRlby5vbkZpbGVSZWZyZXNoKF9nZXRVcmxzKCkpO1xuXG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2UtYXBpLWVycm9yXCIsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7XG4gICAgICAgIFwiZXZlbnRcIjogXCJzdG9yYWdlIGFwaSBlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogXCJSZXNwb25zZSBjb2RlOiBcIiArIGUuZGV0YWlsLmNvZGUgKyBcIiwgbWVzc2FnZTogXCIgKyBlLmRldGFpbC5tZXNzYWdlXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlNvcnJ5LCB0aGVyZSB3YXMgYSBwcm9ibGVtIGNvbW11bmljYXRpbmcgd2l0aCBSaXNlIFN0b3JhZ2UuXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWVtcHR5LWZvbGRlclwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgcGFyYW1zID0geyBcImV2ZW50XCI6IFwic3RvcmFnZSBmb2xkZXIgZW1wdHlcIiB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCBmb2xkZXIgZG9lcyBub3QgY29udGFpbiBhbnkgdmlkZW9zLlwiKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1uby1mb2xkZXJcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7IFwiZXZlbnRcIjogXCJzdG9yYWdlIGZvbGRlciBkb2Vzbid0IGV4aXN0XCIsIFwiZXZlbnRfZGV0YWlsc1wiOiBlLmRldGFpbCB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlRoZSBzZWxlY3RlZCBmb2xkZXIgZG9lcyBub3QgZXhpc3Qgb3IgaGFzIGJlZW4gbW92ZWQgdG8gVHJhc2guXCIpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1zdG9yYWdlLWZvbGRlci1pbnZhbGlkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwYXJhbXMgPSB7IFwiZXZlbnRcIjogXCJzdG9yYWdlIGZvbGRlciBmb3JtYXQocykgaW52YWxpZFwiIH07XG5cbiAgICAgIFJpc2VWaXNpb24uVmlkZW8ubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uVmlkZW8uc2hvd0Vycm9yKFwiVGhlIHNlbGVjdGVkIGZvbGRlciBkb2VzIG5vdCBjb250YWluIGFueSBzdXBwb3J0ZWQgdmlkZW8gZm9ybWF0cy5cIik7XG4gICAgfSk7XG5cbiAgICBzdG9yYWdlLmFkZEV2ZW50TGlzdGVuZXIoXCJyaXNlLXN0b3JhZ2Utc3Vic2NyaXB0aW9uLWV4cGlyZWRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcGFyYW1zID0geyBcImV2ZW50XCI6IFwic3RvcmFnZSBzdWJzY3JpcHRpb24gZXhwaXJlZFwiIH07XG5cbiAgICAgIFJpc2VWaXNpb24uVmlkZW8ubG9nRXZlbnQocGFyYW1zLCB0cnVlKTtcbiAgICAgIFJpc2VWaXNpb24uVmlkZW8uc2hvd0Vycm9yKFwiUmlzZSBTdG9yYWdlIHN1YnNjcmlwdGlvbiBpcyBub3QgYWN0aXZlLlwiKTtcbiAgICB9KTtcblxuICAgIHN0b3JhZ2UuYWRkRXZlbnRMaXN0ZW5lcihcInJpc2Utc3RvcmFnZS1lcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwicmlzZSBzdG9yYWdlIGVycm9yXCIsXG4gICAgICAgIFwiZXZlbnRfZGV0YWlsc1wiOiBcIlRoZSByZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlOiBcIiArIGUuZGV0YWlsLmVycm9yLmN1cnJlbnRUYXJnZXQuc3RhdHVzXG4gICAgICB9O1xuXG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLmxvZ0V2ZW50KHBhcmFtcywgdHJ1ZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihcIlNvcnJ5LCB0aGVyZSB3YXMgYSBwcm9ibGVtIGNvbW11bmljYXRpbmcgd2l0aCBSaXNlIFN0b3JhZ2UuXCIsIHRydWUpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5hZGRFdmVudExpc3RlbmVyKFwicmlzZS1jYWNoZS1lcnJvclwiLCBmdW5jdGlvbihlKSB7XG4gICAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgICBcImV2ZW50XCI6IFwicmlzZSBjYWNoZSBlcnJvclwiLFxuICAgICAgICBcImV2ZW50X2RldGFpbHNcIjogZS5kZXRhaWwuZXJyb3IubWVzc2FnZVxuICAgICAgfTtcblxuICAgICAgUmlzZVZpc2lvbi5WaWRlby5sb2dFdmVudChwYXJhbXMsIHRydWUpO1xuXG4gICAgICB2YXIgc3RhdHVzQ29kZSA9IDA7XG4gICAgICAvLyBTaG93IGEgZGlmZmVyZW50IG1lc3NhZ2UgaWYgdGhlcmUgaXMgYSA0MDQgY29taW5nIGZyb20gcmlzZSBjYWNoZVxuICAgICAgaWYoZS5kZXRhaWwuZXJyb3IubWVzc2FnZSl7XG4gICAgICAgIHN0YXR1c0NvZGUgPSArZS5kZXRhaWwuZXJyb3IubWVzc2FnZS5zdWJzdHJpbmcoZS5kZXRhaWwuZXJyb3IubWVzc2FnZS5pbmRleE9mKFwiOlwiKSsyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IFJpc2VWaXNpb24uQ29tbW9uLlV0aWxpdGllcy5nZXRSaXNlQ2FjaGVFcnJvck1lc3NhZ2Uoc3RhdHVzQ29kZSk7XG4gICAgICBSaXNlVmlzaW9uLlZpZGVvLnNob3dFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIH0pO1xuXG4gICAgc3RvcmFnZS5zZXRBdHRyaWJ1dGUoXCJmaWxlVHlwZVwiLCBcInZpZGVvXCIpO1xuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiY29tcGFueUlkXCIsIGRhdGEuc3RvcmFnZS5jb21wYW55SWQpO1xuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiZm9sZGVyXCIsIGRhdGEuc3RvcmFnZS5mb2xkZXIpO1xuICAgIHN0b3JhZ2Uuc2V0QXR0cmlidXRlKFwiZW52XCIsIGNvbmZpZy5TVE9SQUdFX0VOVik7XG5cbiAgICBzdG9yYWdlLmdvKCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIFwiaW5pdFwiOiBpbml0XG4gIH07XG59O1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLlZpZGVvID0gUmlzZVZpc2lvbi5WaWRlbyB8fCB7fTtcblxuUmlzZVZpc2lvbi5WaWRlby5Ob25TdG9yYWdlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIHJpc2VDYWNoZSA9IFJpc2VWaXNpb24uQ29tbW9uLlJpc2VDYWNoZTtcblxuICB2YXIgX3JlZnJlc2hEdXJhdGlvbiA9IDkwMDAwMCwgIC8vIDE1IG1pbnV0ZXNcbiAgICBfcmVmcmVzaEludGVydmFsSWQgPSBudWxsO1xuXG4gIHZhciBfaXNMb2FkaW5nID0gdHJ1ZTtcblxuICB2YXIgX3VybCA9IFwiXCI7XG5cbiAgZnVuY3Rpb24gX2dldEZpbGUob21pdENhY2hlQnVzdGVyKSB7XG4gICAgcmlzZUNhY2hlLmdldEZpbGUoX3VybCwgZnVuY3Rpb24gKHJlc3BvbnNlLCBlcnJvcikge1xuICAgICAgaWYgKCFlcnJvcikge1xuXG4gICAgICAgIGlmIChfaXNMb2FkaW5nKSB7XG4gICAgICAgICAgX2lzTG9hZGluZyA9IGZhbHNlO1xuXG4gICAgICAgICAgUmlzZVZpc2lvbi5WaWRlby5vbkZpbGVJbml0KHJlc3BvbnNlLnVybCk7XG5cbiAgICAgICAgICAvLyBzdGFydCB0aGUgcmVmcmVzaCBpbnRlcnZhbFxuICAgICAgICAgIF9zdGFydFJlZnJlc2hJbnRlcnZhbCgpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgUmlzZVZpc2lvbi5WaWRlby5vbkZpbGVSZWZyZXNoKHJlc3BvbnNlLnVybCk7XG4gICAgICAgIH1cblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZXJyb3Igb2NjdXJyZWRcbiAgICAgICAgUmlzZVZpc2lvbi5WaWRlby5sb2dFdmVudCh7XG4gICAgICAgICAgXCJldmVudFwiOiBcIm5vbi1zdG9yYWdlIGVycm9yXCIsXG4gICAgICAgICAgXCJldmVudF9kZXRhaWxzXCI6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgICAgXCJmaWxlX3VybFwiOiByZXNwb25zZS51cmxcbiAgICAgICAgfSwgdHJ1ZSk7XG5cbiAgICAgICAgdmFyIHN0YXR1c0NvZGUgPSAwO1xuICAgICAgICAvLyBTaG93IGEgZGlmZmVyZW50IG1lc3NhZ2UgaWYgdGhlcmUgaXMgYSA0MDQgY29taW5nIGZyb20gcmlzZSBjYWNoZVxuICAgICAgICBpZihlcnJvci5tZXNzYWdlKXtcbiAgICAgICAgICBzdGF0dXNDb2RlID0gK2Vycm9yLm1lc3NhZ2Uuc3Vic3RyaW5nKGVycm9yLm1lc3NhZ2UuaW5kZXhPZihcIjpcIikrMik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gUmlzZVZpc2lvbi5Db21tb24uVXRpbGl0aWVzLmdldFJpc2VDYWNoZUVycm9yTWVzc2FnZShzdGF0dXNDb2RlKTtcbiAgICAgICAgUmlzZVZpc2lvbi5WaWRlby5zaG93RXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9LCBvbWl0Q2FjaGVCdXN0ZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3N0YXJ0UmVmcmVzaEludGVydmFsKCkge1xuICAgIGlmIChfcmVmcmVzaEludGVydmFsSWQgPT09IG51bGwpIHtcbiAgICAgIF9yZWZyZXNoSW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX2dldEZpbGUoZmFsc2UpO1xuICAgICAgfSwgX3JlZnJlc2hEdXJhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgLypcbiAgICogIFB1YmxpYyBNZXRob2RzXG4gICAqL1xuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIC8vIEhhbmRsZSBwcmUtbWVyZ2UgdXNlIG9mIFwidXJsXCIgc2V0dGluZyBwcm9wZXJ0eVxuICAgIF91cmwgPSAoZGF0YS51cmwgJiYgZGF0YS51cmwgIT09IFwiXCIpID8gZGF0YS51cmwgOiBkYXRhLnNlbGVjdG9yLnVybDtcblxuICAgIF9nZXRGaWxlKHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBcImluaXRcIjogaW5pdFxuICB9O1xufTtcblxudmFyIFJpc2VWaXNpb24gPSBSaXNlVmlzaW9uIHx8IHt9O1xuUmlzZVZpc2lvbi5WaWRlbyA9IFJpc2VWaXNpb24uVmlkZW8gfHwge307XG5cblJpc2VWaXNpb24uVmlkZW8uV2luZG93Q29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9idWNrZXRQYXRoID0gXCJcIixcbiAgICBfZnJhbWVPcmlnaW4gPSBcIlwiO1xuXG4gIC8qXG4gICAqICBQcml2YXRlIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIF9zZXRCdWNrZXRQYXRoKCkge1xuICAgIHZhciBwYXRoQXJyYXkgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoIFwiL1wiKSxcbiAgICAgIGhvc3QgPSB3aW5kb3cubG9jYXRpb24uaG9zdCxcbiAgICAgIHByb3RvY29sID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sO1xuXG4gICAgX2J1Y2tldFBhdGggPSBwcm90b2NvbCArIFwiLy9cIiArIGhvc3QgKyBcIi9cIjtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aEFycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAocGF0aEFycmF5W2ldICE9PSBcIlwiKSB7XG4gICAgICAgIF9idWNrZXRQYXRoICs9IHBhdGhBcnJheVtpXSArIFwiL1wiO1xuXG4gICAgICAgIGlmIChwYXRoQXJyYXlbaV0gPT09IFwiZGlzdFwiKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBfc2V0RnJhbWVPcmlnaW4oKSB7XG4gICAgLy8gd2lkZ2V0LXByZXZpZXcgYXBwIChsb2NhbClcbiAgICBpZiAod2luZG93LmxvY2F0aW9uLmhvc3QgPT09IFwibG9jYWxob3N0OjgwMDBcIikge1xuICAgICAgX2ZyYW1lT3JpZ2luID0gXCJodHRwOi8vbG9jYWxob3N0OjgwMDBcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAod2luZG93LmxvY2F0aW9uLmhvc3QgPT09IFwiczMuYW1hem9uYXdzLmNvbVwiKSB7XG4gICAgICBSaXNlVmlzaW9uLkNvbW1vbi5SaXNlQ2FjaGUuaXNSaXNlQ2FjaGVSdW5uaW5nKGZ1bmN0aW9uIChpc1J1bm5pbmcpIHtcblxuICAgICAgICBpZiAoaXNSdW5uaW5nKSB7XG4gICAgICAgICAgLy8gcnVubmluZyBpbiBwbGF5ZXIsIG9yaWdpbiBzaG91bGQgYmUgUmlzZSBDYWNoZVxuICAgICAgICAgIF9mcmFtZU9yaWdpbiA9IFwiaHR0cDovL2xvY2FsaG9zdDo5NDk0XCI7XG5cbiAgICAgICAgICAvLyBzZXQgdGhlIGJ1Y2tldCBwYXRoIGFzIFZpZGVvIG1vZHVsZSB3aWxsIG5lZWQgaXQgd2hlbiBSaXNlIENhY2hlIGlzIHJ1bm5pbmdcbiAgICAgICAgICBfc2V0QnVja2V0UGF0aCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIC8vIHJ1bm5pbmcgaW4gcHJldmlldyAoYnJvd3NlcilcbiAgICAgICAgICBfZnJhbWVPcmlnaW4gPSBcImh0dHA6Ly9zMy5hbWF6b25hd3MuY29tXCI7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9zZXRNZXNzYWdlUmVjZWl2ZXIoKSB7XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICB2YXIgb3JpZ2luID0gZXZlbnQub3JpZ2luIHx8IGV2ZW50Lm9yaWdpbmFsRXZlbnQub3JpZ2luO1xuXG4gICAgICAvLyBlbnN1cmUgdGhpcyBtZXNzYWdlIGlzIGNvbWluZyBmcm9tIGVpdGhlciBSaXNlIENhY2hlLCBBbWF6b24gUzMgKHByZXZpZXcpLCBvciBwcmV2aWV3IGFwcCAobG9jYWwpXG4gICAgICBpZiAob3JpZ2luICE9PSBcImh0dHA6Ly9sb2NhbGhvc3Q6OTQ5NFwiICYmIG9yaWdpbiAhPT0gXCJodHRwOi8vczMuYW1hem9uYXdzLmNvbVwiICYmIG9yaWdpbiAhPT0gXCJodHRwOi8vbG9jYWxob3N0OjgwMDBcIikge1xuICAgICAgICBvcmlnaW4gPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5kYXRhICYmIHR5cGVvZiBldmVudC5kYXRhID09PSBcIm9iamVjdFwiICYmIGV2ZW50LmRhdGEuZXZlbnQpIHtcbiAgICAgICAgc3dpdGNoIChldmVudC5kYXRhLmV2ZW50KSB7XG4gICAgICAgICAgY2FzZSBcInBsYXllckVuZGVkXCI6XG4gICAgICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLnBsYXllckVuZGVkKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwicGxheWVyRXJyb3JcIjpcbiAgICAgICAgICAgIFJpc2VWaXNpb24uVmlkZW8ucGxheWVyRXJyb3IoZXZlbnQuZGF0YS5lcnJvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIFwicGxheWVySXRlbUNoYW5nZVwiOlxuICAgICAgICAgICAgUmlzZVZpc2lvbi5WaWRlby5wbGF5ZXJJdGVtQ2hhbmdlKGV2ZW50LmRhdGEuaW5kZXgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBcInBsYXllclJlYWR5XCI6XG4gICAgICAgICAgICBSaXNlVmlzaW9uLlZpZGVvLnBsYXllclJlYWR5KCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGdldEJ1Y2tldFBhdGgoKSB7XG4gICAgcmV0dXJuIF9idWNrZXRQYXRoO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RnJhbWVPcmlnaW4oKSB7XG4gICAgcmV0dXJuIF9mcmFtZU9yaWdpbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgX3NldEZyYW1lT3JpZ2luKCk7XG4gICAgX3NldE1lc3NhZ2VSZWNlaXZlcigpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBnZXRCdWNrZXRQYXRoOiBnZXRCdWNrZXRQYXRoLFxuICAgIGdldEZyYW1lT3JpZ2luOiBnZXRGcmFtZU9yaWdpbixcbiAgICBpbml0OiBpbml0XG4gIH07XG5cbn07XG5cbnZhciBSaXNlVmlzaW9uID0gUmlzZVZpc2lvbiB8fCB7fTtcblJpc2VWaXNpb24uVmlkZW8gPSBSaXNlVmlzaW9uLlZpZGVvIHx8IHt9O1xuXG5SaXNlVmlzaW9uLlZpZGVvLkZyYW1lQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIFBSRUZJWCA9IFwiaWZfXCI7XG5cbiAgZnVuY3Rpb24gZ2V0RnJhbWVDb250YWluZXIoaW5kZXgpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoUFJFRklYICsgaW5kZXgpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RnJhbWVPYmplY3QoaW5kZXgpIHtcbiAgICB2YXIgZnJhbWVDb250YWluZXIgPSBnZXRGcmFtZUNvbnRhaW5lcihpbmRleCksXG4gICAgICBpZnJhbWU7XG5cbiAgICBpZnJhbWUgPSBmcmFtZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiaWZyYW1lXCIpO1xuXG4gICAgaWYgKGlmcmFtZSkge1xuICAgICAgcmV0dXJuIChpZnJhbWUuY29udGVudFdpbmRvdykgPyBpZnJhbWUuY29udGVudFdpbmRvdyA6XG4gICAgICAgIChpZnJhbWUuY29udGVudERvY3VtZW50LmRvY3VtZW50KSA/IGlmcmFtZS5jb250ZW50RG9jdW1lbnQuZG9jdW1lbnQgOiBpZnJhbWUuY29udGVudERvY3VtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gX2NsZWFyKGluZGV4LCBvcmlnaW4pIHtcbiAgICB2YXIgZnJhbWVDb250YWluZXIgPSBnZXRGcmFtZUNvbnRhaW5lcihpbmRleCksXG4gICAgICBmcmFtZU9iaiA9IGdldEZyYW1lT2JqZWN0KGluZGV4KSxcbiAgICAgIGlmcmFtZTtcblxuICAgIGlmIChmcmFtZU9iaikge1xuICAgICAgaWZyYW1lID0gZnJhbWVDb250YWluZXIucXVlcnlTZWxlY3RvcihcImlmcmFtZVwiKTtcbiAgICAgIGZyYW1lT2JqLnBvc3RNZXNzYWdlKHtldmVudDogXCJyZW1vdmVcIn0sIG9yaWdpbik7XG4gICAgICBpZnJhbWUuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiYWJvdXQ6YmxhbmtcIik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkKGluZGV4KSB7XG4gICAgdmFyIGZyYW1lQ29udGFpbmVyID0gZ2V0RnJhbWVDb250YWluZXIoaW5kZXgpLFxuICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcblxuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJhbGxvd1RyYW5zcGFyZW5jeVwiLCB0cnVlKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKFwiZnJhbWVib3JkZXJcIiwgXCIwXCIpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoXCJzY3JvbGxpbmdcIiwgXCJub1wiKTtcblxuICAgIGZyYW1lQ29udGFpbmVyLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVGcmFtZVBsYXllcihpbmRleCwgcGFyYW1zLCBmaWxlcywgc2tpbiwgc3JjLCBvcmlnaW4pIHtcbiAgICB2YXIgZnJhbWVDb250YWluZXIgPSBnZXRGcmFtZUNvbnRhaW5lcihpbmRleCksXG4gICAgICBmcmFtZU9iaiA9IGdldEZyYW1lT2JqZWN0KGluZGV4KSxcbiAgICAgIGlmcmFtZTtcblxuICAgIGlmIChmcmFtZU9iaikge1xuICAgICAgaWZyYW1lID0gZnJhbWVDb250YWluZXIucXVlcnlTZWxlY3RvcihcImlmcmFtZVwiKTtcblxuICAgICAgaWZyYW1lLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9IG51bGw7XG5cbiAgICAgICAgLy8gaW5pdGlhbGl6ZSBhbmQgbG9hZCB0aGUgcGxheWVyIGluc2lkZSB0aGUgaWZyYW1lXG4gICAgICAgIGZyYW1lT2JqLnBvc3RNZXNzYWdlKHtldmVudDogXCJpbml0XCIsIHBhcmFtczogcGFyYW1zLCBmaWxlczogZmlsZXMsIHNraW46IHNraW59LCBvcmlnaW4pO1xuICAgICAgfTtcblxuICAgICAgaWZyYW1lLnNldEF0dHJpYnV0ZShcInNyY1wiLCBzcmMpO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gaGlkZShpbmRleCkge1xuICAgIHZhciBmcmFtZUNvbnRhaW5lciA9IGdldEZyYW1lQ29udGFpbmVyKGluZGV4KTtcblxuICAgIGZyYW1lQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlKGluZGV4LCBvcmlnaW4sIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZyYW1lQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoUFJFRklYICsgaW5kZXgpO1xuXG4gICAgX2NsZWFyKGluZGV4LCBvcmlnaW4pO1xuXG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAvLyByZW1vdmUgdGhlIGlmcmFtZSBieSBjbGVhcmluZyBhbGwgZWxlbWVudHMgaW5zaWRlIGRpdiBjb250YWluZXJcbiAgICAgIHdoaWxlIChmcmFtZUNvbnRhaW5lci5maXJzdENoaWxkKSB7XG4gICAgICAgIGZyYW1lQ29udGFpbmVyLnJlbW92ZUNoaWxkKGZyYW1lQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGNhbGxiYWNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgIH1cbiAgICB9LCAyMDApO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvdyhpbmRleCkge1xuICAgIHZhciBmcmFtZUNvbnRhaW5lciA9IGdldEZyYW1lQ29udGFpbmVyKGluZGV4KTtcblxuICAgIGZyYW1lQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcInZpc2libGVcIjtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgYWRkOiBhZGQsXG4gICAgY3JlYXRlRnJhbWVQbGF5ZXI6IGNyZWF0ZUZyYW1lUGxheWVyLFxuICAgIGdldEZyYW1lQ29udGFpbmVyOiBnZXRGcmFtZUNvbnRhaW5lcixcbiAgICBnZXRGcmFtZU9iamVjdDogZ2V0RnJhbWVPYmplY3QsXG4gICAgaGlkZTogaGlkZSxcbiAgICByZW1vdmU6IHJlbW92ZSxcbiAgICBzaG93OiBzaG93XG4gIH07XG59O1xuXG52YXIgUmlzZVZpc2lvbiA9IFJpc2VWaXNpb24gfHwge307XG5SaXNlVmlzaW9uLkNvbW1vbiA9IFJpc2VWaXNpb24uQ29tbW9uIHx8IHt9O1xuXG5SaXNlVmlzaW9uLkNvbW1vbi5NZXNzYWdlID0gZnVuY3Rpb24gKG1haW5Db250YWluZXIsIG1lc3NhZ2VDb250YWluZXIpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIF9hY3RpdmUgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBfaW5pdCgpIHtcbiAgICB0cnkge1xuICAgICAgbWVzc2FnZUNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBtYWluQ29udGFpbmVyLnN0eWxlLmhlaWdodDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBjb25zb2xlLndhcm4oXCJDYW4ndCBpbml0aWFsaXplIE1lc3NhZ2UgLSBcIiwgZS5tZXNzYWdlKTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgKiAgUHVibGljIE1ldGhvZHNcbiAgICovXG4gIGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgaWYgKF9hY3RpdmUpIHtcbiAgICAgIC8vIGNsZWFyIGNvbnRlbnQgb2YgbWVzc2FnZSBjb250YWluZXJcbiAgICAgIHdoaWxlIChtZXNzYWdlQ29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgbWVzc2FnZUNvbnRhaW5lci5yZW1vdmVDaGlsZChtZXNzYWdlQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICAvLyBoaWRlIG1lc3NhZ2UgY29udGFpbmVyXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcblxuICAgICAgLy8gc2hvdyBtYWluIGNvbnRhaW5lclxuICAgICAgbWFpbkNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gXCJ2aXNpYmxlXCI7XG5cbiAgICAgIF9hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzaG93KG1lc3NhZ2UpIHtcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG4gICAgICBwO1xuXG4gICAgaWYgKCFfYWN0aXZlKSB7XG4gICAgICAvLyBoaWRlIG1haW4gY29udGFpbmVyXG4gICAgICBtYWluQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSBcImhpZGRlblwiO1xuXG4gICAgICBtZXNzYWdlQ29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG5cbiAgICAgIC8vIGNyZWF0ZSBtZXNzYWdlIGVsZW1lbnRcbiAgICAgIHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgIHAuaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgICAgIHAuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJtZXNzYWdlXCIpO1xuXG4gICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChwKTtcbiAgICAgIG1lc3NhZ2VDb250YWluZXIuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xuXG4gICAgICBfYWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWVzc2FnZSBhbHJlYWR5IGJlaW5nIHNob3duLCB1cGRhdGUgbWVzc2FnZSB0ZXh0XG4gICAgICBwID0gbWVzc2FnZUNvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFwiLm1lc3NhZ2VcIik7XG4gICAgICBwLmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gICAgfVxuICB9XG5cbiAgX2luaXQoKTtcblxuICByZXR1cm4ge1xuICAgIFwiaGlkZVwiOiBoaWRlLFxuICAgIFwic2hvd1wiOiBzaG93XG4gIH07XG59O1xuXG4vKiBnbG9iYWwgZ2FkZ2V0cywgUmlzZVZpc2lvbiAqL1xuXG4oZnVuY3Rpb24gKHdpbmRvdywgZ2FkZ2V0cykge1xuICBcInVzZSBzdHJpY3RcIjtcblxuICB2YXIgcHJlZnMgPSBuZXcgZ2FkZ2V0cy5QcmVmcygpLFxuICAgIGlkID0gcHJlZnMuZ2V0U3RyaW5nKFwiaWRcIik7XG5cbiAgLy8gRGlzYWJsZSBjb250ZXh0IG1lbnUgKHJpZ2h0IGNsaWNrIG1lbnUpXG4gIHdpbmRvdy5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBmdW5jdGlvbiBjb25maWd1cmUobmFtZXMsIHZhbHVlcykge1xuICAgIHZhciBhZGRpdGlvbmFsUGFyYW1zID0gbnVsbCxcbiAgICAgIG1vZGUgPSBcIlwiLFxuICAgICAgY29tcGFueUlkID0gXCJcIixcbiAgICAgIGRpc3BsYXlJZCA9IFwiXCI7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShuYW1lcykgJiYgbmFtZXMubGVuZ3RoID4gMCAmJiBBcnJheS5pc0FycmF5KHZhbHVlcykgJiYgdmFsdWVzLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChuYW1lc1swXSA9PT0gXCJjb21wYW55SWRcIikge1xuICAgICAgICBjb21wYW55SWQgPSB2YWx1ZXNbMF07XG4gICAgICB9XG5cbiAgICAgIGlmIChuYW1lc1sxXSA9PT0gXCJkaXNwbGF5SWRcIikge1xuICAgICAgICBpZiAodmFsdWVzWzFdKSB7XG4gICAgICAgICAgZGlzcGxheUlkID0gdmFsdWVzWzFdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIGRpc3BsYXlJZCA9IFwicHJldmlld1wiO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIFJpc2VWaXNpb24uQ29tbW9uLkxvZ2dlclV0aWxzLnNldElkcyhjb21wYW55SWQsIGRpc3BsYXlJZCk7XG5cbiAgICAgIGlmIChuYW1lc1syXSA9PT0gXCJhZGRpdGlvbmFsUGFyYW1zXCIpIHtcbiAgICAgICAgYWRkaXRpb25hbFBhcmFtcyA9IEpTT04ucGFyc2UodmFsdWVzWzJdKTtcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoYWRkaXRpb25hbFBhcmFtcy5zdG9yYWdlKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAvLyBzdG9yYWdlIGZpbGUgb3IgZm9sZGVyIHNlbGVjdGVkXG4gICAgICAgICAgaWYgKCFhZGRpdGlvbmFsUGFyYW1zLnN0b3JhZ2UuZmlsZU5hbWUpIHtcbiAgICAgICAgICAgIC8vIGZvbGRlciB3YXMgc2VsZWN0ZWRcbiAgICAgICAgICAgIG1vZGUgPSBcImZvbGRlclwiO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBmaWxlIHdhcyBzZWxlY3RlZFxuICAgICAgICAgICAgbW9kZSA9IFwiZmlsZVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBub24tc3RvcmFnZSBmaWxlIHdhcyBzZWxlY3RlZFxuICAgICAgICAgIG1vZGUgPSBcImZpbGVcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIFJpc2VWaXNpb24uVmlkZW8uc2V0QWRkaXRpb25hbFBhcmFtcyhhZGRpdGlvbmFsUGFyYW1zLCBtb2RlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGF5KCkge1xuICAgIFJpc2VWaXNpb24uVmlkZW8ucGxheSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgUmlzZVZpc2lvbi5WaWRlby5wYXVzZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICBSaXNlVmlzaW9uLlZpZGVvLnN0b3AoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbHltZXJSZWFkeSgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIldlYkNvbXBvbmVudHNSZWFkeVwiLCBwb2x5bWVyUmVhZHkpO1xuXG4gICAgaWYgKGlkICYmIGlkICE9PSBcIlwiKSB7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BsYXlfXCIgKyBpZCwgcGxheSk7XG4gICAgICBnYWRnZXRzLnJwYy5yZWdpc3RlcihcInJzY21kX3BhdXNlX1wiICsgaWQsIHBhdXNlKTtcbiAgICAgIGdhZGdldHMucnBjLnJlZ2lzdGVyKFwicnNjbWRfc3RvcF9cIiArIGlkLCBzdG9wKTtcblxuICAgICAgZ2FkZ2V0cy5ycGMucmVnaXN0ZXIoXCJyc3BhcmFtX3NldF9cIiArIGlkLCBjb25maWd1cmUpO1xuICAgICAgZ2FkZ2V0cy5ycGMuY2FsbChcIlwiLCBcInJzcGFyYW1fZ2V0XCIsIG51bGwsIGlkLCBbXCJjb21wYW55SWRcIiwgXCJkaXNwbGF5SWRcIiwgXCJhZGRpdGlvbmFsUGFyYW1zXCJdKTtcbiAgICB9XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIldlYkNvbXBvbmVudHNSZWFkeVwiLCBwb2x5bWVyUmVhZHkpO1xuXG59KSh3aW5kb3csIGdhZGdldHMpO1xuXG5cblxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xudmFyIF9nYXEgPSBfZ2FxIHx8IFtdO1xuXG5fZ2FxLnB1c2goWydfc2V0QWNjb3VudCcsICdVQS01NzA5MjE1OS0yJ10pO1xuX2dhcS5wdXNoKFsnX3RyYWNrUGFnZXZpZXcnXSk7XG5cbihmdW5jdGlvbigpIHtcbiAgdmFyIGdhID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7IGdhLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JzsgZ2EuYXN5bmMgPSB0cnVlO1xuICBnYS5zcmMgPSAoJ2h0dHBzOicgPT0gZG9jdW1lbnQubG9jYXRpb24ucHJvdG9jb2wgPyAnaHR0cHM6Ly9zc2wnIDogJ2h0dHA6Ly93d3cnKSArICcuZ29vZ2xlLWFuYWx5dGljcy5jb20vZ2EuanMnO1xuICB2YXIgcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsgcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYSwgcyk7XG59KSgpO1xuLyoganNoaW50IGlnbm9yZTplbmQgKi9cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
