var WIDGET_COMMON_CONFIG={AUTH_PATH_URL:"v1/widget/auth",LOGGER_CLIENT_ID:"1088527147109-6q1o2vtihn34292pjt4ckhmhck0rk0o7.apps.googleusercontent.com",LOGGER_CLIENT_SECRET:"nlZyrcPLg6oEwO9f9Wfn29Wh",LOGGER_REFRESH_TOKEN:"1/xzt4kwzE1H7W9VnKB8cAaCx6zb4Es4nKEoqaYHdTD15IgOrJDtdun6zK6XiATCKT",STORAGE_ENV:"prod",STORE_URL:"https://store-dot-rvaserver2.appspot.com/"},RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.LoggerUtils=function(){"use strict";function e(e,i){var n=null;e.event?(n=e,n.file_url&&(n.file_format=t(n.file_url)),n.company_id=a,n.display_id=s,i(n)):i(n)}function i(){var e=new Date,i=e.getUTCFullYear(),t=e.getUTCMonth()+1,n=e.getUTCDate();return 10>t&&(t="0"+t),10>n&&(n="0"+n),i+t+n}function t(e){var i,t=/[?#&]/;return e&&"string"==typeof e?(i=e.substr(e.lastIndexOf(".")+1),t.test(i)&&(i=i.substr(0,-1!==i.indexOf("?")?i.indexOf("?"):i.length),i=i.substr(0,-1!==i.indexOf("#")?i.indexOf("#"):i.length),i=i.substr(0,-1!==i.indexOf("&")?i.indexOf("&"):i.length)),i.toLowerCase()):null}function n(e){var t={kind:"bigquery#tableDataInsertAllRequest",skipInvalidRows:!1,ignoreUnknownValues:!1,templateSuffix:i(),rows:[{insertId:""}]},n=JSON.parse(JSON.stringify(t));return n.rows[0].insertId=Math.random().toString(36).substr(2).toUpperCase(),n.rows[0].json=JSON.parse(JSON.stringify(e)),n.rows[0].json.ts=(new Date).toISOString(),n}function o(i,t){e(t,function(e){null!==e&&RiseVision.Common.Logger.log(i,e)})}function r(e,i){a=e,s=i}var s="",a="";return{getInsertData:n,getFileFormat:t,logEvent:o,setIds:r}}(),RiseVision.Common.Logger=function(e){"use strict";function i(e){var i=new XMLHttpRequest;return new Date-d<358e4?e({}):(i.open("POST",o,!0),i.onloadend=function(){var t=JSON.parse(i.response);e({token:t.access_token,refreshedAt:new Date})},i.send(),void 0)}function t(e){return s&&l===e}function n(n,o){function u(i){var t,s,a=new XMLHttpRequest;s=r.replace("TABLE_ID",n),d=i.refreshedAt||d,c=i.token||c,t=e.getInsertData(o),a.open("POST",s,!0),a.setRequestHeader("Content-Type","application/json"),a.setRequestHeader("Authorization","Bearer "+c),o.cb&&"function"==typeof o.cb&&(a.onloadend=function(){o.cb(a.response)}),a.send(JSON.stringify(t))}if(!(!n||!o||o.hasOwnProperty("event")&&!o.event||o.hasOwnProperty("event")&&t(o.event)))return s=!0,l=o.event,setTimeout(function(){s=!1},a),i(u)}var o="https://www.googleapis.com/oauth2/v3/token?client_id="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_ID+"&client_secret="+WIDGET_COMMON_CONFIG.LOGGER_CLIENT_SECRET+"&refresh_token="+WIDGET_COMMON_CONFIG.LOGGER_REFRESH_TOKEN+"&grant_type=refresh_token",r="https://www.googleapis.com/bigquery/v2/projects/client-side-events/datasets/Widget_Events/tables/TABLE_ID/insertAll",s=!1,a=1e3,l="",d=0,c="";return{log:n}}(RiseVision.Common.LoggerUtils);var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Utilities=function(){function e(e,i){var t="font-family:"+i.font.family+"; ",n="color: "+(i.color?i.color:i.forecolor)+"; ",o="font-size: "+(-1===i.size.indexOf("px")?i.size+"px; ":i.size+"; "),r="font-weight: "+(i.bold?"bold":"normal")+"; ",s="font-style: "+(i.italic?"italic":"normal")+"; ",a="text-decoration: "+(i.underline?"underline":"none")+"; ",l="background-color: "+(i.highlightColor?i.highlightColor:i.backcolor)+"; ";return"."+e+" {"+t+n+o+r+s+a+l+"}"}function i(e){for(var i=document.createElement("style"),t=0,n=e.length;n>t;t++)i.appendChild(document.createTextNode(e[t]));document.head.appendChild(i)}function t(t,r){t.forEach(function(t){t.class&&t.fontSetting&&i([e(t.class,t.fontSetting)]),t.fontSetting.font.type&&("custom"===t.fontSetting.font.type&&t.fontSetting.font.family&&t.fontSetting.font.url?n(t.fontSetting.font.family,t.fontSetting.font.url,r):"google"===t.fontSetting.font.type&&t.fontSetting.font.family&&o(t.fontSetting.font.family,r))})}function n(e,i,t){var n=null,o="font-family: "+e+"; src: url('"+i+"');";t=t||document,n=t.styleSheets[0],null!==n&&n.addRule("@font-face",o)}function o(e,i){var t,n=document.createElement("link");i=i||document,n.setAttribute("rel","stylesheet"),n.setAttribute("type","text/css"),t=e.split(",")[0],t=t.replace(/'/g,""),n.setAttribute("href","https://fonts.googleapis.com/css?family="+t),null!==n&&i.getElementsByTagName("head")[0].appendChild(n)}function r(e){for(var i=e.length,t=[],n=0;i>n;n++)t[n]=new Image,t[n].src=e[n]}function s(e){for(var i,t=window.location.search.substring(1),n=t.split("&"),o=0;o<n.length;o++)if(i=n[o].split("="),i[0]==e)return decodeURIComponent(i[1]);return""}function a(e){var i="";switch(e){case 404:i="The file does not exist or cannot be accessed.";break;case 507:i="There is not enough disk space to save the file on Rise Cache.";break;default:i="There was a problem retrieving the file from Rise Cache."}return i}function l(e){var i=document.createElement("div");return i.innerHTML=e,i.textContent}return{getQueryParameter:s,getFontCssStyle:e,addCSSRules:i,loadFonts:t,loadCustomFont:n,loadGoogleFont:o,preloadImages:r,getRiseCacheErrorMessage:a,unescapeHTML:l}}();var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.RiseCache=function(){"use strict";function e(e){var i=new XMLHttpRequest;e&&"function"==typeof e&&(i.open("GET",n+"ping?callback=_",!0),i.onreadystatechange=function(){try{4===i.readyState&&(o=!0,200===i.status?(r=!0,e(!0,i.responseText)):(console.debug("Rise Cache is not running"),r=!1,e(!1,null)))}catch(t){console.debug("Caught exception: ",t.description)}},i.send())}function i(e,i,t){function s(){var i,o,s;r?i=t?n+"?url="+encodeURIComponent(e):n+"cb="+(new Date).getTime()+"?url="+encodeURIComponent(e):t?i=e:(o=e.split("?"),s=1===o.length?"?":"&",i=e+s+"cb="+(new Date).getTime()),a("HEAD",i)}function a(e,t){var n=new XMLHttpRequest,o={xhr:n,url:t};r?(n.open(e,t,!0),n.addEventListener("loadend",function(){var r=n.status||0;r>=200&&300>r?i(o):"HEAD"===e?a("GET",t):i(o,new Error("The request failed with status code: "+r))}),n.send()):i(o)}if(e&&i&&"function"==typeof i)return o?s():this.ping(s)}function t(e){return e&&"function"==typeof e?o?(e(r),void 0):this.ping(function(){e(r)}):void 0}var n="//localhost:9494/",o=!1,r=!1;return{getFile:i,isRiseCacheRunning:t,ping:e}}(),"undefined"!=typeof angular&&angular.module("risevision.common.i18n.config",[]).constant("LOCALES_PREFIX","locales/translation_").constant("LOCALES_SUFIX",".json");var config={SKIN:"skin/RVSkin.xml",STORAGE_ENV:"prod"},RiseVision=RiseVision||{};RiseVision.Video={},RiseVision.Video=function(e,i){"use strict";function t(){i.rpc.call("","rsevent_done",null,O.getString("id")),null!==G&&c(G,!0),c({event:"done"},!1)}function n(){i.rpc.call("","rsevent_ready",null,O.getString("id"),!0,!0,!0,!0,!0)}function o(){clearTimeout(D),D=null}function r(){o(),D=setTimeout(function(){t()},5e3)}function s(){if(M&&M.length>0){if("file"===C)return M[0];if("folder"===C&&P)return M[P]}return null}function a(){return q}function l(){return H}function d(e,i){U=!0,q="undefined"!=typeof i,L.show(e),P=null,F.remove(k,A.getFrameOrigin(),function(){N||r()})}function c(e,i){i&&(G=e),e.file_url||(e.file_url=s()),RiseVision.Common.LoggerUtils.logEvent(v(),e)}function u(e){"file"===C?M[0]=e:"folder"===C&&(M=e),L.hide(),N||m()}function g(e){"file"===C?M[0]=e:"folder"===C&&(M=e),U=!1,q=!1,H=!1,G=null}function f(){var e=F.getFrameObject(k);N=!0,o(),e&&(x?e.postMessage({event:"pause"},A.getFrameOrigin()):(P=null,F.remove(k,A.getFrameOrigin())))}function m(){var e,i,t={},n=F.getFrameObject(k);return b&&(b=!1,t.event="configuration",t.event_details=S,c(t,!1)),N=!1,c({event:"play"},!1),U?(r(),void 0):(n?n.postMessage({event:"play"},A.getFrameOrigin()):M&&M.length>0&&RiseVision.Common.RiseCache.isRiseCacheRunning(function(t){e=t?"?url="+encodeURIComponent(A.getBucketPath())+config.SKIN:config.SKIN,"file"===C?(i=t?"//localhost:9494/?url="+encodeURIComponent(A.getBucketPath())+"player-file-cache.html":"player-file.html",F.add(0),F.createFramePlayer(0,w,M[0],e,i,A.getFrameOrigin())):"folder"===C&&(i=t?"//localhost:9494/?url="+encodeURIComponent(A.getBucketPath())+"player-folder-cache.html":"player-folder.html",F.add(0),F.createFramePlayer(0,w,M,e,i,A.getFrameOrigin()))}),void 0)}function v(){return"video_events"}function p(){P=null,F.remove(k,A.getFrameOrigin(),function(){t()})}function h(){var e;L.hide(),N||(e=F.getFrameObject(k),e&&e.postMessage({event:"play"},A.getFrameOrigin()))}function V(e){P=e}function R(e,t){var o;w=_.clone(e),C=t,O=new i.Prefs,document.getElementById("videoContainer").style.height=O.getInt("rsH")+"px",w.width=O.getInt("rsW"),w.height=O.getInt("rsH"),w.video.hasOwnProperty("resume")&&(x=w.video.resume),L=new RiseVision.Common.Message(document.getElementById("videoContainer"),document.getElementById("messageContainer")),L.show("Please wait while your video is downloaded."),A=new RiseVision.Video.WindowController,A.init(),F=new RiseVision.Video.FrameController,"file"===C?(o=0!==Object.keys(w.storage).length,o?(S="storage file",I=new RiseVision.Video.StorageFile(w),I.init()):(S="custom",T=new RiseVision.Video.NonStorage(w),T.init())):"folder"===C&&(S="storage folder",I=new RiseVision.Video.StorageFolder(w),I.init()),n()}function y(e){var i=null,t={},n="Sorry, there was a problem playing the video.",o="Error loading media: File could not be played",r="Error loading YouTube: Video could not be played",s="Error loading player: No playable sources found",a="There was a problem playing that video. It could be that we don't support that format or it is not encoded correctly.",l="The format of that video is not supported";e&&(e.type&&e.message?i=e.type+" - "+e.message:e.type?i=e.type:e.message&&(i=e.message),e.message&&(e.message===o||e.message===r?n=a:e.message===s&&(n=l))),t.event="player error",t.event_details=i,H=!0,c(t,!0),d(n)}function E(){f()}var w,C,b=!0,S=null,O=null,I=null,T=null,L=null,F=null,A=null,N=!0,x=!0,k=0,M=[],P=null,G=null,D=null,U=!1,q=!1,H=!1;return{getTableName:v,hasPlayerError:l,hasStorageError:a,logEvent:c,onFileInit:u,onFileRefresh:g,pause:f,play:m,setAdditionalParams:R,showError:d,playerEnded:p,playerReady:h,playerError:y,playerItemChange:V,stop:E}}(window,gadgets);var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFile=function(e){"use strict";function i(){var i=document.getElementById("videoStorage");i&&(i.addEventListener("rise-storage-response",function(e){e.detail&&e.detail.url&&(t?(t=!1,RiseVision.Video.onFileInit(e.detail.url)):e.detail.hasOwnProperty("changed")&&(e.detail.changed?RiseVision.Video.onFileRefresh(e.detail.url):(RiseVision.Video.hasStorageError()||RiseVision.Video.hasPlayerError())&&RiseVision.Video.onFileRefresh(e.detail.url)))}),i.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),i.addEventListener("rise-storage-no-file",function(e){var i={event:"storage file not found",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video does not exist or has been moved to Trash.")}),i.addEventListener("rise-storage-file-throttled",function(e){var i={event:"storage file throttled",file_url:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected video is temporarily unavailable.")}),i.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),i.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),i.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),i.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),i.setAttribute("folder",e.storage.folder),i.setAttribute("fileName",e.storage.fileName),i.setAttribute("companyId",e.storage.companyId),i.setAttribute("env",config.STORAGE_ENV),i.go())}var t=!0;return{init:i}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.StorageFolder=function(e){"use strict";function i(){return _.pluck(l,"url")}function t(e){return _.find(l,function(i){return e.name===i.name})}function n(e){var i=t(e);i&&l.splice(l.indexOf(i),1)}function o(e){var i=t(e);i&&(i.url=e.url)}function r(e){var i=t(e);i||(e.fileName=e.name.slice(e.name.lastIndexOf("/")+1,e.name.lastIndexOf(".")).toLowerCase(),l.splice(_.sortedIndex(l,e,"fileName"),0,e))}function s(){var t=document.getElementById("videoStorage");t&&(t.addEventListener("rise-storage-response",function(e){var t=e.detail;if(t.added&&(r(t),a))return a=!1,RiseVision.Video.onFileInit(i()),void 0;if(t.hasOwnProperty("changed"))if(t.changed)o(t);else if(!RiseVision.Video.hasStorageError()&&!RiseVision.Video.hasPlayerError())return;t.deleted&&n(t),RiseVision.Video.onFileRefresh(i())}),t.addEventListener("rise-storage-api-error",function(e){var i={event:"storage api error",event_details:"Response code: "+e.detail.code+", message: "+e.detail.message};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.")}),t.addEventListener("rise-storage-empty-folder",function(){var e={event:"storage folder empty"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any videos.")}),t.addEventListener("rise-storage-no-folder",function(e){var i={event:"storage folder doesn't exist",event_details:e.detail};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("The selected folder does not exist or has been moved to Trash.")}),t.addEventListener("rise-storage-folder-invalid",function(){var e={event:"storage folder format(s) invalid"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("The selected folder does not contain any supported video formats.")}),t.addEventListener("rise-storage-subscription-expired",function(){var e={event:"storage subscription expired"};RiseVision.Video.logEvent(e,!0),RiseVision.Video.showError("Rise Storage subscription is not active.")}),t.addEventListener("rise-storage-error",function(e){var i={event:"rise storage error",event_details:"The request failed with status code: "+e.detail.error.currentTarget.status};RiseVision.Video.logEvent(i,!0),RiseVision.Video.showError("Sorry, there was a problem communicating with Rise Storage.",!0)}),t.addEventListener("rise-cache-error",function(e){var i={event:"rise cache error",event_details:e.detail.error.message};RiseVision.Video.logEvent(i,!0);var t=0;e.detail.error.message&&(t=+e.detail.error.message.substring(e.detail.error.message.indexOf(":")+2));var n=RiseVision.Common.Utilities.getRiseCacheErrorMessage(t);RiseVision.Video.showError(n)}),t.addEventListener("rise-cache-not-running",function(e){var i={event:"rise cache not running",event_details:e.detail&&e.detail.error?e.detail.error.message:""};RiseVision.Video.logEvent(i,!0)}),t.setAttribute("fileType","video"),t.setAttribute("companyId",e.storage.companyId),t.setAttribute("folder",e.storage.folder),t.setAttribute("env",config.STORAGE_ENV),t.go())}var a=!0,l=[];return{init:s}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.NonStorage=function(e){"use strict";function i(e){o.getFile(l,function(e,i){if(i){RiseVision.Video.logEvent({event:"non-storage error",event_details:i.message,file_url:e.url},!0);var n=0;i.message&&(n=+i.message.substring(i.message.indexOf(":")+2));var o=RiseVision.Common.Utilities.getRiseCacheErrorMessage(n);RiseVision.Video.showError(o)}else a?(a=!1,RiseVision.Video.onFileInit(e.url),t()):RiseVision.Video.onFileRefresh(e.url)},e)}function t(){null===s&&(s=setInterval(function(){i(!1)},r))}function n(){l=e.url&&""!==e.url?e.url:e.selector.url,i(!0)}var o=RiseVision.Common.RiseCache,r=9e5,s=null,a=!0,l="";return{init:n}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.WindowController=function(){"use strict";function e(){var e=window.location.pathname.split("/"),i=window.location.host,t=window.location.protocol;s=t+"//"+i+"/";for(var n=0;n<e.length&&(""===e[n]||(s+=e[n]+"/","dist"!==e[n]));n+=1);}function i(){"localhost:8000"===window.location.host?a="http://localhost:8000":"s3.amazonaws.com"===window.location.host&&RiseVision.Common.RiseCache.isRiseCacheRunning(function(i){i?(a="http://localhost:9494",e()):a="http://s3.amazonaws.com"})}function t(){window.addEventListener("message",function(e){var i=e.origin||e.originalEvent.origin;if("http://localhost:9494"!==i&&"http://s3.amazonaws.com"!==i&&"http://localhost:8000"!==i)return i=null,void 0;if(e.data&&"object"==typeof e.data&&e.data.event)switch(e.data.event){case"playerEnded":RiseVision.Video.playerEnded();break;case"playerError":RiseVision.Video.playerError(e.data.error);break;case"playerItemChange":RiseVision.Video.playerItemChange(e.data.index);break;case"playerReady":RiseVision.Video.playerReady()}})}function n(){return s}function o(){return a}function r(){i(),t()}var s="",a="";return{getBucketPath:n,getFrameOrigin:o,init:r}};var RiseVision=RiseVision||{};RiseVision.Video=RiseVision.Video||{},RiseVision.Video.FrameController=function(){"use strict";function e(e){return document.getElementById(l+e)}function i(i){var t,n=e(i);return t=n.querySelector("iframe"),t?t.contentWindow?t.contentWindow:t.contentDocument.document?t.contentDocument.document:t.contentDocument:null}function t(t,n){var o,r=e(t),s=i(t);s&&(o=r.querySelector("iframe"),s.postMessage({event:"remove"},n),o.setAttribute("src","about:blank"))}function n(i){var t=e(i),n=document.createElement("iframe");n.setAttribute("allowTransparency",!0),n.setAttribute("frameborder","0"),n.setAttribute("scrolling","no"),t.appendChild(n)}function o(t,n,o,r,s,a){var l,d=e(t),c=i(t);c&&(l=d.querySelector("iframe"),l.onload=function(){l.onload=null,c.postMessage({event:"init",params:n,files:o,skin:r},a)},l.setAttribute("src",s))}function r(i){var t=e(i);t.style.visibility="hidden"}function s(e,i,n){var o=document.getElementById(l+e);t(e,i),setTimeout(function(){for(;o.firstChild;)o.removeChild(o.firstChild);n&&"function"==typeof n&&n()},200)}function a(i){var t=e(i);t.style.visibility="visible"}var l="if_";return{add:n,createFramePlayer:o,getFrameContainer:e,getFrameObject:i,hide:r,remove:s,show:a}};var RiseVision=RiseVision||{};RiseVision.Common=RiseVision.Common||{},RiseVision.Common.Message=function(e,i){"use strict";function t(){try{i.style.height=e.style.height}catch(t){console.warn("Can't initialize Message - ",t.message)}}function n(){if(r){for(;i.firstChild;)i.removeChild(i.firstChild);i.style.display="none",e.style.visibility="visible",r=!1}}function o(t){var n,o=document.createDocumentFragment();r?(n=i.querySelector(".message"),n.innerHTML=t):(e.style.visibility="hidden",i.style.display="block",n=document.createElement("p"),n.innerHTML=t,n.setAttribute("class","message"),o.appendChild(n),i.appendChild(o),r=!0)}var r=!1;return t(),{hide:n,show:o}},function(e,i){"use strict";function t(e,i){var t=null,n="",o="",r="";Array.isArray(e)&&e.length>0&&Array.isArray(i)&&i.length>0&&("companyId"===e[0]&&(o=i[0]),"displayId"===e[1]&&(r=i[1]?i[1]:"preview"),RiseVision.Common.LoggerUtils.setIds(o,r),"additionalParams"===e[2]&&(t=JSON.parse(i[2]),n=0!==Object.keys(t.storage).length?t.storage.fileName?"file":"folder":"file",RiseVision.Video.setAdditionalParams(t,n)))}function n(){RiseVision.Video.play()}function o(){RiseVision.Video.pause()}function r(){RiseVision.Video.stop()}function s(){e.removeEventListener("WebComponentsReady",s),l&&""!==l&&(i.rpc.register("rscmd_play_"+l,n),i.rpc.register("rscmd_pause_"+l,o),i.rpc.register("rscmd_stop_"+l,r),i.rpc.register("rsparam_set_"+l,t),i.rpc.call("","rsparam_get",null,l,["companyId","displayId","additionalParams"]))}var a=new i.Prefs,l=a.getString("id");e.oncontextmenu=function(){return!1},e.addEventListener("WebComponentsReady",s)}(window,gadgets);var _gaq=_gaq||[];_gaq.push(["_setAccount","UA-57092159-2"]),_gaq.push(["_trackPageview"]),function(){var e=document.createElement("script");e.type="text/javascript",e.async=!0,e.src=("https:"==document.location.protocol?"https://ssl":"http://www")+".google-analytics.com/ga.js";var i=document.getElementsByTagName("script")[0];i.parentNode.insertBefore(e,i)}();
//# sourceMappingURL=data:application/json;base64,
